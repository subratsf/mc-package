{
	"info": {
		"title": "Marketing Cloud REST API",
		"description": "Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.",
		"version": "1.0.0"
	},
	"host": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com",
	"schemes": [
		"https"
	],
	"basePath": "/",
	"produces": [
		"application/json"
	],
	"paths": {
		"/address/v1/validateEmail": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "validateEmail",
				"description": "Validates an email by specifying the email address and validators to be used in the request body of the HTTP POST. You can use more than one validator in the same call.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestValidateEmail"
					}
				}],
				"responses": {
					"200": {
						"description": "A validation response",
						"schema": {
							"$ref": "#/definitions/ResponseValidateEmail_200"
						}
					},
					"default": {
						"description": "Unexpected error",
						"schema": {
							"$ref": "#/definitions/ResponseValidateEmail_default"
						}
					}
				},
				"x-md-detail": "validateEmail.htm",
				"x-published": true
			}
		},
		"/asset/v1/content/assets/salutations": {
			"get": {
				"tags": [
					"asset"
				],
				"summary": "getSalutations",
				"description": "Gets the default header and footer for an account.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "A salutation object",
						"schema": {
							"$ref": "#/definitions/AssetSalutation"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					}
				},
				"x-published": true
			}
		},
		"/asset/v1/content/assets/{id}/salutations": {
			"get": {
				"tags": [
					"asset"
				],
				"summary": "getSalutationsById",
				"description": "Gets the header and footer for an email.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "The ID of the asset",
					"required": true,
					"type": "number"
				}],
				"responses": {
					"200": {
						"description": "Successful response",
						"schema": {
							"$ref": "#/definitions/AssetSalutation"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					}
				},
				"x-published": true
			}
		},
		"/asset/v1/content/assets/{id}/file": {
			"get": {
				"tags": [
					"asset"
				],
				"summary": "getFile",
				"description": "Gets the binary file for an asset.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "The ID of the asset",
					"required": true,
					"type": "number"
				}],
				"responses": {
					"200": {
						"description": "A Base64-encoded string of the file",
						"schema": {
							"$ref": "#/definitions/Base64String"
						}
					},
					"400": {
						"description": "Bad request",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					},
					"403": {
						"description": "Validation error",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					}
				},
				"x-published": true
			}
		},
		"/asset/v1/content/assets/{id}/channelviews/{viewname}": {
			"get": {
				"tags": [
					"asset"
				],
				"summary": "getChannelView",
				"description": "Returns the requested channel view’s compiled HTML for the asset.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "The ID of the asset",
						"required": true,
						"type": "number"
					},
					{
						"name": "viewName",
						"in": "query",
						"description": "The name of the asset view to retrieve",
						"required": true,
						"type": "string"
					},
					{
						"name": "thumbnail",
						"in": "query",
						"description": "Set to true to return a base64-encoded thumbnail image",
						"required": false,
						"type": "boolean",
						"default": "false"
					},
					{
						"name": "includeHeaderFooter",
						"in": "query",
						"description": "If asset has HTML or text views, set to true to include the message header and footer",
						"required": false,
						"type": "boolean",
						"default": "false"
					},
					{
						"name": "includeDesignContent",
						"in": "query",
						"description": "Set to true to include design content in the thumbnail image",
						"required": false,
						"type": "boolean",
						"default": "false"
					}
				],
				"responses": {
					"200": {
						"description": "Successful response",
						"schema": {
							"$ref": "#/definitions/ChannelView"
						}
					},
					"400": {
						"description": "Request errors",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					},
					"403": {
						"description": "Permissions error",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					}
				},
				"x-published": true
			}
		},
		"/asset/v1/content/assets/{id}": {
			"get": {
				"tags": [
					"asset"
				],
				"summary": "getObjectById",
				"description": "Gets an asset by ID.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "The ID of the asset",
					"required": true,
					"type": "number"
				}],
				"responses": {
					"200": {
						"description": "A single asset",
						"schema": {
							"$ref": "#/definitions/Asset"
						}
					},
					"400": {
						"description": "Bad request",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					},
					"403": {
						"description": "Permission error",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					}
				},
				"x-published": true
			},
			"delete": {
				"tags": [
					"asset"
				],
				"summary": "deleteAsset",
				"description": "Deletes an asset.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "The ID of the asset to delete",
					"required": true,
					"type": "number"
				},
				{
					"name": "isCDNDelete",
					"in": "query",
					"description": "Permanently deletes the file and its URL in Akamai when the associated file is deleted in Content Builder. A value of 1 permanently deletes the file. If isCDNDelete is unspecified or if the value is 0, it doesn’t permanently delete the file.",
					"required": false,
					"type": "Boolean"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ResponseDeleteAsset_200"
						}
					},
					"400": {
						"description": "Bad request",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					},
					"403": {
						"description": "Permission error",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					}
				},
				"x-md-detail": "deleteAsset.htm",
				"x-published": true
			},
			"patch": {
				"tags": [
					"asset"
				],
				"summary": "patchAsset",
				"description": "Updates part of an asset.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "The ID of the asset to update",
						"required": true,
						"type": "number"
					},
					{
						"name": "body",
						"in": "body",
						"description": "JSON Parameters",
						"schema": {
							"$ref": "#/definitions/Asset"
						}
					}
				],
				"responses": {
					"200": {
						"description": "A single asset",
						"schema": {
							"$ref": "#/definitions/Asset"
						}
					},
					"400": {
						"description": "Bad request",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					},
					"403": {
						"description": "Permission error",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					}
				},
				"x-published": true
			},
			"put": {
				"tags": [
					"asset"
				],
				"summary": "updateAsset",
				"description": "Updates a full asset.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "The ID of the asset to update",
						"required": true,
						"type": "number"
					},
					{
						"name": "body",
						"in": "body",
						"description": "JSON Parameters",
						"schema": {
							"$ref": "#/definitions/Asset"
						}
					}
				],
				"responses": {
					"200": {
						"description": "A single asset to update",
						"schema": {
							"$ref": "#/definitions/Asset"
						}
					},
					"400": {
						"description": "Bad request",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					},
					"403": {
						"description": "Permission error",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					}
				},
				"x-published": true
			}
		},
		"/asset/v1/content/assets": {
			"get": {
				"tags": [
					"asset"
				],
				"summary": "simpleQuery",
				"description": "Gets an asset collection by simple $filter parameters.",
				"parameters": [{
						"name": "$page",
						"in": "query",
						"description": "Page number to return from the paged results. Start with 1 and continue until you get zero results. Typically provided along with the $pagesize parameter.",
						"required": false,
						"type": "number"
					},
					{
						"name": "$pagesize",
						"in": "query",
						"description": "Number of results per page to return. Typically provided along with the $page parameter.",
						"required": false,
						"type": "number"
					},
					{
						"name": "$orderBy",
						"in": "query",
						"description": "Determines which asset property to use for sorting, and also determines the direction in which to sort the data. If you don't provide the $orderBy parameter, the results are sorted by asset ID in ascending order.",
						"required": false,
						"type": "string"
					},
					{
						"name": "$filter",
						"in": "query",
						"description": "Filter by an asset's property using a simple operator and value.",
						"required": false,
						"type": "string"
					},
					{
						"name": "$fields",
						"in": "query",
						"description": "Comma delimited string of asset properties used to reduce the size of your results to only the properties you need.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "A collection of assets",
						"schema": {
							"$ref": "#/definitions/Asset"
						}
					},
					"400": {
						"description": "Bad request",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					},
					"403": {
						"description": "Permission error",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					}
				},
				"x-md-detail": "assetSimpleQuery.htm",
				"x-published": true
			},
			"post": {
				"tags": [
					"asset"
				],
				"summary": "CreateAsset",
				"description": "Creates a new asset.",
				"parameters": [{
					"name": "body",
					"in": "body",
					"description": "JSON Parameters",
					"schema": {
						"$ref": "#/definitions/Asset"
					}
				}],
				"responses": {
					"200": {
						"description": "A single asset",
						"schema": {
							"$ref": "#/definitions/Asset"
						}
					},
					"400": {
						"description": "Bad request",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					},
					"403": {
						"description": "Permission error",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					}
				},
				"x-published": true
			}
		},
		"/asset/v1/content/assets/query": {
			"post": {
				"tags": [
					"asset"
				],
				"summary": "advancedQuery",
				"description": "Gets an asset collection by advanced query.",
				"parameters": [{
					"name": "body",
					"in": "body",
					"description": "JSON Parameters",
					"schema": {
						"$ref": "#/definitions/RequestAdvancedAssetQuery"
					}
				}],
				"responses": {
					"200": {
						"description": "A collection of assets",
						"schema": {
							"$ref": "#/definitions/Asset"
						}
					},
					"400": {
						"description": "Bad request",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					},
					"403": {
						"description": "Permission error",
						"schema": {
							"$ref": "#/definitions/AssetError"
						}
					}
				},
				"x-md-detail": "assetAdvancedQuery.htm",
				"x-published": true
			}
		},
		"/asset/v1/content/categories": {
			"post": {
				"tags": [
					"asset"
				],
				"summary": "createCategory",
				"description": "Creates a category (folder) in Content Builder.",
				"parameters": [{
					"name": "body",
					"in": "body",
					"description": "JSON Parameters",
					"schema": {
						"$ref": "#/definitions/RequestCategory"
					}
				}],
				"responses": {
					"200": {
						"description": "A single category",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_200"
						}
					},
					"403": {
						"description": "Unauthorized",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_403"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_500"
						}
					}
				},
				"x-md-detail": "createCategory.htm",
				"x-published": true
			},
			"get": {
				"tags": [
					"asset"
				],
				"summary": "getCategories",
				"description": "Returns one or more Content Builder categories that are owned by or reside in your MID. To request categories that have been shared with your MID, add a scope parameter to the call.",
				"parameters": [{
						"name": "$filter",
						"in": "query",
						"description": "Filter by ParentId using a simple operator and value. ParentId is the only allowed field. If you don't provide a $filter parameter, the query returns all the Categories in your MID.",
						"required": false,
						"type": "string"
					},
					{
						"name": "$page",
						"in": "query",
						"description": "Page number to return from the paged results. Start with 1 and continue until you get zero results. Typically provided along with the $pagesize parameter.",
						"required": false,
						"type": "number"
					},
					{
						"name": "$pagesize",
						"in": "query",
						"description": "Number of results per page to return. Typically provided along with the $page parameter.",
						"required": false,
						"type": "number"
					},
					{
						"name": "$orderBy",
						"in": "query",
						"description": "Determines which category property to use for sorting, and also determines the direction in which to sort the data. If you don't provide the $orderBy parameter, the results are sorted by category ID in ascending order.",
						"required": false,
						"type": "string"
					},
					{
						"name": "scope",
						"in": "query",
						"description": "Determines which MIDs the query results come from. To return categories that reside in your MID, either don't add the scope parameter or call the endpoint like this: .../categories?scope=Ours. To return categories that are shared to your MID, or that you have shared with other MIDs, call the endpoint like this: .../categories?scope=Shared. To return all categories visible to your MID, call the endpoint like this: .../categories?scope=Ours,Shared.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "A collection of categories",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_200"
						}
					},
					"403": {
						"description": "Unauthorized",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_403"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_500"
						}
					}
				},
				"x-md-detail": "getCategories.htm",
				"x-published": true
			}
		},
		"/asset/v1/content/categories/{id}": {
			"get": {
				"tags": [
					"asset"
				],
				"summary": "getCategory",
				"description": "Returns one Content Builder category by ID.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "The ID of the category.",
					"required": true,
					"type": "number"
				}],
				"responses": {
					"200": {
						"description": "A single category",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_200"
						}
					},
					"403": {
						"description": "Unauthorized",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_403"
						}
					},
					"404": {
						"description": "Not found",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_404"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_500"
						}
					}
				},
				"x-md-detail": "getCategory.htm",
				"x-published": true
				}
			},
		"/asset/v1/content/deletedAssets": {
			"get": {
				"tags": [
					"asset"
				],
				"summary": "deletedAssets",
				"description": "Returns a collection of all assets deleted in the last 30 days.",
				"responses": {
					"200": {
						"description": "A collection of assets",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_200"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_400"
						}
					},
					"403": {
						"description": "Not found",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_403"
						}
					}
				},
				"x-md-detail": "deletedAssets.htm",
				"x-published": true
				}
			},
		"/asset/v1/content/deletedAssets/[AssetID]": {
			"patch": {
				"tags": [
					"asset"
				],
				"summary": "deletedAssetsID",
				"description": "Updates part of a deleted asset.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"type": "number",
					"description": "The ID of the asset to update.",
					"required": true
				},
				{
					"name": "body",
					"in": "body",
					"description": "JSON Parameters",
					"schema": {
						"$ref": "#/definitions/DeletedAssets"
					}
				}],
				"responses": {
					"200": {
						"description": "Asset updated",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_200"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_400"
						}
					},
					"403": {
						"description": "Not found",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_403"
						}
					}
				},
				"x-md-detail": "deletedAssetsID.htm",
				"x-published": true
			},
			"put": {
				"tags": [
					"asset"
				],
				"summary": "updateCategoryID",
				"description": "Updates one Content Builder category by ID.",
				"parameters": [{
						"name": "body",
						"in": "body",
						"description": "JSON Parameters",
						"schema": {
							"$ref": "#/definitions/UpdateCategory"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The ID of the category.",
						"required": true,
						"type": "number"
					}
				],
				"responses": {
					"200": {
						"description": "A single updated category",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_200"
						}
					},
					"403": {
						"description": "Unauthorized",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_403"
						}
					},
					"404": {
						"description": "Not found",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_404"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_500"
						}
					}
				},
				"x-md-detail": "updateCategory.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"asset"
				],
				"summary": "deleteCategory",
				"description": "Deletes one Content Builder category by ID.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "The ID of the category.",
					"required": true,
					"type": "number"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ResponseDeleteCategory_200"
						}
					},
					"403": {
						"description": "Unauthorized",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_403"
						}
					},
					"404": {
						"description": "Not found",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_404"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ResponseCategory_500"
						}
					}
				},
				"x-md-detail": "deleteCategory.htm",
				"x-published": true
			}
		},
		"/messaging/v1/domainverification/bulk/insert": {
			"post": {
				"tags": [
					"domainVerification"
				],
				"summary": "domainVerificationBulkInsert",
				"description": "Queue a bulk insert to the From Address Management table using either an array of email addresses or a data extension and column reference.",
				"parameters": [{
					"name": "body",
					"in": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestDomainVerificationBulkInsert"
					}
				}],
				"responses": {
					"201": {
						"description": "Bulk request created",
						"schema": {
							"$ref": "#/definitions/ResponseDVBulk_201"
						}
					}
				},
				"x-md-detail": "insertDomainVerification.htm",
				"x-published": true
			}
		},
		"/messaging/v1/domainverification": {
			"get": {
				"tags": [
					"domainVerification"
				],
				"summary": "domainVerificationGetCollection",
				"description": "Retrieve a list of verified domains for a particular account.",
				"parameters": [
					{
						"name": "$page",
						"in": "query",
						"description": "Number of pages to retrieve",
						"required": false,
						"type": "string"
					},
					{
						"name": "$pagesize",
						"in": "query",
						"description": "Number of records per page",
						"required": false,
						"type": "string"
					},
					{
						"name": "$orderBy",
						"in": "query",
						"description": "Specify how to order the results. The default value is 'domainType%20ASC%20&'.",
						"required": false,
						"type": "string"
					},
					{
						"name": "$filter",
						"in": "query",
						"description": "Filter the results using a simple operator and value.",
						"required": false,
						"type": "string"
					}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ResponseDVGet_200"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/ResponseDVGet_400"
						}
					},
					"403": {
						"description": "Insufficient Privileges",
						"schema": {
							"$ref": "#/definitions/ResponseDVGet_403"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/ResponseDVGet_500"
						}
					}
				},
				"x-md-detail": "domainVerificationGetDetail.htm",
				"x-published": true
			},
			"post": {
				"tags": [
					"domainVerification"
				],
				"summary": "domainVerificationCreateAuthenticatedDomain",
				"description": "Create a record in From Address Management and trigger a verification email. .",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestDomainVerificationCreateAuthenticatedDomain"
					}
				}],
				"responses": {
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/ResponseDVCreate_201"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/ResponseDVCreate_400"
						}
					},
					"403": {
						"description": "Insufficient Privileges",
						"schema": {
							"$ref": "#/definitions/ResponseDVCreate_403"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/ResponseDVCreate_500"
						}
					}
				},
				"x-md-detail": "domainVerificationCreateDetail.htm",
				"x-published": true
			}
		},
		"/messaging/v1/domainverification/update": {
			"post": {
				"tags": [
					"domainVerification"
				],
				"summary": "domainVerificationUpdateAuthenticatedDomain",
				"description": "Update a record in From Address Management.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestDomainVerificationUpdateAuthenticatedDomain"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ResponseDVUpdate_200"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/ResponseDVUpdate_400"
						}
					},
					"403": {
						"description": "Insufficient Privileges",
						"schema": {
							"$ref": "#/definitions/ResponseDVUpdate_403"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/ResponseDVUpdate_500"
						}
					}
				},
				"x-md-detail": "domainVerificationUpdateDetail.htm",
				"x-published": true
			}
		},
		"/messaging/v1/domainverification/delete": {
			"post": {
				"tags": [
					"domainVerification"
				],
				"summary": "domainVerificationDeleteAuthenticatedDomain",
				"description": "Delete a user domain in From Address Management.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestDomainVerificationDeleteAuthenticatedDomain"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ResponseDVDelete_200"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/ResponseDVDelete_400"
						}
					},
					"403": {
						"description": "Insufficient Privileges",
						"schema": {
							"$ref": "#/definitions/ResponseDVDelete_403"
						}
					},
					"500": {
						"description": "Internal Server Error",
						"schema": {
							"$ref": "#/definitions/ResponseDVDelete_500"
						}
					}
				},
				"x-md-detail": "domainVerificationDeleteDetail.htm",
				"x-published": true
			}
		},
		"/messaging/v1/domainverification/register": {
			"post": {
				"tags": [
					"domainVerification"
				],
				"summary": "domainVerificationRegister",
				"description": "Registers a domain for validation by generating and returning the token added to the DNS.",
				"parameters": [{
					"name": "body",
					"in": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestDomainVerificationRegisterDomain"
					}
				}],
				"responses": {
					"200": {
						"description": "OK. Key is created.",
						"schema": {
							"$ref": "#/definitions/ResponseDVRegister_200"
						}
					},
					"403": {
						"description": "Insufficient privileges",
						"schema": {
							"$ref": "#/definitions/ResponseDVRegister_403"
						}
					}
				},
				"x-md-detail": "domainVerificationRegister.htm",
				"x-published": true
			}
		},
		"/messaging/v1/domainverification/verify": {
			"post": {
				"tags": [
					"domainVerification"
				],
				"summary": "domainVerificationVerifyDomain",
				"description": "Checks whether a domain already exists.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestDomainVerificationVerifyDomain"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ResponseDVVerify_200"
						}
					},
					"400": {
						"description": "Bad request",
						"schema": {
							"$ref": "#/definitions/ResponseDVVerify_400"
						}
					},
					"403": {
						"description": "Insufficient privileges",
						"schema": {
							"$ref": "#/definitions/ResponseDVVerify_403"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ResponseDVVerify_500"
						}
					}
				},
				"x-md-detail": "domainVerificationVerifyDomain.htm",
				"x-published": true
			}
		},
		"/messaging/v1/domainverification/push": {
			"post": {
				"tags": [
					"domainVerification"
				],
				"summary": "domainVerificationPushDomain",
				"description": "Pushes one or more registered domains to all existing child business units of your account (EID).",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestDomainVerificationPushDomain"
					}
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ResponseDVPush_200"
						}
					},
					"400": {
						"description": "Bad request",
						"schema": {
							"$ref": "#/definitions/ResponseDVVerify_400"
						}
					},
					"403": {
						"description": "Insufficient privileges",
						"schema": {
							"$ref": "#/definitions/ResponseDVVerify_403"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ResponseDVVerify_500"
						}
					}
				},
				"x-md-detail": "domainVerificationPushDomain.htm",
				"x-published": true
			}
		},
		"/messaging/v1/messageDefinitionSends/{triggeredSendDefinitionId}/send": {
			"post": {
				"tags": [
					"messaging"
				],
				"summary": "messageDefinitionSends",
				"description": "Sends transactional email using Marketing Cloud's triggered send functionality. In order to use this service, configure a triggered send definition in Email Studio. This documentation applies only to triggered sends that are managed in Email Studio. To use the transactional messaging REST API, review <a href=\"https://developer.salesforce.com/docs/atlas.en-us.noversion.mc-apis.meta/mc-apis/transactional-messaging-api.htm\">Transactional Messaging API</a>.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestMessageDefinitionSends"
						}
					},
					{
						"name": "ObjectID",
						"in": "query",
						"description": "ID of the entry event send definition that comes from the response when creating a TriggeredSendDefinition. Either this or the external key is required.",
						"required": true,
						"type": "GUID"
					},
					{
						"name": "key",
						"in": "query",
						"description": "External key of the entry event send definition. Either this or the ObjectID is required.",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "messageDefinitionSends.htm",
				"x-published": true
			}
		},
		"/messaging/v1/messageDefinitionSends/key:{key}/deliveryRecords": {
			"get": {
				"tags": [
					"messaging"
				],
				"summary": "messageDefinitionSendsDeliveryRecords",
				"description": "Gets the delivery details of an email sent using the MessageDefinitionSends.",
				"parameters": [{
						"name": "ObjectID",
						"in": "query",
						"description": "The ID of the entry event send definition, included in URL as id:<em>your ID value here</em> or just the ID. Either this or the external key is required.",
						"required": true,
						"type": "GUID"
					},
					{
						"name": "key",
						"in": "query",
						"description": "External key of the entry event send definition. Either this or the ObjectID is required.",
						"required": true,
						"type": "string"
					},
					{
						"name": "RecipientSendId",
						"in": "query",
						"description": "The RecipientSendId value returned from the /messageDefinitionSends send service, which is the unique identifier for a single email send.",
						"required": true,
						"type": "GUID"
					}
				],
				"x-md-detail": "messageDefinitionSendsDeliveryRecords.htm",
				"x-published": true
			}
		},
		"/messaging/v1/email/definitions/{definitionKey}": {
			"get": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "getSendDefinition",
				"description": "Gets send definition configuration details for a definition key. You can only retrieve activated Transactional Send Journeys created in Journey Builder.",
				"parameters": [{
						"name": "definitionKey",
						"in": "query",
						"description": "Unique identifier of the definition.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Definition retrieved. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseGetSendDefinition_200"
						}
					}
				},
				"x-md-detail": "getSendDefinition.htm",
				"x-published": true
			},
			"patch": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "updateMessageDefinition",
				"description": "Updates a specific message definition.",
				"parameters": [
					{
						"name": "definitionKey",
						"in": "query",
						"description": "Unique identifier of the definition.",
						"required": true,
						"type": "string"
					},
					{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestUpdateMessageDefinition"
					}
				}],
				"responses": {
					"200": {
						"description": "Send definition is updated. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseUpdateMessageDefinition_200"
						}
					}
				},
				"x-md-detail": "updateMessageDefinition.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "deleteMessageDefinition",
				"description": "Deletes a message definition. You can't restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.",
				"parameters": [{
						"name": "definitionKey",
						"in": "query",
						"description": "Unique identifier of the definition.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Send definition is updated on server. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseDeleteMessageDefinition_200"
						}
					}
				},
				"x-md-detail": "deleteMessageDefinition.htm",
				"x-published": true
			}
		},
		"/messaging/v1/email/definitions": {
			"post": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "createSendDefinition",
				"description": "<p>Creates a long-living send definition object that references the email template, subscriber list, sending options, journey, and metadata. A send definition is referenced in the transactional messaging API when triggering a send to recipients. We recommend that you create one definition for each type of email or use-case. In other words, create a definition for a group of email requests, because there is a limit on the number of definitions you can create.</p><p>The transactional send definition will remain synchronized to the transactional send journey (when journey.interactionKey is provided) whether you manage the send definition through this API or the Journey Builder canvas.</p><p>NOTE: You cannot create and manage transactional send journeys using the Journey Builder API (interactions/v1/interaction/{journeyId}).</p><p>You can create only up to 500 total email transactional send definitions plus email triggered send definitions in a seven-day period for one business unit. So don't create a definition for each send request that you trigger. This limit applies to send definitions created in the Marketing Cloud application and via API. It doesn’t apply to the Journey Builder email activity triggered send definition.</p>",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestCreateSendDefinition"
					}
				}],
				"responses": {
					"201": {
						"description": "Send definition is created. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseCreateSendDefinition_201"
						}
					}
				},
				"x-md-detail": "createSendDefinition.htm",
				"x-published": true
			},
			"get": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "getDefinitions",
				"description": "Gets a list of send definitions.",
				"parameters": [
					{
						"name": "$filter",
						"in": "query",
						"description": "Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq.",
						"required": false,
						"type": "string"
					},
					{
						"name": "$pageSize",
						"in": "query",
						"description": "Number of definitions, which are array elements, to return per paged response.",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$page",
						"in": "query",
						"description": "Page number to return.",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$orderBy",
						"in": "query",
						"description": "Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status.",
						"required": false,
						"type": "string"
					}],
					"responses": {
						"200": {
							"description": "Success",
							"schema": {
								"$ref": "#/definitions/ResponseGetDefinitions_200"
							}
						}
					},
				"x-md-detail": "getDefinitions.htm",
				"x-published": true
			}
		},
		"/messaging/v1/email/definitions/{definitionKey}/queue": {
			"get": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "getQueueMetricsForDefinition",
				"description": "Gets metrics for the messages of a send definition. Applies to messages that are accepted but not yet processed.",
				"parameters": [{
						"name": "definitionKey",
						"in": "query",
						"description": "Unique identifier of the definition.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseGetQueueMetricsForDefinition_200"
						}
					}
				},
				"x-md-detail": "getQueueMetricsForDefinition.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "deleteQueuedMessagesForDefinition",
				"description": "Deletes the queue for a send definition. The send definition must be in inactive status.",
				"parameters": [
					{
						"name": "definitionKey",
						"in": "query",
						"description": "Unique identifier of the definition.",
						"required": true,
						"type": "string"
					}],
				"responses": {
						"200": {
							"description": "OK. Review example response.",
							"schema": {
								"$ref": "#/definitions/ResponseDeleteQueuedMessagesForDefinition_200"
							}
						}
					},
				"x-md-detail": "deleteQueuedMessagesForDefinition.htm",
				"x-published": true
			}
		},
		"/messaging/v1/email/messages/": {
			"post": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "sendMessageMultipleRecipients",
				"description": "Sends a message to multiple recipients using a send definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response. The limit is 2000 recipients per request. If you send attributes with the recipients, we recommend no more than 500 recipients per request.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestSendMessageMultipleRecipients"
					}
				}],
				"responses": {
					"202": {
						"description": "Request is accepted. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseSendMessageMultipleRecipients_202"
						}
					}
				},
				"x-md-detail": "sendMessageMultipleRecipients.htm",
				"x-published": true
			}
		},
		"/messaging/v1/email/messages/{messageKey}": {
			"post": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "sendMessageSingleRecipient",
				"description": "Sends a message to a single recipient via a send definition using a messageKey path parameter.",
				"parameters": [{
						"name": "messageKey",
						"in": "query",
						"description": "Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Can be up to 100 characters, and there are no restricted characters. Each recipient in a  request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestSendMessageSingleRecipient"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Request is accepted. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseSendMessageSingleRecipient_202"
						}
					}
				},
				"x-md-detail": "sendMessageSingleRecipient.htm",
				"x-published": true
			},
			"get": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "getSendStatusForRecipient",
				"description": "Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.",
				"parameters": [
					{
						"name": "messageKey",
						"in": "query",
						"description": "Unique identifier to track message send status. Can be up to 100 characters, and there are no restricted characters. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.",
						"required": true,
						"type": "string"
					}],
				"responses": {
						"200": {
							"description": "Request is accepted. Review example response.",
							"schema": {
								"$ref": "#/definitions/ResponseGetSendStatusForRecipient_200"
							}
						}
					},
				"x-md-detail": "getSendStatusForRecipient.htm",
				"x-published": true
			}
		},
		"/messaging/v1/email/messages/?type=notSent": {
			"get": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "getMessagesNotSent",
				"description": "Gets a paginated list of messages that were not sent, ordered from oldest to newest.",
				"parameters": [{
						"name": "type",
						"in": "query",
						"description": "Only notSent is supported.",
						"required": true,
						"type": "string"
					},
					{
						"name": "$pageSize",
						"in": "query",
						"description": "Number of messageKeys (array elements) to return per response page.",
						"required": false,
						"type": "integer"
					},
					{
						"name": "lastEventId",
						"in": "query",
						"description": "Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest.",
						"required": false,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "Success. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseGetMessagesNotSent_200"
						}
					}
				},
				"x-md-detail": "getMessagesNotSent.htm",
				"x-published": true
			}
		},
		"/messaging/v1/sms/definitions/{definitionKey}": {
			"get": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "getSMSSendDefinition",
				"description": "Gets send definition configuration details for a definition key.",
				"parameters": [
					{
						"name": "definitionKey",
						"in": "query",
						"description": "Unique identifier of the definition.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Definition retrieved. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseGetSendDefinitionSMS_200"
						}
					}
				},
				"x-md-detail": "getSMSSendDefinition.htm",
				"x-published": true
			},
			"patch": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "updateSMSMessageDefinition",
				"description": "Updates a specific message definition. It can take up to two minutes for outbound messages to reflect the changes.",
				"parameters": [
					{
						"name": "definitionKey",
						"in": "query",
						"description": "Unique identifier of the definition.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestUpdateSendDefinitionSMS"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Send definition is updated. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseUpdateMessageDefinitionSMS_200"
						}
					}
				},
				"x-md-detail": "updateSMSMessageDefinition.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "deleteSMSMessageDefinition",
				"description": "Deletes a message definition. You can't restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.",
				"parameters": [
					{
						"name": "definitionKey",
						"in": "query",
						"description": "Unique identifier of the definition.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Send definition is updated on server. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseDeleteMessageDefinitionSMS_200"
						}
					}
				},
				"x-md-detail": "deleteSMSMessageDefinition.htm",
				"x-published": true
			}
		},
		"/messaging/v1/sms/definitions": {
			"post": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "createSMSSendDefinition",
				"description": "Creates a send definition.",
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestCreateSendDefinitionSMS"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Send definition is created. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseCreateSendDefinitionSMS_201"
						}
					}
				},
				"x-md-detail": "createSMSSendDefinition.htm",
				"x-published": true
			},
			"get": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "getSMSDefinitions",
				"description": "Gets a list of send definitions.",
				"parameters": [
					{
						"name": "$filter",
						"in": "query",
						"description": "Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq.",
						"required": false,
						"type": "string"
					},
					{
						"name": "$pageSize",
						"in": "query",
						"description": "Number of definitions, which are array elements, to return per paged response.",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$page",
						"in": "query",
						"description": "Page number to return.",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$orderBy",
						"in": "query",
						"description": "Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/ResponseGetDefinitionsSMS_200"
						}
					}
				},
				"x-md-detail": "getSMSDefinitions.htm",
				"x-published": true
			}
		},
		"/messaging/v1/sms/definitions/{definitionKey}/queue": {
			"get": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "getSMSQueueMetricsForDefinition",
				"description": "Gets metrics for the messages of a send definition. Applies to messages that are accepted but not yet processed.",
				"parameters": [
					{
						"name": "definitionKey",
						"in": "query",
						"description": "Unique identifier of the definition.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseGetQueueMetricsForDefinition_200"
						}
					}
				},
				"x-md-detail": "getSMSQueueMetricsForDefinition.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "deleteSMSQueuedMessagesForDefinition",
				"description": "Deletes the queue for a send definition. The send definition must be in inactive status.",
				"parameters": [
					{
						"name": "definitionKey",
						"in": "query",
						"description": "Unique identifier of the definition.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseDeleteQueuedMessagesForDefinition_200"
						}
					}
				},
				"x-md-detail": "deleteSMSQueuedMessagesForDefinition.htm",
				"x-published": true
			}
		},
		"/messaging/v1/sms/messages/": {
			"post": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "sendSMSMessageMultipleRecipients",
				"description": "Sends a message to multiple recipients using a send definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.",
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestSendMessageMultipleRecipientsSMS"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Request is accepted. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseSendMessageMultipleRecipientsSMS_202"
						}
					}
				},
				"x-md-detail": "sendSMSMessageMultipleRecipients.htm",
				"x-published": true
			}
		},
		"/messaging/v1/sms/messages/{messageKey}": {
			"post": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "sendSMSMessageSingleRecipient",
				"description": "Sends a message to a single recipient via a send definition using a messageKey path parameter.",
				"parameters": [
					{
						"name": "messageKey",
						"in": "query",
						"description": "Unique identifier used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Can be up to 100 characters, and there are no restricted characters. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestSendMessageSingleRecipientSMS"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Request is accepted. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseSendMessageSingleRecipientSMS_202"
						}
					}
				},
				"x-md-detail": "sendSMSMessageSingleRecipient.htm",
				"x-published": true
			},
			"get": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "getSMSSendStatusForRecipient",
				"description": "Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.",
				"parameters": [
					{
						"name": "messageKey",
						"in": "query",
						"description": "Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. Can be up to 100 characters, and there are no restricted characters. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Request is accepted. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseGetSendStatusForRecipientSMS_200"
						}
					}
				},
				"x-md-detail": "getSMSSendStatusForRecipient.htm",
				"x-published": true
			}
		},
		"/messaging/v1/sms/messages/?type=notSent": {
			"get": {
				"tags": [
					"transactionalMessaging"
				],
				"summary": "getSMSMessagesNotSent",
				"description": "Gets a paginated list of messages that were not sent, ordered from oldest to newest.",
				"parameters": [
					{
						"name": "type",
						"in": "query",
						"description": "Only notSent is supported.",
						"required": true,
						"type": "string"
					},
					{
						"name": "$pageSize",
						"in": "query",
						"description": "Number of messageKeys (array elements) to return per response page.",
						"required": false,
						"type": "integer"
					},
					{
						"name": "lastEventId",
						"in": "query",
						"description": "Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest.",
						"required": false,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "Success. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseGetMessagesNotSentSMS_200"
						}
					}
				},
				"x-md-detail": "getSMSMessagesNotSent.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts": {
			"post": {
				"tags": [
					"contacts"
				],
				"summary": "createContacts",
				"description": "Creates a new contact with the specified information in the specified attribute groups.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestCreateContacts"
					}
				}],
				"x-md-detail": "createContacts.htm",
				"x-published": true
			},
			"patch": {
				"tags": [
					"contacts"
				],
				"summary": "updateContacts",
				"description": "Updates contacts with the specified information in the specified attribute groups.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestUpdateContacts"
					}
				}],
				"x-md-detail": "updateContacts.htm",
				"x-published": true
			}
		},
		"/contacts/v1/establish": {
			"post": {
				"tags": [
					"contacts"
				],
				"summary": "establishContacts",
				"description": "Creates or returns a contact using the Contact Key and Contact Type provided in the payload.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestEstablishContacts"
					}
				}],
				"responses": {
					"200": {
						"description": "Successfully Established Contact",
						"schema": {
							"$ref": "#/definitions/ResponseEstablishContact_200"
						}
					}
				},
				"x-md-detail": "establish-contacts-detail.htm",
				"x-published": true
			}
		},
		"/contacts/v1/schema": {
			"get": {
				"tags": [
					"contacts"
				],
				"summary": "schemasCollection",
				"description": "Retrieves the collection of all contact data schemas contained in the current account.",
				"parameters": [],
				"x-md-detail": "schemasCollection.htm",
				"x-published": true
			}
		},
		"/contacts/v1/schemas/{schemaId}/attributeGroups": {
			"get": {
				"tags": [
					"contacts"
				],
				"summary": "retrieveAttributeGroups",
				"description": "Retrieves all attribute groups associated with a specified contact data schema.",
				"parameters": [{
					"name": "schemaId",
					"in": "query",
					"description": "The ID of the schema",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "retrieveAttributeGroups.htm",
				"x-published": true
			}
		},
		"/contacts/v1/schemas/{schemaId}/attributeGroups/{id}": {
			"get": {
				"tags": [
					"contacts"
				],
				"summary": "retrieveAttributeGroupsID",
				"description": "Retrieves a specified attribute group (by ID, key, or name) associated with a specified contact data schema.",
				"parameters": [{
						"name": "schemaId",
						"in": "query",
						"description": "The ID of the schema",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"description": "The ID of the attribute group expressed in the form of a GUID (UUID). Required if not using key or name.",
						"required": true,
						"type": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "Key of the attribute group. Prefix the parameter with <strong>key:</strong>. For example, <strong>/attributeGroups/key:{key}</strong>. Required if not using ID or name.",
						"required": true,
						"type": "string"
					},
					{
						"name": "name",
						"in": "query",
						"description": "Name of the attribute group. Prefix the parameter with <strong>name:</strong>. For example, <strong>/attributeGroups/name:{name}</strong>. Required if not using ID or key.",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "retrieveAttributeGroupsID.htm",
				"x-published": true
			}
		},
		"/contacts/v1/attributeSetDefinitions/{id}": {
			"get": {
				"tags": [
					"contacts"
				],
				"summary": "retrieveAttributeSetDefinitions",
				"description": "Retrieves all attribute set definitiond in your contact data model.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "The ID of the attribute set definition expressed in the form of a GUID (UUID). Leave off to retrieve all attribute set definitions in your contact data model.",
					"required": false,
					"type": "string"
				}],
				"x-md-detail": "retrieveAttributeSetDefinitions.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/deleteOperations": {
			"get": {
				"tags": [
					"contacts"
				],
				"summary": "getListOfContactDeleteOperations",
				"description": "Retrieves the list of contact delete operations.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Successfully retrieved list of contact delete operations",
						"schema": {
							"$ref": "#/definitions/ResponseFetchDeleteOperations_200"
						}
					},
					"default": {
						"description": "Unexpected error",
						"schema": {
							"$ref": "#/definitions/ResponseFetchDeleteOperations_default"
						}
					}
				},
				"x-published": true
			}
		},
		"/contacts/v1/schemas/{schemaId}/attributeSetDefinitions/{id}": {
			"get": {
				"tags": [
					"contacts"
				],
				"summary": "retrieveAttributeSetDefinitionsID",
				"description": "Retrieves a specified attribute set definition object (by ID, key, or name) associated with a specified contact data schema.",
				"parameters": [{
						"name": "schemaId",
						"in": "query",
						"description": "The ID of the schema",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"description": "The ID of the attribute set definition expressed in the form of a GUID (UUID). Required if not using key or name.",
						"required": true,
						"type": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "Key of the attribute set definition. Prefix the parameter with <strong>key:</strong>. For example, <strong>/attributeSetDefinitions/key:{key}</strong>. Required if not using ID or name.",
						"required": true,
						"type": "string"
					},
					{
						"name": "name",
						"in": "query",
						"description": "Name of the attribute set definition. Prefix the parameter with <strong>name:</strong>. For example, <strong>/attributeSetDefinitions/name:{name}</strong>. Required if not using ID or key.",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "retrieveAttributeSetDefinitionsID.htm",
				"x-published": false
			}
		},
		"/contacts/v1/addresses/search/{attributeName}/": {
			"post": {
				"tags": [
					"contacts"
				],
				"summary": "fetchContactsAddressesBySearchCriteria",
				"description": "Fetches all contacts and associated addresses based on search criteria",
				"parameters": [{
						"name": "attributeName",
						"in": "query",
						"description": "The attribute used in the search criteria: <ul><li>ContactKey</li><li>LastModfiedDate</li><li>Source</li><li>Channel</li><li>Status</li><li>AudienceID</li></ul>",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestFetchContactAddressesBySearchCriteria"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successfully retrieved contacts and associated addresses",
						"schema": {
							"$ref": "#/definitions/ResponseFetchContactAddressesBySearchCriteria_200"
						}
					},
					"default": {
						"description": "Unexpected error",
						"schema": {
							"$ref": "#/definitions/ResponseFetchContactAddressesBySearchCriteria_default"
						}
					}
				},
				"x-published": true
			}
		},
		"/contacts/v1/addresses/count/": {
			"post": {
				"tags": [
					"contacts"
				],
				"summary": "fetchContactsAddressesCountSearchCriteria",
				"description": "Fetches contact counts for the given search criteria",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestFetchContactAddressCount"
					}
				}],
				"responses": {
					"200": {
						"description": "Successfully retrieved contact counts for specified criteria",
						"schema": {
							"$ref": "#/definitions/ResponseFetchContactAddressCount_200"
						}
					},
					"default": {
						"description": "Unexpected error",
						"schema": {
							"$ref": "#/definitions/ResponseFetchContactAddressCount_default"
						}
					}
				},
				"x-published": true
			}
		},
		"/contacts/v1/attributeGroups/population": {
			"post": {
				"tags": [
					"contacts"
				],
				"summary": "createPopulationAttributeGroup",
				"description": "Creates a population within Contact Builder.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestPopulationAttributeGroupInsert"
					}
				}],
				"responses": {
					"200": {
						"description": "Population AttributeGroup successfully created",
						"schema": {
							"$ref": "#/definitions/ResponseCreatePopulationAttributeGroup_200"
						}
					},
					"default": {
						"description": "Unexpected error",
						"schema": {
							"$ref": "#/definitions/ResponseCreatePopulationAttributeGroup_default"
						}
					}
				},
				"x-published": true
			}
		},
		"/contacts/v1/attributeSets/{id}": {
			"post": {
				"tags": [
					"contacts"
				],
				"summary": "attributeSetsDataIDInsert",
				"description": "Inserts a collection of attribute value containers or the data rows of a specified attribute set by ID or name.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestAttributeSetsDataIDInsert"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The ID of the attribute set expressed in the form of a GUID (UUID). Required if not using key or name.",
						"required": true,
						"type": "string"
					},
					{
						"name": "name",
						"in": "query",
						"description": "The name of the attribute set. Prefix the parameter with <strong>name:</strong>. For example, <strong>/attributeSets/name:{name}</strong>. Required if not using ID.",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "attributeSetsDataIDInsert.htm",
				"x-published": true
			},
			"patch": {
				"tags": [
					"contacts"
				],
				"summary": "attributeSetsDataIDUpdate",
				"description": "Updates a collection of attribute value containers or the data rows of a specified attribute set by ID or name.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestAttributeSetsDataIDUpdate"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The ID of the attribute set expressed in the form of a GUID (UUID). Required if not using key or name.",
						"required": true,
						"type": "string"
					},
					{
						"name": "name",
						"in": "query",
						"description": "The name of the attribute set. Prefix the parameter with <strong>name:</strong>. For example, <strong>/attributeSets/name:{name}</strong>. Required if not using ID.",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "attributeSetsDataIDUpdate.htm",
				"x-published": true
			}
		},
		"/contacts/v1/attributeSets/name:{name}": {
			"get": {
				"tags": [
					"contacts"
				],
				"summary": "attributeSetsDataName",
				"description": "Retrieves a collection of attribute value containers or the data rows of a specified attribute set by name.",
				"parameters": [{
					"name": "name",
					"in": "query",
					"description": "The name of the attribute set. Prefix the parameter with <strong>name:</strong>. For example, <strong>/attributeSets/name:{name}</strong>.",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "attributeSetsDataName.htm",
				"x-published": true
			}
		},
		"/contacts/v1/addresses/email/search": {
			"post": {
				"tags": [
					"contacts"
				],
				"summary": "retrieveContactKey",
				"description": "Retrieves the contact key for one or more email channel addresses.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestRetrieveContactKey"
					}
				}],
				"responses": {
					"200": {
						"description": "Response contains a list of contact keys with their created date and time.",
						"schema": {
							"$ref": "#/definitions/ResponseRetrieveContactKey_200"
						}
					},
					"EmptyResponse": {
						"description": "Empty response when the email channel address is not found.",
						"schema": {
							"$ref": "#/definitions/ResponseRetrieveContactKey_EmptyResponse"
						}
					}
				},
				"x-md-detail": "retrieveContactKey.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/actions/delete/options": {
			"post": {
				"tags": [
					"contacts"
				],
				"summary": "getDeleteOptions",
				"description": "Retrieves delete options based on the specified parameters. You must provide a context request body for this resource, but all listed parameters are optional.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestGetDeleteOptions"
					}
				}],
				"x-md-detail": "getDeleteOptions.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/actions/delete?type=keys": {
			"post": {
				"tags": [
					"contacts"
				],
				"summary": "DeleteByContactKeys",
				"description": "Deletes contacts based on specified contact key values. This operation runs asynchronously. Use the OperationID value returned to check the status of the delete.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestDeleteByContactKeys"
					}
				}],
				"x-md-detail": "DeleteByContactKeys.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/actions/delete?type=ids": {
			"post": {
				"tags": [
					"contacts"
				],
				"summary": "DeleteByContactIDs",
				"description": "Deletes contacts based on specified contact ID values. This operations runs asynchronously. Use the OperationID value returned to check the status of the delete.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestDeleteByContactIDs"
					}
				}],
				"x-md-detail": "DeleteByContactIDs.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/actions/delete?type=listReference": {
			"post": {
				"tags": [
					"contacts"
				],
				"summary": "DeleteByListReference",
				"description": "Deletes contacts based on specified list reference value. This operations runs asynchronously. Use the OperationID value returned to check the status of the delete.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestDeleteByListReference"
					}
				}],
				"x-md-detail": "DeleteByListReference.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/actions/delete/status?operationID=": {
			"get": {
				"tags": [
					"contacts"
				],
				"summary": "ContactsDeleteStatus",
				"description": "Retrieves status of contact deletion operation.",
				"parameters": [{
					"name": "operationID",
					"in": "query",
					"description": "Query string parameter indicating ID of operation to check status",
					"required": true,
					"type": "integer"
				}],
				"x-md-detail": "ContactsDeleteStatus.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/actions/delete/configSettings": {
			"post": {
				"tags": [
					"contacts"
				],
				"summary": "setContactDeleteConfigurationSettings",
				"description": "Sets the configuration settings for the Contact Delete framework and components.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestSetContactDeleteConfigurationSettings"
					}
				}],
				"x-md-detail": "ContactsDeleteConfigStatus.htm",
				"x-published": true
			}
		},
		"/contacts/v1/customObject/{id}/isUsedInContacts": {
			"get": {
				"tags": [
					"contacts"
				],
				"summary": "isCustomObjectUsedInContacts",
				"description": "Retrieves information on whether the contact model for an account uses the custom object.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "ID of the custom object as GUID value",
					"required": true,
					"type": "guid"
				}],
				"responses": {
					"200": {
						"description": "A validation response",
						"schema": {
							"$ref": "#/definitions/ResponseIsCustomObjectUsedInContacts_200"
						}
					}
				},
				"x-md-detail": "getCustomObject.htm",
				"x-published": true
			}
		},
		"/contacts/v1/customobjectfield/{id}/relationships": {
			"get": {
				"tags": [
					"contacts"
				],
				"summary": "retrieveCustomObjectFieldRelationships",
				"description": "Retrieves relationship details for a customobjectfield that is registered in the contacts model.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "ID of the custom object as GUID value",
					"required": true,
					"type": "guid"
				}],
				"responses": {
					"200": {
						"description": "Contact model relationship detail for a custom object field",
						"schema": {
							"$ref": "#/definitions/ResponseCustomObjectFieldRelationships_200"
						}
					},
					"400": {
						"description": "CustomObjectFieldID is a required field",
						"schema": {
							"$ref": "#/definitions/ResponseCustomObjectFieldRelationships_IDRequired_400"
						}
					}
				},
				"x-published": true
			}
		},
		"/contacts/v1/contacts/actions/restrict?type=keys": {
			"post": {
				"tags": ["contacts"],
				"summary": "RestrictByContactKeys",
				"description": "Restricts processing for contacts identified by ContactKey values in the request. This operation runs asynchronously. Use the OperationID value returned to check the status of the delete.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestRestrictByContactKeys"
					}
				}],
				"x-md-detail": "restrict-contact-key.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/actions/restrict?type=ids": {
			"post": {
				"tags": ["contacts"],
				"summary": "RestrictByContactIDs",
				"description": "Restricts processing for contacts identified by ContactID values in the request. This operation runs asynchronously. Use the OperationID value returned to check the status of the delete.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestRestrictByContactIDs"
					}
				}],
				"responses": {
					"200": {
						"description": "Restrict request response",
						"schema": {
							"$ref": "#/definitions/ResponseRestrictContact_200"
						}
					},
					"400": {
						"description": "Bad restrict request response",
						"schema": {
							"$ref": "#/definitions/ResponseRestrictContact_400"
						}
					}
				},
				"x-md-detail": "restrict-contact-id.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/actions/restrict?type=listReference": {
			"post": {
				"tags": ["contacts"],
				"summary": "RestrictByListReference",
				"description": "Restricts processing for contacts identified by listReference values in the request. This operation runs asynchronously. Use the OperationID value returned to check the status of the delete.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestRestrictByListReference"
					}
				}],
				"responses": {
					"200": {
						"description": "Restrict request response",
						"schema": {
							"$ref": "#/definitions/ResponseRestrictContact_200"
						}
					},
					"400": {
						"description": "Bad restrict request response",
						"schema": {
							"$ref": "#/definitions/ResponseRestrictContact_400"
						}
					}
				},
				"x-md-detail": "restrict-contact-listreference.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/actions/restrict/status?operationID=": {
			"get": {
				"tags": ["contacts"],
				"summary": "ContactsRestrictStatus",
				"description": "Retrieves the status of the contact restrict operation.",
				"parameters": [{
					"name": "operationID",
					"in": "query",
					"description": "ID of the operation you are checking the status of.",
					"required": true,
					"type": "GUID"
				}],
				"responses": {
					"200": {
						"description": "Restrict request response",
						"schema": {
							"$ref": "#/definitions/ResponseRestrictContact_200"
						}
					},
					"400": {
						"description": "Bad restrict request response",
						"schema": {
							"$ref": "#/definitions/ResponseRestrictContact_400"
						}
					}
				},
				"x-md-detail": "ContactsRestrictStatus.htm",
				"x-published": true
			}
		},
		"/contacts/v1/operations/delete/{operationID}/retry":{
			"post": {
				"tags": ["contacts"],
				"summary": "RetryFailedDelete",
				"description": "Retry failed contact delete operation.",
				"parameters": [{
					"name": "operationID",
					"in": "query"
				}],
				"responses": {
					"200": {
						"description": "Retry delete operation response.",
						"schema": {
							"$ref": "#/definitions/ResponseRetryOperation_200"
						}
					}
				},
				"x-md-detail": "RetryContactDelete.htm",
				"x-published": true
			}
		},
		"/contacts/v1/operations/restrict/{operationID}/retry":{
			"post": {
				"tags": ["contacts"],
				"summary": "RetryFailedRestrict",
				"description": "Retry failed contact restrict operation.",
				"parameters": [{
					"name": "operationID",
					"in": "query"
				}],
				"responses": {
					"200": {
						"description": "Retry restrict operation response.",
						"schema": {
							"$ref": "#/definitions/ResponseRetryOperation_200"
						}
					}
				},
				"x-md-detail": "RetryContactRestrict.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/analytics/deleterequests":{
			"get": {
				"tags": ["contacts"],
				"summary": "ContactsDeleteRequestsDetails",
				"description": "Retrieves details of contact delete requests for a date range.",
				"parameters": [{
					"name": "startdateutc",
					"in": "query",
					"description": "Start date and time in UTC of the date range.",
					"required": true,
					"type": "datetime"},
					{
						"name": "enddateutc",
						"in": "query",
						"description": "End date and time in UTC of the date range.",
						"required": true,
						"type": "datetime"
					},
					{
						"name": "statusid",
						"in": "query",
						"description": "Delete request status ID. Use it to filter delete requests by status. Valid values are 1 - Processing, 5 - Completed, and 7 - Invalid.",
						"required": false,
						"type": "int"
					},
					{
						"name": "$pagesize",
						"in": "query",
						"description": "Number of records per page.",
						"required": false,
						"type": "int"
					},
					{
						"name": "$page",
						"in": "query",
						"description": "Page number to retrieve.",
						"required": false,
						"type": "int"
					},
					{
						"name": "$orderBy",
						"in": "query",
						"description": "Determines which property to use for sorting and the direction in which to sort the data.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Retrieved contact delete requests details.",
						"schema": {
							"$ref": "#/definitions/ResponseContactsDeleteRequestsDetails_200"
						}
					},
					"400": {
						"description": "The request is missing a required parameter or contains an invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ResponseContactsDeleteRequestsDetails_400"
						}
					}
				},
				"x-md-detail": "ContactsDeleteRequestsDetails.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/analytics/deleterequests/summary":{
			"get": {
				"tags": ["contacts"],
				"summary": "ContactsDeleteRequestsSummary",
				"description": "Retrieves a summary of contact delete requests for a date range.",
				"parameters": [{
					"name": "startdateutc",
					"in": "query",
					"description": "Start date and time in UTC of the date range.",
					"required": true,
					"type": "datetime"},
					{
						"name": "enddateutc",
						"in": "query",
						"description": "End date and time in UTC of the date range.",
						"required": true,
						"type": "datetime"
					}
				],
				"responses": {
					"200": {
						"description": "Retrieved summary of contact delete requests.",
						"schema": {
							"$ref": "#/definitions/ResponseContactsDeleteRequestsSummary_200"
						}
					},
					"400": {
						"description": "The request is missing a required parameter or contains an invalid parameter.",
						"schema": {
							"$ref": "#/definitions/ResponseContactsDeleteRequestsSummary_400"
						}
					}
				},
				"x-md-detail": "ContactsDeleteRequestsSummary.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/preferences":{
			"post": {
				"tags": ["contacts"],
				"summary": "AddContactPreferences",
				"description": "Adds consent management information to contact records for data protection and privacy concerns. The request can include multiple contact IDs in a single JSON payload. For best performance, use batches of contact ID values whenever possible.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestContactPreferences"
					}
				}],
				"responses": {
					"200": {
						"description": "Added contact preferences.",
						"schema": {
							"$ref": "#/definitions/ResponseContactPreferences_200"
						},
					"404": {
						"description": "Not found",
						"schema": {
							"$ref": "#/definitions/ResponseContactPreferences_404"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ResponseContactPreferences_500"
						}
						}
					}
				},
				"x-md-detail": "addContactPreferences.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/id:{contactId}/Preferences":{
			"post": {
				"tags": ["contacts"],
				"summary": "AddContactPreferenceById",
				"description": "Adds consent management information to contact records by contact ID for data protection and privacy concerns.",
				"parameters": [{
					"name": "contactId",
					"in": "query",
					"description": "Unique ID for the contact.",
						"required": true,
						"type": "string"
				},

					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestAddContactPreferenceByContactId"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Added contact preferences by contact ID.",
						"schema": {
							"$ref": "#/definitions/ResponseContactPreferencesById_200"
						},
					"404": {
						"description": "Not found",
						"schema": {
							"$ref": "#/definitions/ResponseContactPreferences_404"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ResponseContactPreferences_500"
						}
						}
					}
				},
				"x-md-detail": "addContactPreferencesById.htm",
				"x-published": true
			},
			"get": {
				"tags": ["contacts"],
				"summary": "GetContactPreferencesById",
				"description": "Retrieves consent management information from contact records by contact ID for data protection and privacy concerns. GET requests might display values that are reserved for future use and don't perform any actions at this time. Use only the parameters documented here.",
				"parameters": [{
					"name": "contactId",
					"in": "query",
					"description": "Unique ID for the contact.",
						"required": true,
						"type": "string"
				}
				],
				"responses": {
					"200": {
						"description": "Retrieved contact preferences by contact ID.",
						"schema": {
							"$ref": "#/definitions/ResponseRetrieveContactPreferencesById_200"
						},
					"404": {
						"description": "Not found",
						"schema": {
							"$ref": "#/definitions/ResponseContactPreferences_404"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ResponseContactPreferences_500"
						}
						}
					}
				},
				"x-md-detail": "getContactPreferencesById.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/preferences/search?ReferenceType={ReferenceType}":{
			"post": {
				"tags": ["contacts"],
				"summary": "SearchContactPreferencesByReferenceType",
				"description": "Searches for consent management information in contact records by reference type. For best performance, use batches of contact ID values whenever possible.",
				"parameters": [{
						"name": "ReferenceType",
						"in": "query",
						"description": "For contact key, use 1. For contact ID, use 2.",
						"required": true,
						"type": "integer"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestSearchContactPreferenceByReferenceType"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Searched contact preferences by reference type.",
						"schema": {
							"$ref": "#/definitions/ResponseSearchContactPreferencesByReferenceType_200"
						},
					"404": {
						"description": "Not found",
						"schema": {
							"$ref": "#/definitions/ResponseContactPreferences_404"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ResponseContactPreferences_500"
						}
						}
					}
				},
				"x-md-detail": "searchContactPreferencesByReferenceType.htm",
				"x-published": true
			}
		},
		"/contacts/v1/contacts/key:{contactKey}/Preferences":{
			"get": {
				"tags": ["contacts"],
				"summary": "GetContactPreferenceByKey",
				"description": "Retrieves consent management information from contact records by contact key. GET requests might display values that are reserved for future use and don't perform any actions at this time. Use only the parameters documented here. For best performance, use batches of contact ID values whenever possible.",
				"parameters": [{
					"name": "contactKey",
					"in": "query",
					"description": "Primary address for the contact.",
						"required": true,
						"type": "string"
				}
				],
				"responses": {
					"200": {
						"description": "Retrieved contact preferences by contact key.",
						"schema": {
							"$ref": "#/definitions/ResponseRetrieveContactPreferencesById_200"
						},
					"404": {
						"description": "Not found",
						"schema": {
							"$ref": "#/definitions/ResponseContactPreferences_404"
						}
					},
					"500": {
						"description": "Internal server error",
						"schema": {
							"$ref": "#/definitions/ResponseContactPreferences_500"
						}
						}
					}
				},
				"x-md-detail": "getContactPreferencesByKey.htm",
				"x-published": true
			}
		},
		"YOUR_SUBDOMAIN.auth.marketingcloudapis.com/v1/requestToken": {
			"post": {
				"tags": [
					"auth"
				],
				"summary": "requestToken",
				"description": "To obtain an OAuth token, perform a <strong>HTTP POST</strong> specifying your <strong>clientId</strong> and <strong>clientSecret</strong> in the request body.",
				"parameters": [{
						"name": "legacy",
						"in": "query",
						"description": "Set to 1 to return a legacy token",
						"required": false,
						"type": "boolean"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestRequestToken"
						}
					}
				],
				"x-md-detail": "https://developer.salesforce.com/docs/atlas.en-us.mc-getting-started.meta/mc-getting-started/requestToken.htm",
				"x-published": true
			}
		},
		"YOUR_SUBDOMAIN.auth.marketingcloudapis.com/v2/token": {
			"post": {
				"tags": [
					"auth"
				],
				"summary": "accessToken",
				"description": "Construct a static endpoint for your request by appending v2/token to the Authorization Base URL provided when you created the API integration.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestAccessToken"
					}
				}],
				"x-md-detail": "https://developer.salesforce.com/docs/atlas.en-us.mc-app-development.meta/mc-app-development/access-token.htm",
				"x-published": true
			}
		},
		"YOUR_SUBDOMAIN.auth.marketingcloudapis.com/v2/authorize": {
			"post": {
				"tags": [
					"auth"
				],
				"summary": "authorizationCode",
				"description": "Your application initiates the authorization code flow by directing the end user to the v2/authorize URL. You can specify the required scopes or permissions as part of the URL. Upon successful validation, the Marketing Cloud authorization service redirects the user’s web browser to the Marketing Cloud login page.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestAuthorizationCode"
					}
				}],
				"x-md-detail": "https://developer.salesforce.com/docs/atlas.en-us.mc-app-development.meta/mc-app-development/authorization-code.htm",
				"x-published": true
			}
		},
		"YOUR_SUBDOMAIN.auth.marketingcloudapis.com/v2/discovery": {
			"get": {
				"tags": [
					"auth"
				],
				"summary": "discovery",
				"description": "Gets tenant-specific REST and authentication base URIs for the Marketing Cloud tenant associated with the provided username and client ID.",
				"parameters": [{
					"name": "client_id",
					"in": "query",
					"description": "Client ID for the application requesting the tenant-specific URIs.",
					"required": true,
					"type": "string"
				},
				{
					"name": "resource",
					"in": "query",
					"description": "Marketing Cloud username that you request base URIs for. Format must be 'acct: open-caret username close-caret', without spaces or quotation marks. Fill in the username.",
					"required": true,
					"type": "string"
				}
				],
				"responses": {
					"200": {
						"description": "Response contains a collection of base URIs for the username",
						"schema": {
							"$ref": "#/definitions/ResponseDiscoveryInfo_200"
						}
					},
					"400": {
						"description": "The server can’t process the request. Query string data is missing or malformed.",
						"schema": {
							"$ref": "#/definitions/ResponseDiscoveryInfo_400"
						}
					}
				},
				"x-md-detail": "getBaseURLs.htm",
				"x-published": true
			}
		},
		"YOUR_SUBDOMAIN.auth.marketingcloudapis.com/v2/userinfo": {
			"get": {
				"tags": [
					"auth"
				],
				"summary": "userinfo",
				"description": "Gets information for the account and user that are associated with the access token. Supply the access token in the authorization header. User information includes the account name, email, and ID. Account information includes the member ID (MID) and enterprise ID (EID). Application information includes REST and SOAP base URIs, redirect URIs, and scopes. Permission information includes the permission name and ID. Review <a href=\"https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/rest-permissions-and-scopes.htm\">REST API Permission IDs and Scopes</a>.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Response contains information about the account and user associated with the supplied access token.",
						"schema": {
							"$ref": "#/definitions/ResponseUserInfo_200"
						}
					},
					"401": {
						"description": "Invalid access token or tenant-specific endpoint.",
						"schema": {
							"$ref": "#/definitions/ResponseUserInfo_401"
						}
					},
					"400": {
						"description": "Missing access token.",
						"schema": {
							"$ref": "#/definitions/ResponseUserInfo_400"
						}
					}
				},
				"x-md-detail": "getUserInfo.htm",
				"x-published": true
			}
		},
		"/hub/v1/workflowteams/{objecttype}": {
			"get": {
				"tags": [
					"workflowteams"
				],
				"summary": "WorkflowTeams",
				"description": "Retrieves a list of active workflow teams. Depending on the query string parameters, the result includes one or both filtered results: role user information for each workflow item or workflow items to which the current user is assigned.",
				"parameters": [{
						"name": "objecttype",
						"in": "query",
						"description": "Specify the workflow object type to retrieve or use (@all to retrieve all workflow object types.",
						"required": true,
						"type": "string"
					},
					{
						"name": "assignee",
						"in": "query",
						"description": "If assignee=@current, this resource retrieves workflow teams that the current user is assigned to.",
						"required": false,
						"type": "string"
					},
					{
						"name": "extra",
						"in": "query",
						"description": "If extra=roleusers, then each item in the response includes role user information as a collection.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Response contains a list of workflow teams.",
						"schema": {
							"$ref": "#/definitions/ResponseWorkflowTeam_200"
						}
					},
					"404": {
						"description": "404 Not Found",
						"schema": {
							"$ref": "#/definitions/ResponseWorkflowTeam_404"
						}
					}
				},
				"x-published": true
			}
		},
		"/hub/v1/workflowitems/{workflowItemId}/roles/{workflowRoleInstanceId}/Users": {
			"post": {
				"tags": [
					"workflowteams"
				],
				"summary": "CreateWorkflowTeamUser",
				"description": "Creates a user role to assign to a workflow role.",
				"parameters": [{
						"name": "workflowRoleInstanceId",
						"in": "query",
						"description": "Id of the workflow role instance.",
						"required": true,
						"type": "string"
					},
					{
						"name": "workflowItemId",
						"in": "query",
						"description": "Id of the workflow item",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestCreateWorkflowTeamUser"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Response contains a list of workflow teams just created.",
						"schema": {
							"$ref": "#/definitions/ResponseCreateWorkflowTeamUser_200"
						}
					},
					"400": {
						"description": "400 Bad Request",
						"schema": {
							"$ref": "#/definitions/ResponseCreateWorkflowTeamUser_400"
						}
					},
					"403": {
						"description": "403 Unauthorized",
						"schema": {
							"$ref": "#/definitions/ResponseCreateWorkflowTeamUser_403"
						}
					},
					"404": {
						"description": "404 Not Found",
						"schema": {
							"$ref": "#/definitions/ResponseCreateWorkflowTeamUser_404"
						}
					}
				},
				"x-published": true
			}
		},
		"/hub/v1/workflowitems/{workflowItemId}/roles/{workflowRoleInstanceId}/Users/{userId}": {
			"delete": {
				"tags": [
					"workflowteams"
				],
				"summary": "DeleteWorkflowTeamuser",
				"description": "Removes a user assigned to a workflow role.",
				"parameters": [{
						"name": "workflowRoleInstanceId",
						"in": "query",
						"description": "Id of the workflow role instance record",
						"required": true,
						"type": "string"
					},
					{
						"name": "workflowItemId",
						"in": "query",
						"description": "Id of the workflow item",
						"required": true,
						"type": "string"
					},
					{
						"name": "userId",
						"in": "query",
						"description": "Id of the user to be removed",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "204 No Content",
						"schema": {
							"$ref": "#/definitions/ResponseDeleteWorkflowTeamuser_204"
						}
					},
					"400": {
						"description": "404 Not Found",
						"schema": {
							"$ref": "#/definitions/ResponseDeleteWorkflowTeamUser_404"
						}
					},
					"403": {
						"description": "403 Unauthorized",
						"schema": {
							"$ref": "#/definitions/ResponseDeleteWorkflowTeamUser_403"
						}
					}
				},
				"x-published": true
			}
		},
		"/hub/v1/workflowitems/{workflowItemid}/transitions": {
			"post": {
				"tags": [
					"workflowteams"
				],
				"summary": "TransitionWorkflowItem",
				"description": "Transitions the workflow item associated to an approval item from one state to another. For example, a workflow item in <strong>Draft</strong> state moves to <strong>Submitted</strong> via the <strong>Submit</strong> transition.",
				"parameters": [{
						"name": "workflowItemId",
						"in": "query",
						"description": "Id of the workflow item",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestTransitionWorkflowItem"
						}
					}
				],
				"responses": {
					"400": {
						"description": "400 Bad Request",
						"schema": {
							"$ref": "#/definitions/ResponseTransitionWorkflowItem_400"
						}
					}
				},
				"x-published": true
			}
		},
		"/hub/v1/approvals-v2/settings": {
			"get": {
				"tags": [
					"approvals"
				],
				"summary": "GetApprovalSettings",
				"description": "Retrieves the approvals settings based on the current user context.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Response includes approvals settings for the current user.",
						"schema": {
							"$ref": "#/definitions/ResponseGetApprovalSettings_200"
						}
					}
				},
				"x-published": true
			},
			"patch": {
				"tags": [
					"approvals"
				],
				"summary": "UpdateApprovalSettings",
				"description": "Updates the approvals settings with the values provided in the request body. Currently only the EnableEmailApprovals setting can be updated using the API.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestPatchApprovalsSettings"
					}
				}],
				"responses": {
					"200": {
						"description": "Response includes the approvals settings for current user.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovalSettings_200"
						}
					},
					"400_KeyRequired": {
						"description": "Key is a required field.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovalSettings_KeyRequired_400"
						}
					},
					"400_ValueRequired": {
						"description": "Value is a required field.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovalSettings_ValueRequired_400"
						}
					},
					"400_ValueBoolean": {
						"description": " Value should be boolean.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovalSettings_ValueBoolean_400"
						}
					}
				},
				"x-published": true
			}
		},
		"/hub/v1/approvals-v2": {
			"get": {
				"tags": [
					"approvals"
				],
				"summary": "GetApprovalItems",
				"description": "Retrieves all approval items belonging to current user. Use the request parameters and supported operators to filter the results by various fields. For example, GET ../approvals?f[objecttype][eq]=CMSAsset1,JobUrl1&f[objectid][eq]=1  retrieves all approval items where Objecttype equals to CMSAsset or JobUrl AND where objectId equals 1. The response includes details of the approval and workflow items, with the current state and the transitions available for the current user’s roles. Use the GET /approvals-v2/{id} resource with available objectType and objectId values to retrieve a single approval item.",
				"parameters": [{
						"name": "f[workflowState]",
						"in": "query",
						"description": "The state will vary based on the workflow. Possible fields include: draft, submitted, reviewed, returned, approved, defining. This filter supports 'eq' and 'not' operators.",
						"required": false,
						"type": "string"
					},
					{
						"name": "f[workflowType]",
						"in": "query",
						"description": "Type of workflow. This filter supports 'eq' and 'not' operators.",
						"required": false,
						"type": "string"
					},
					{
						"name": "f[objectType]",
						"in": "query",
						"description": "Object type. This filter supports 'eq' and 'not' operators.",
						"required": false,
						"type": "string"
					},
					{
						"name": "f[cmsAssetType]",
						"in": "query",
						"description": "Asset type. This filter supports 'eq' and 'not' operators.",
						"required": false,
						"type": "string"
					},
					{
						"name": "f[objectId]",
						"in": "query",
						"description": "Id of the object. This filter supports 'gt', 'gte', 'lt', 'lte', 'eq', and 'not' operators.",
						"required": false,
						"type": "string"
					},
					{
						"name": "f[deadline]",
						"in": "query",
						"description": "Deadline for approval. This filter supports 'gt', 'gte', 'lt', 'lte', 'eq', and 'not' operators. For example, GET ../approvals?f[deadline][gte]='2015-12-08T12:00Z' retrieves all approval items where the deadline is greater than or equal to 2015-12-08, with a time offset of 12:00Z.",
						"required": false,
						"type": "string"
					},
					{
						"name": "$pagesize",
						"in": "query",
						"description": "Number of records per page",
						"required": false,
						"type": "string"
					},
					{
						"name": "$page",
						"in": "query",
						"description": "Number of pages to retrieve",
						"required": false,
						"type": "string"
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sort on one of the following fields: Name, CreatedDate, WorkflowState, Deadline (ASC) -Name, -CreatedDate, -WorkflowState, -Deadline (DESC).",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Response includes a list of approval items.",
						"schema": {
							"$ref": "#/definitions/ResponseGetApprovalsAll_200"
						}
					},
					"400_OrderByInvalid": {
						"description": "The GET request parameter - $OrderBy is invalid and thus the request cannot be processed.",
						"schema": {
							"$ref": "#/definitions/ResponseGetApprovalsAll_OrderByInvalid_400"
						}
					},
					"400_OperatorNotSupported": {
						"description": "The operator 'neq' is not supported.",
						"schema": {
							"$ref": "#/definitions/ResponseGetApprovalsAll_OperatorNotSupported_400"
						}
					},
					"400_FilterInvalid": {
						"description": "The GET request filter parameter is invalid and thus the request cannot be processed.",
						"schema": {
							"$ref": "#/definitions/ResponseGetApprovalsAll_FilterInvalid_400"
						}
					}
				},
				"x-published": true
			},
			"post": {
				"tags": [
					"approvals"
				],
				"summary": "CreateApprovalItem",
				"description": "Creates an approval item and an associated a workflow item. The response includes details of the approval and workflow items, including the current state and the transitions available based on the current user's roles.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestCreateApprovals"
					}
				}],
				"responses": {
					"201": {
						"description": "Response includes the created approval item id and details about the approval and workflow items.",
						"schema": {
							"$ref": "#/definitions/ResponseCreateApprovals_200"
						}
					},
					"409": {
						"description": "There is already an active approval for CMSAsset with id {id}.",
						"schema": {
							"$ref": "#/definitions/ResponseCreateApprovals_409"
						}
					},
					"400_NameRequired": {
						"description": "Approval Item Name is required.",
						"schema": {
							"$ref": "#/definitions/ResponseCreateApprovals_NameRequired_400"
						}
					},
					"400_ObjectTypeRequired": {
						"description": "Approval Object Type is required.",
						"schema": {
							"$ref": "#/definitions/ResponseCreateApprovals_ObjectTypeRequired_400"
						}
					},
					"400_ObjectIdRequired": {
						"description": "ObjectId is required.",
						"schema": {
							"$ref": "#/definitions/ResponseCreateApprovals_ObjectIdRequired_400"
						}
					},
					"400_InvalidWorkflowTeam": {
						"description": "Invalid Workflow Team.",
						"schema": {
							"$ref": "#/definitions/ResponseCreateApprovals_InvalidWorkflowTeam_400"
						}
					},
					"400_NoWorkflowTeam": {
						"description": "No workflow team has been specified, and no default Two-Step Approvals workflow team has been created. Please create a Two-Step Approvals workflow team, or specify an existing workflow team. Then, try again.",
						"schema": {
							"$ref": "#/definitions/ResponseCreateApprovals_NoWorkflowTeam_400"
						}
					},
					"400_NoApprover": {
						"description": "No Approver has been assigned to this default review team.  Please go to Approvals Administration and add an Approver to the default review team.",
						"schema": {
							"$ref": "#/definitions/ResponseCreateApprovals_NoApprover_400"
						}
					}
				},
				"x-published": true
			}
		},
		"/hub/v1/approvals-v2/{id}": {
			"get": {
				"tags": [
					"approvals"
				],
				"summary": "GetApprovalItem",
				"description": "Retrieves an approval item belonging to current user. The response includes details of the approval and workflow item, with the current state and the transitions available for the current user's roles. Use the GET /approvals resource to retrieve all active approval items.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "Approval item id",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Response includes details about the approval item.",
						"schema": {
							"$ref": "#/definitions/ResponseGetApprovals_200"
						}
					},
					"400": {
						"description": "id is a required field",
						"schema": {
							"$ref": "#/definitions/ResponseGetApprovals_400"
						}
					},
					"404": {
						"description": "No active approval with the given id exists.",
						"schema": {
							"$ref": "#/definitions/ResponseGetApprovals_404"
						}
					}
				},
				"x-published": true
			},
			"patch": {
				"tags": [
					"approvals"
				],
				"summary": "ModifyApprovalItem",
				"description": "Modifies the name, description, and deadline of an existing approval item. The response contains details of the approval and workflow items, including the current state and available transitions based on the current user’s roles.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "Id of the workflow item to be updated",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPatchApprovals"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 OK.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovals_200"
						}
					},
					"404": {
						"description": "No active approval with the given id exists.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovals_404"
						}
					},
					"400_IdRequired": {
						"description": "Id is required.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovals_400_IdRequired"
						}
					},
					"400_HasDeadlineRequired": {
						"description": "HasDeadline is required.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovals_400_HasDeadlineRequired"
						}
					},
					"400_DeadlineRequired": {
						"description": "Deadline is required.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovals_400_DeadlineRequired"
						}
					}
				},
				"x-published": true
			}
		},
		"/hub/v1/approvals-v2/{id}/roles": {
			"get": {
				"tags": [
					"approvals"
				],
				"summary": "GetApprovalRoles",
				"description": "Retrieves a list of roles for a given approval item as well as the users assigned to those roles.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "Approval item ID",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "Response includes details about the roles, and users assigned to those roles, for an approval item.",
						"schema": {
							"$ref": "#/definitions/ResponseGetApprovalRoles_200"
						}
					}
				},
				"x-published": true
			},
			"patch": {
				"tags": [
					"approvals"
				],
				"summary": "ModifyApprovalItem",
				"description": "Modifies the name, description, and deadline of an existing approval item.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "Id of the workflow item to be updated",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPatchApprovals"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200 OK. Response contains details of the approval and workflow items, including the current state and available transitions based on the current user’s roles.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovals_200"
						}
					},
					"404": {
						"description": "No active approval with the given id exists.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovals_404"
						}
					},
					"400_IdRequired": {
						"description": "Id is required.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovals_400_IdRequired"
						}
					},
					"400_HasDeadlineRequired": {
						"description": "HasDeadline is required.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovals_400_HasDeadlineRequired"
						}
					},
					"400_DeadlineRequired": {
						"description": "Deadline is required.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchApprovals_400_DeadlineRequired"
						}
					}
				},
				"x-published": false
			}
		},
		"/hub/v1/campaigns/{id}": {
			"post": {
				"tags": [
					"campaigns"
				],
				"summary": "updateCampaign",
				"description": "Updates a campaign.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "Id of the campaign",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "updateCampaign.htm",
				"x-published": false
			},
			"delete": {
				"tags": [
					"campaigns"
				],
				"summary": "deleteCampaign",
				"description": "Deletes a campaign.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "Campaign ID",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "deleteCampaign.htm",
				"x-published": true
			},
			"get": {
				"tags": [
					"campaigns"
				],
				"summary": "getCampaign",
				"description": "Retrieves a campaign.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "Campaign ID",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "getCampaign.htm",
				"x-published": true
			}
		},
		"/hub/v1/campaigns/{id}/assets/{assetId}": {
			"get": {
				"tags": [
					"campaigns"
				],
				"summary": "getCampaignAsset",
				"description": "Retrieves a campaign asset.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "Campaign ID",
						"required": true,
						"type": "string"
					},
					{
						"name": "assetid",
						"in": "query",
						"description": "Asset ID",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "getCampaignAsset.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"campaigns"
				],
				"summary": "unassociateAssetToCampaign",
				"description": "Disassociates an asset from a campaign.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "Campaign ID",
						"required": true,
						"type": "request parameter"
					},
					{
						"name": "assetid",
						"in": "query",
						"description": "Asset ID",
						"required": true,
						"type": "request parameter"
					}
				],
				"x-md-detail": "unassociateAssetToCampaign.htm",
				"x-published": true
			}
		},
		"/hub/v1/campaigns/{id}/assets": {
			"post": {
				"tags": [
					"campaigns"
				],
				"summary": "associateAssetToCampaign",
				"description": "Associates an asset or collection of assets to a campaign.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestAssociateAssetToCampaign"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "Campaign ID",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "associateAssetToCampaign.htm",
				"x-published": true
			},
			"get": {
				"tags": [
					"campaigns"
				],
				"summary": "getCampaignAssetCollection",
				"description": "Retrieves a collection of campaign assets.",
				"parameters": [{
					"name": "id",
					"in": "query",
					"description": "Campaign ID",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "getCampaignAssetCollection.htm",
				"x-published": true
			}
		},
		"/hub/v1/campaigns": {
			"post": {
				"tags": [
					"campaigns"
				],
				"summary": "createCampaign",
				"description": "Creates a campaign.",
				"parameters": [{
						"name": "name",
						"in": "query",
						"description": "Name of the campaign with a maximum length of 128 characters",
						"required": true,
						"type": "string"
					},
					{
						"name": "description",
						"in": "query",
						"description": "Description of the campaign with a maximum length of 512 characters",
						"required": true,
						"type": "string"
					},
					{
						"name": "campaignCode",
						"in": "query",
						"description": "Unique identifier for the campaign with a maximum length of 36 characters",
						"required": true,
						"type": "string"
					},
					{
						"name": "color",
						"in": "query",
						"description": "Hex color value",
						"required": true,
						"type": "string"
					},
					{
						"name": "favorite",
						"in": "query",
						"description": "Determines if the campaign will be flagged as a favorite",
						"required": true,
						"type": "boolean"
					}
				],
				"x-md-detail": "createCampaign.htm",
				"x-published": true
			},
			"get": {
				"tags": [
					"campaigns"
				],
				"summary": "getCampaignCollection",
				"description": "Retrieves a collection of campaigns.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestGetCampaignCollection"
					}
				}],
				"x-md-detail": "getCampaignCollection.htm",
				"x-published": true
			},
			"patch": {
				"tags": [
					"campaigns"
				],
				"summary": "patchCampaign",
				"description": "Updates a campaign.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestPatchCampaign"
					}
				}],
				"x-md-detail": "patchCampaign.htm",
				"x-published": false
			}
		},
		"/data/v1/async/dataextensions/{id}/rows": {
			"post": {
				"tags": [
					"data"
				],
				"summary": "insertDataExtensionIDAsync",
				"description": "Asynchronously insert data into an identified data extension by id or key, where id is the unique identifier of the data extension and key is the external key (customer key) of the data extension.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "Unique identifier of the data extension. Required if not using a key.",
						"required": true,
						"type": "guid"
					},
					{
						"name": "key",
						"in": "query",
						"description": "External customer key of the data extension. Required if not using an ID. Prepend the parameter with <strong>key:</strong>. For example, <strong>/dataextensions/key:{key}/rows</strong>.",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/RequestDataExtensionRows"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/ResponseAsyncDataExtensionRows_202"
						}
					}
				},
				"x-md-detail": "insertDataExtensionIDAsync.htm",
				"x-published": true
			},
			"put": {
				"tags": [
					"data"
				],
				"summary": "updateDataExtensionIDAsync",
				"description": "Asynchronously upsert data into an identified data extension by id or key, where id is the unique identifier of the data extension and key is the external key (customer key) of the data extension.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "Unique identifier of the data extension. Required if not using a key.",
						"required": true,
						"type": "guid"
					},
					{
						"name": "key",
						"in": "query",
						"description": "External customer key of the data extension. Required if not using an ID. Prepend the parameter with <strong>key:</strong>. For example, <strong>/dataextensions/key:{key}/rows</strong>.",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/RequestDataExtensionRows"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/ResponseAsyncDataExtensionRows_202"
						}
					}
				},
				"x-md-detail": "updateDataExtensionIDAsync.htm",
				"x-published": true
			}
		},
		"/data/v1/async/{requestId}/status": {
			"get": {
				"tags": [
					"data"
				],
				"summary": "getStatusDataExtensionAsync",
				"description": "Retrieve the status of the originally posted asynchronous request. Use the status to determine if the request has completed and whether or not there were errors in processing.",
				"parameters": [{
					"name": "requestId",
					"in": "query",
					"description": "The requestId returned from a previous and successfully submitted asynchronous request, in this case /data/v1/async/dataextensions/*.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ResponseAsyncStatus_200"
						}
					}
				},
				"x-md-detail": "getStatusDataExtensionAsync.htm",
				"x-published": true
			}
		},
		"/data/v1/async/{requestId}/results": {
			"get": {
				"tags": [
					"data"
				],
				"summary": "getResultsDataExtensionAsync",
				"description": "Once the request has been picked up by the asynchronous framework and passed off to the appropriate service for processing, use this resource to retrieve the results of that service operation.",
				"parameters": [{
					"name": "requestId",
					"in": "query",
					"description": "The requestId returned from a previous and successfully submitted asynchronous request, in this case /data/v1/async/dataextensions/*.",
					"required": true,
					"type": "string"
				}],
				"responses": {
					"202": {
						"description": "Accepted",
						"schema": {
							"$ref": "#/definitions/ResponseAsyncResults_200"
						}
					}
				},
				"x-md-detail": "getResultsDataExtensionAsync.htm",
				"x-published": true
			}
		},
		"/data/v1/audit/auditEvents": {
			"get": {
				"tags": [
					"audit"
				],
				"summary": "getAuditEvents",
				"description": "Retrieves logged Audit Trail audit events for the current account and its children. Logins are audited at the enterprise level.",
				"parameters": [{
						"name": "$page",
						"in": "query",
						"description": "Page number to return from the paged results. Start with 1 and continue until you get zero results. Typically provided along with the $pagesize parameter. The default is 1.",
						"required": false,
						"type": "number"
					},
					{
						"name": "$pagesize",
						"in": "query",
						"description": "Number of results per page to return. Typically provided along with the $page parameter.",
						"required": false,
						"type": "number"
					},
					{
						"name": "$orderBy",
						"in": "query",
						"description": "Determines which property to use for sorting and the direction in which to sort the data. If you don't provide the $orderBy parameter, the results are sorted by createdDate in ascending order.",
						"required": false,
						"type": "string"
					},
					{
						"name": "startdate",
						"in": "query",
						"description": "Start date of the date range to search for security events. If you don't provide a start date, the default value is today minus 30 days. The startdate must be before the enddate.",
						"required": false,
						"type": "string"
					},
					{
						"name": "enddate",
						"in": "query",
						"description": "End date of the date range to search for security events. If you don't provide an end date, the default is today. The enddate must be after the startdate.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ResponseAuditEvents_200"
						}
					},
					"400": {
						"description": "Bad request.",
						"schema": {
							"$ref": "#/definitions/ResponseAuditEvents_400"
						}
					},
					"401": {
						"description": "Invalid access token or tenant-specific endpoint.",
						"schema": {
							"$ref": "#/definitions/ResponseAuditEvents_401"
						}
					}
				},
				"x-md-detail": "getAuditEvents.htm",
				"x-published": true
			}
		},
		"/data/v1/audit/securityEvents": {
			"get": {
				"tags": [
					"audit"
				],
				"summary": "getSecurityEvents",
				"description": "Retrieves logged Audit Trail security events for the authenticated user’s account and its children. Logins are audited at the enterprise level.",
				"parameters": [{
						"name": "$page",
						"in": "query",
						"description": "Page number to return from the paged results. Start with 1 and continue until you get zero results. Typically provided along with the $pagesize parameter. The default is 1.",
						"required": false,
						"type": "number"
					},
					{
						"name": "$pagesize",
						"in": "query",
						"description": "Number of results per page to return. Typically provided along with the $page parameter.",
						"required": false,
						"type": "number"
					},
					{
						"name": "$orderBy",
						"in": "query",
						"description": "Determines which direction to sort the data by createdDate. Use asc for ascending and desc for descending order. For example: &$orderBy=createdDate desc. If you don't provide the $orderBy parameter, the results are sorted in ascending order.",
						"required": false,
						"type": "string"
					},
					{
						"name": "startdate",
						"in": "query",
						"description": "Start date of the date range to search for security events. If you don't provide a start date, the default is today minus 30 days. The startdate must be before the enddate.",
						"required": false,
						"type": "string"
					},
					{
						"name": "enddate",
						"in": "query",
						"description": "End date of the date range to search for security events.. If you don't provide an end date, the default is today. The enddate must be after the startdate.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ResponseSecurityEvents_200"
						}
					},
					"400": {
						"description": "Bad request",
						"schema": {
							"$ref": "#/definitions/ResponseSecurityEvents_400"
						}
					},
					"401": {
						"description": "Invalid access token or tenant-specific endpoint.",
						"schema": {
							"$ref": "#/definitions/ResponseSecurityEvents_401"
						}
					}
				},
				"x-md-detail": "getSecurityEvents.htm",
				"x-published": true
			}
		},
		"/hub/v1/dataevents/{guid}/rowset": {
			"post": {
				"tags": [
					"dataevents"
				],
				"summary": "postDataExtensionRowsetByID",
				"description": "Upserts a batch of data extension rows by ID.",
				"parameters": [{
						"name": "guid",
						"in": "query",
						"description": "GUID of Data Extension",
						"required": true,
						"type": "GUID"
					},
					{
						"name": "keys",
						"in": "query",
						"description": "Key/Value pair of the primary key(s) for each row.",
						"required": false,
						"type": "object"
					},
					{
						"name": "values",
						"in": "query",
						"description": "Column name and value data set for the row being inserted into the data extension",
						"required": false,
						"type": "object"
					}
				],
				"x-md-detail": "postDataExtensionRowsetByID.htm",
				"x-published": false
			}
		},
		"/hub/v1/dataevents/key:{key}/rowset": {
			"post": {
				"tags": [
					"dataevents"
				],
				"summary": "postDataExtensionRowsetByKey",
				"description": "The API upserts multiple data extension rows in a single synchronous call. The maximum payload size is 5 MB. As a best practice, post a maximum of 50 columns and 50 records at a time.",
				"parameters": [{
						"name": "key",
						"in": "query",
						"description": "Data extension external key, included in URL as key:<em>your external key value here</em>. Required if an ID is not provided.",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"description": "Data extension ID, included in URL as <em>your ID value here</em>. Required if a key is not provided. For example: /dataevents/{id}/rowset.",
						"required": true,
						"type": "string"
					},
					{
						"name": "keys",
						"in": "query",
						"description": "Key/Value pair of the primary key(s) for each row",
						"required": true,
						"type": "object"
					},
					{
						"name": "values",
						"in": "query",
						"description": "Column name and value data set for the row being inserted into the data extension",
						"required": false,
						"type": "object"
					}
				],
				"x-md-detail": "postDataExtensionRowsetByKey.htm",
				"x-published": true
			}
		},
		"/hub/v1/dataeventsasync/key:{key}/rows/{primaryKeys}": {
			"put": {
				"tags": [
					"dataevents"
				],
				"summary": "putDataExtensionRowByKeyAsync",
				"description": "Asynchronously upserts a data extension row by key.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPutDataExtensionRowByKeyAsync"
						}
					},
					{
						"name": "guid",
						"in": "query",
						"description": "GUID of data extension",
						"required": true,
						"type": "GUID"
					},
					{
						"name": "key",
						"in": "query",
						"description": "Data extension external key, included in URL as key:<em>your external key value here</em>. Required if an ID is not provided.",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"description": "Data extension ID, included in URL as id:<em>your ID value here</em> or just the ID. Required if a key is not provided.",
						"required": true,
						"type": "string"
					},
					{
						"name": "primaryKeys",
						"in": "query",
						"description": "Key/Value pair of the primary key(s) for the row",
						"required": false,
						"type": "object"
					}
				],
				"x-published": false
			}
		},
		"/hub/v1/dataeventsasync/{guid}/rowset": {
			"post": {
				"tags": [
					"dataevents"
				],
				"summary": "postDataExtensionRowsetByIDAsync",
				"description": "Asynchronously upserts a batch of data extension rows by ID.",
				"parameters": [{
					"name": "guid",
					"in": "query",
					"description": "GUID",
					"required": true,
					"type": "GUID"
				}],
				"x-published": false
			}
		},
		"/hub/v1/dataeventsasync/{guid}/rows/{primaryKeys}/column/{column}/increment": {
			"put": {
				"tags": [
					"dataevents"
				],
				"summary": "putIncrementColumnValueByIDAsync",
				"description": "Asynchronously increments a column value by data extension ID.",
				"parameters": [{
						"name": "guid",
						"in": "query",
						"description": "GUID of data extension",
						"required": true,
						"type": "GUID"
					},
					{
						"name": "primaryKeys",
						"in": "query",
						"description": "Key/Value pair of the primary key(s) for the row",
						"required": true,
						"type": "array"
					},
					{
						"name": "column",
						"in": "query",
						"description": "Column name to be incremented",
						"required": true,
						"type": "string"
					},
					{
						"name": "step",
						"in": "query",
						"description": "Increment amount. If not present, default is 1.",
						"required": false,
						"type": "integer"
					}
				],
				"x-published": false
			}
		},
		"/hub/v1/dataevents/key:{key}/rows/{primaryKeys}/column/{column}/increment": {
			"put": {
				"tags": [
					"dataevents"
				],
				"summary": "putIncrementColumnValueByKey",
				"description": "Increments a column value by data extension external key.",
				"parameters": [{
						"name": "key",
						"in": "query",
						"description": "Data extension external key, included in URL as key:<em>your external key value here</em>. Required if an ID is not provided.",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"description": "Data extension ID, included in URL as id:<em>your ID value here</em> or just the ID. Required if a key is not provided.",
						"required": true,
						"type": "string"
					},
					{
						"name": "primaryKeys",
						"in": "query",
						"description": "Key/Value pair of the primary key(s) for the row",
						"required": true,
						"type": "array"
					},
					{
						"name": "column",
						"in": "query",
						"description": "Column name to be incremented",
						"required": true,
						"type": "string"
					},
					{
						"name": "step",
						"in": "query",
						"description": "Increment amount. If not present, default is 1.",
						"required": false,
						"type": "integer"
					}
				],
				"x-md-detail": "putIncrementColumnValueByKey.htm",
				"x-published": true
			}
		},
		"/hub/v1/dataeventsasync/{guid}/rows/{primaryKeys}": {
			"put": {
				"tags": [
					"dataevents"
				],
				"summary": "putDataExtensionRowByIDAsync",
				"description": "Asynchronously upserts a data extension row by ID.",
				"parameters": [{
						"name": "key",
						"in": "query",
						"description": "Data extension external key",
						"required": true,
						"type": "string"
					},
					{
						"name": "keys",
						"in": "query",
						"description": "Key/Value pair of the primary key(s) for each row",
						"required": false,
						"type": "object"
					},
					{
						"name": "values",
						"in": "query",
						"description": "Column name and value data set for the row being inserted into the data extension",
						"required": false,
						"type": "object"
					}
				],
				"x-published": false
			}
		},
		"/hub/v1/dataevents/{guid}/rows/{primaryKeys}/column/{column}/increment": {
			"put": {
				"tags": [
					"dataevents"
				],
				"summary": "putIncrementColumnValueByID",
				"description": "Increments a column value by data extension ID.",
				"parameters": [{
						"name": "guid",
						"in": "query",
						"description": "GUID of data extension",
						"required": true,
						"type": "GUID"
					},
					{
						"name": "primaryKeys",
						"in": "query",
						"description": "Key/Value pair of the primary key(s) for the row",
						"required": true,
						"type": "array"
					},
					{
						"name": "column",
						"in": "query",
						"description": "Column name to be incremented",
						"required": true,
						"type": "string"
					},
					{
						"name": "step",
						"in": "query",
						"description": "Increment amount. If not present, default is 1.",
						"required": false,
						"type": "integer"
					}
				],
				"x-md-detail": "putIncrementColumnValueByID.htm",
				"x-published": false
			}
		},
		"/hub/v1/dataevents/key:{key}/rows/{primaryKeys}": {
			"put": {
				"tags": [
					"dataevents"
				],
				"summary": "putDataExtensionRowByKey",
				"description": "Upserts a data extension row by key.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPutDataExtensionRowByKey"
						}
					},
					{
						"name": "key",
						"in": "query",
						"description": "Data extension external key, included in URL as key:<em>your external key value here</em>. Required if an ID is not provided.",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"description": "Data extension ID, included in URL as id:<em>your ID value here</em> or just the ID. Required if a key is not provided.",
						"required": true,
						"type": "string"
					},
					{
						"name": "primaryKeys",
						"in": "query",
						"description": "Key/Value pair of the primary key(s) for the row",
						"required": false,
						"type": "array"
					}
				],
				"x-md-detail": "putDataExtensionRowByKey.htm",
				"x-published": true
			}
		},
		"/hub/v1/dataeventsasync/key:{key}/rows/{primaryKeys}/column/{column}/increment?step={step}": {
			"put": {
				"tags": [
					"dataevents"
				],
				"summary": "putIncrementColumnValueByKeyAsync",
				"description": "Asynchronously increments a column value by data extension external key.",
				"parameters": [{
						"name": "key",
						"in": "query",
						"description": "Data extension external key, included in URL as key:<em>your external key value here</em>. Required if an ID is not provided.",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"description": "Data extension ID, included in URL as id:<em>your ID value here</em> or just the ID. Required if a key is not provided.",
						"required": true,
						"type": "string"
					},
					{
						"name": "primaryKeys",
						"in": "query",
						"description": "Key/Value pair of the primary key(s) for the row",
						"required": true,
						"type": "array"
					},
					{
						"name": "column",
						"in": "query",
						"description": "Column name to be incremented",
						"required": true,
						"type": "string"
					},
					{
						"name": "step",
						"in": "query",
						"description": "Increment amount. If not present, default is 1.",
						"required": false,
						"type": "integer"
					}
				],
				"x-published": false
			}
		},
		"/hub/v1/dataevents/{guid}/rows/{primaryKeys}": {
			"put": {
				"tags": [
					"dataevents"
				],
				"summary": "putDataExtensionRowByID",
				"description": "Upserts a data extension row by ID.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPutDataExtensionRowByID"
						}
					},
					{
						"name": "guid",
						"in": "query",
						"description": "GUID for this data extension",
						"required": true,
						"type": "GUID"
					},
					{
						"name": "primaryKeys",
						"in": "query",
						"description": "Key/Value pair of the primary key(s) for the row",
						"required": false,
						"type": "array"
					}
				],
				"x-md-detail": "putDataExtensionRowByID.htm",
				"x-published": false
			}
		},
		"/hub/v1/dataeventsasync/key:{key}/rowset": {
			"post": {
				"tags": [
					"dataevents"
				],
				"summary": "postDataExtensionRowsetByKeyAsync",
				"description": "Asynchronously upserts a batch of data extensions rows by key.",
				"parameters": [{
						"name": "key",
						"in": "query",
						"description": "Data extension external key, included in URL as key:<em>your external key value here</em>. Required if an ID is not provided.",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"description": "Data extension ID, included in URL as id:<em>your ID value here</em> or just the ID. Required if a key is not provided.",
						"required": true,
						"type": "string"
					},
					{
						"name": "keys",
						"in": "query",
						"description": "Key/Value pair of the primary key(s) for each row",
						"required": false,
						"type": "object"
					},
					{
						"name": "values",
						"in": "query",
						"description": "Column name and value data set for the row being inserted into the data extension.",
						"required": false,
						"type": "object"
					}
				],
				"x-published": false
			}
		},
		"/hub/v1/nestedtags": {
			"get": {
				"tags": [
					"objects"
				],
				"summary": "getNestedTags",
				"description": "Returns an array of tags owned by the requesting client.",
				"parameters": [{
                    "name": "depth",
                    "in": "query",
                    "description": "The number of nesting levels to retrieve. The default depth is 0.",
                    "required": false,
                    "type": "number"
                }],
				"responses": {
					"200": {
						"description": "Response includes an array of tags owned by the client, including each tag’s properties and nested tags at the level specified by the depth parameter.",
						"schema": {
							"$ref": "#/definitions/ResponseGetNestedTags"
						}
					}
				},
        "x-md-detail": "getNestedTags.htm",
				"x-published": true
			},
			"post": {
				"tags": [
					"objects"
				],
				"summary": "createNestedTags",
				"description": "Creates a tag that can be associated with any Marketing Cloud object that accepts tagging. The tag must contain a unique name. The tag can contain a description and a list of one or more nested tags.",
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPostNestedTags"
						}
					}
				],
				"responses": {
						"201": {
								"description": "Response includes the newly created tag and all of its properties, including nested tags at the level specified by the depth parameter.",
								"schema": {
								"$ref": "#/definitions/ResponsePostNestedTags"
						}
					}
				},
				"x-md-detail": "createNestedTags.htm",
				"x-published": true
			}
		},
		"/hub/v1/nestedtags/{tagId}": {
			"get": {
				"tags": [
					"objects"
				],
				"summary": "getNestedTagById",
				"description": "Returns the tag associated with the specified tagId.",
				"parameters": [{
                    "name": "depth",
                    "in": "query",
                    "description": "The number of nesting levels to retrieve. The default depth is 0.",
                    "required": false,
                    "type": "number"
                }],
				"responses": {
					"200": {
						"description": "Response includes the specified tag and all of its properties, including nested tags at the level specified by the depth parameter.",
						"schema": {
							"$ref": "#/definitions/ResponseGetNestedTags"
						}
					}
				},
        "x-md-detail": "getNestedTagById.htm",
				"x-published": true
			},
			"put": {
				"tags": [
					"objects"
				],
				"summary": "updateNestedTags",
				"description": "Updates an existing tag. You must provide the entire tag payload because this request modifies the entire tag. To provide only the fields to modify, use the <a href=\"patchNestedTags.htm\">Patch Nested Tags</a> request instead.",
				"parameters": [
					{
						"name": "tagId",
						"in": "query",
						"description": "ID of the tag to update.",
						"required": true,
						"type": "number"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPutNestedTags"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Response includes the updated tag and all of its properties, including nested tags at the level specified by the depth parameter.",
						"schema": {
							"$ref": "#/definitions/ResponsePutNestedTags"
						}
					}
				},
				"x-md-detail": "updateNestedTags.htm",
				"x-published": true
			},
			"patch": {
				"tags": [
					"objects"
				],
				"summary": "patchNestedTags",
				"description": "Updates an existing tag. Provide only the tag fields to be changed.",
				"parameters": [
					{
						"name": "tagId",
						"in": "query",
						"description": "ID of the tag to patch.",
						"required": true,
						"type": "number"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPatchNestedTags"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Response includes the updated tag and all of its properties, including nested tags at the level specified by the depth parameter.",
						"schema": {
							"$ref": "#/definitions/ResponsePatchNestedTags"
						}
					}
				},
				"x-md-detail": "patchNestedTags.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"objects"
				],
				"summary": "deleteNestedTags",
				"description": "Deletes an existing tag and all of its nested tags.",
				"parameters": [
					{
						"name": "tagId",
						"in": "query",
						"description": "ID of the tag to delete.",
						"required": true,
						"type": "number"
					}
				],
				"x-md-detail": "deleteNestedTags.htm",
				"x-published": true
			}
		},
		"/hub/v1/objects/{objectTypeName}/tags/": {
			"post": {
				"tags": [
					"objects"
				],
				"summary": "createTags",
				"description": "You can add tags via the API to Marketing Cloud to help identify and categorize different objects. An object can have multiple tags, and a tag can be associated with multiple objects. This resource creates an association for each tag/object pair. For example, if the payload includes 10 tags and 20 object IDs, the API call creates 200 associations.",
				"parameters": [{
						"name": "objectTypeName",
						"in": "query",
						"description": "Designates the type of object to assign tags to. Possible values include:<ul><li>campaign - adds tags to a campaign</li><li>InteractionStudio.DefinitionInfo - adds tags to a journey</li><li>media - adds tags to a media asset</li></ul>",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPostTags"
						}
					}
				],
				"x-md-detail": "createTags.htm",
				"x-published": true
			}
		},
		"/hub/v1/objects/{objectTypeName}/tags/delete": {
			"post": {
				"tags": [
					"objects"
				],
				"summary": "deleteTags",
				"description": "Use this resource to delete multiple tag associations at one time.",
				"parameters": [{
						"name": "objectTypeName",
						"in": "query",
						"description": "Designates the type of object to delete tags from. Possible values include:<ul><li>campaign - deletes tags from a campaign</li><li>InteractionStudio.DefinitionInfo - deletes tags from a journey</li><li>media - deletes tags from a media asset</li></ul>",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestDeleteTags"
						}
					}
				],
				"x-md-detail": "deleteTags.htm",
				"x-published": true
			}
		},
		"/interaction/v1/events": {
			"post": {
				"tags": [
					"interaction"
				],
				"summary": "postEvent",
				"description": "Fires the entry event that initiates the journey. If you use UTF-8 characters in a payload for the Rest API, change the Content-Type header to: application/json; charset=UTF-8.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestPostEvent"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/ResponsePostEvent_200"
						}
					}
				},
				"x-md-detail": "postEvent.htm",
				"x-published": true
			}
		},
		"/interaction/v1/eventDefinitions": {
			"post": {
				"tags": [
					"interaction"
				],
				"summary": "createEventDefinition",
				"description": "Creates an event definition (name and data schema for an event) and defines an event definition key. The resource uses this key when firing an event to send it to the appropriate journey. Typically, marketers create the event definition in the Journey Builder UI. Use this resource instead if you are using a custom application for Journey Builder functionality. To call this resource, assign your API Integration the Automation | Interactions | Read scope.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestCreateEventDefinition"
					}
				}],
				"x-md-detail": "createEventDefinition.htm",
				"x-published": true
			},
			"get": {
				"tags": [
					"interaction"
				],
				"summary": "getEventDefinitions",
				"description": "Retrieves a collection of event definitions that matches the filter criteria.",
				"parameters": [{
						"name": "$page",
						"in": "query",
						"description": "The number of pages to retrieve. The default value is 1.",
						"required": false,
						"type": "number"
					},
					{
						"name": "$pageSize",
						"in": "query",
						"description": "The number of results to return on a page. The default and maximum is 50.",
						"required": false,
						"type": "number"
					},
					{
						"name": "name",
						"in": "query",
						"description": "Filter results by the name of the event definition",
						"required": false,
						"type": "string"
					},
					{
						"name": "mode",
						"in": "query",
						"description": "Filter results by event definitions in production (1) or test (2) mode",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "mode",
						"in": "query",
						"description": "Filter results by event definitions that are active (1) or inactive (2)",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "mode",
						"in": "query",
						"description": "Filter results by event definitions that are visible in the Event Picker when creating a journey (1) or not (2)",
						"required": false,
						"type": "boolean"
					}
				],
				"x-published": true
			}
		},
		"/interaction/v1/eventDefinitions/{id}": {
			"get": {
				"tags": [
					"interaction"
				],
				"summary": "getEventDefinition",
				"description": "Retrieves an individual event definition by ID or key.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "The ID of the event definition expressed in the form of a GUID (UUID). Required if not using a key.",
						"required": true,
						"type": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "The key of the event definition. Required if not using an ID. Prefix the parameter with <strong>key:</strong>. For example, <strong>/eventDefinitions/key:{key}</strong>.",
						"required": true,
						"type": "string"
					}
				],
				"x-published": true
			},
			"delete": {
				"tags": [
					"interaction"
				],
				"summary": "deleteEventDefinition",
				"description": "Deletes an individual event definition by ID or key.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "The ID of the event definition expressed in the form of a GUID (UUID). Required if not using a key.",
						"required": true,
						"type": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "The key of the event definition. Required if not using an ID. Prefix the parameter with <strong>key:</strong>. For example, <strong>/eventDefinitions/key:{key}</strong>.",
						"required": true,
						"type": "string"
					}
				],
				"x-published": true
			},
			"put": {
				"tags": [
					"interaction"
				],
				"summary": "updateEventDefinition",
				"description": "Updates an event definition by ID or key. Once an event definition is created, only a few properties can be updated. To call this resource, assign your API Integration the Automation | Interactions | Read scope.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "The ID of the event definition expressed in the form of a GUID (UUID). Required if not using a key.",
						"required": true,
						"type": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "The key of the event definition. Required if not using ID. Prefix the parameter with <strong>key:</strong>. For example, <strong>/eventDefinitions/key:{key}</strong>.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestUpdateEventDefinition"
						}
					}
				],
				"x-published": true
			}
		},
		"/interaction/v1/rest": {
			"get": {
				"tags": [
					"interaction"
				],
				"summary": "rest",
				"description": "Retrieves the discovery document for the collection of journey resources. To call this resource, assign your API Integration the Automation | Interactions | Read scope.",
				"parameters": [],
				"x-md-detail": "restDiscovery.htm",
				"x-published": true
			}
		},
		"/interaction/v1/interactions/{id}": {
			"get": {
				"tags": [
					"interaction"
				],
				"summary": "getInteractionById",
				"description": "Retrieves a single journey by ID or key. To call this resource, assign your API Integration the Automation | Interactions | Read scope.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "ID of version 1 of the journey in the form of a GUID (UUID). Required if not using a key.",
						"required": true,
						"type": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "The key of the journey. Required if not using ID. Prefix the parameter with <strong>key:</strong>. For example, <strong>/interactions/key:{key}</strong>.",
						"required": true,
						"type": "string"
					},
					{
						"name": "versionNumber",
						"in": "query",
						"description": "Version number of the journey to retrieve. If not provided, version 1 is returned.",
						"required": false,
						"type": "number"
					},
					{
						"name": "extras",
						"in": "query",
						"description": "A list of additional data to fetch. Available values are: all, activities, outcomes and stats. Default is ''.",
						"required": false,
						"type": "string"
					}
				],
				"x-md-detail": "getInteractionById.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"interaction"
				],
				"summary": "deleteInteractionById",
				"description": "Deletes a journey by ID or key. When deleting last version of a journey, check if the journey is associated with a tag and unassociated the tag using the <a href=\"deleteTags.htm\">deleteTags</a> resource.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "The ID of the journey to delete expressed in the form of a GUID (UUID). Required if not using a key. The ID deletes all versions of the journey, unless a versionNumber is provided.",
						"required": true,
						"type": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "The key of the journey. Required if not using ID. Prefix the parameter with <strong>key:</strong>. For example, <strong>/interactions/key:{key}</strong>.",
						"required": true,
						"type": "string"
					},
					{
						"name": "versionNumber",
						"in": "query",
						"description": "Version number of the journey to delete. <strong>If no version is specified, ALL versions associated with the provided ID will be deleted.</strong>",
						"required": false,
						"type": "integer"
					}
				],
				"x-md-detail": "deleteInteractionById.htm",
				"x-published": true
			}
		},
		"/interaction/v1/interactions": {
			"get": {
				"tags": [
					"interaction"
				],
				"summary": "getInteractionCollection",
				"description": "Retrieves a collection of all journeys. The journey collection resources are embedded in the <strong>items</strong> property of the response body. Use both a sort order and paging to minimize the response size and response time. To call this resource, assign your API Integration the Automation | Interactions | Read scope.",
				"parameters": [{
						"name": "status",
						"in": "query",
						"description": "A status description upon which to filter journeys. Can be one of: Draft, Published, ScheduledToPublish, Stopped, Unpublished, Deleted. The default value is blank, which returns all statuses. ScheduledToSend, Sent, and Stopped are unique to single-send journeys. A single send journey can be 'Cancelled' via the UI, but the API status for this is 'Stopped.'",
						"required": false,
						"type": "string"
					},
					{
						"name": "versionNumber",
						"in": "query",
						"description": "Version number of the journey to retrieve. The default value is published version or latest available version number which meets other search criteria.",
						"required": false,
						"type": "number"
					},
					{
						"name": "specificApiVersionNumber",
						"in": "query",
						"description": "Version number of the workflowApiVersion upon which to filter journeys. The default value is 1.",
						"required": false,
						"type": "number"
					},
					{
						"name": "mostRecentVersionOnly",
						"in": "query",
						"description": "A flag to indicate whether to fetch only the most recent version of matching journeys. The default value is true.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "definitionType",
						"in": "query",
						"description": "Type of definition to retrieve. Valid values include: transactional (retrieves all transactional send definitions).",
						"required": false,
						"type": "enum"
					},
					{
						"name": "nameOrDescription",
						"in": "query",
						"description": "A search string inside the journey's name or description properties upon which to match for filtering.",
						"required": false,
						"type": "string"
					},
					{
						"name": "extras",
						"in": "query",
						"description": "A list of additional data to fetch. Available values are: all, activities, outcome and stats. The default value is blank, which returns all extras.",
						"required": false,
						"type": "string"
					},
					{
						"name": "$orderBy",
						"in": "query",
						"description": "Specify how to order the journeys. Valid ordering columns are: ModifiedDate (default), Name, Performance. Valid values are: DESC, ASC. The default value is 'ModifiedDate DESC'.",
						"required": false,
						"type": "string"
					},
					{
						"name": "tag",
						"in": "query",
						"description": "Specify a single tag to filter results to only include journeys associated with that tag.",
						"required": false,
						"type": "string"
					},
					{
						"name": "$page",
						"in": "query",
						"description": "The number of pages to retrieve. The default value is 1.",
						"required": false,
						"type": "number"
					},
					{
						"name": "$pageSize",
						"in": "query",
						"description": "The number of results to return on a page. The default and maximum is 50.",
						"required": false,
						"type": "number"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestGetInteractions"
						}
					}
				],
				"x-md-detail": "getInteractionCollection.htm",
				"x-published": true
			},
			"post": {
				"tags": [
					"interaction"
				],
				"summary": "postCreateInteraction",
				"description": "Creates or saves a journey. To create a new journey provide the request body in the appropriate <a href=\"getting-started-spec.htm\">Journey Specification</a>. Please read the Journey Spec page to understand which properties are required to create a journey via the API. The <strong>id</strong>, <strong>key</strong>, <strong>createdDate</strong>, <strong>modifiedDate</strong>, <strong>status</strong> and <strong>definitionId</strong> are assigned by Journey Builder and are never to be passed in as parameters for creating a journey. To call this resource, assign your API Integration the Automation | Interactions | Read scope.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestPostCreateInteraction"
					}
				}],
				"x-md-detail": "postCreateInteraction.htm",
				"x-published": true
			},
			"put": {
				"tags": [
					"interaction"
				],
				"summary": "putUpdateInteraction",
				"description": "Updates a journey version. To call this resource, assign your API Integration the Automation | Interactions | Read scope.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestPutUpdateInteraction"
					}
				}],
				"x-md-detail": "putUpdateInteraction.htm",
				"x-published": true
			}
		},
		"/interaction/v1/interactions/{id}/audit/{action}": {
			"get": {
				"tags": [
					"interaction"
				],
				"summary": "getInteractionAuditLog",
				"description": "Retrieves an audit log of a journey and its versions by ID or key. Pass in different actions to see history about creating, modifying, activating, deactivating, stopping, and deleting a journey.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "The ID or key of the audit log to retrieve. Required if not using a key. The ID returns the audit log for all versions of the journey, unless a versionNumber is provided.",
						"required": true,
						"type": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "The key of the audit log to retrieve. Required if not using ID. Prefix the parameter with <strong>key:</strong>. For example, <strong>/interactions/key:{key}</strong>.",
						"required": true,
						"type": "string"
					},
					{
						"name": "action",
						"in": "query",
						"description": "The actions used to build your audit log. Specify <strong>all</strong> to return all actions. Use one of these possible values: <ul><li>all</li><li>create</li><li>modify</li><li>publish</li><li>unpublish</li><li>delete</li></ul>",
						"required": true,
						"type": "string"
					},
					{
						"name": "versionNumber",
						"in": "query",
						"description": "The version number of the journey audit log to retrieve",
						"required": false,
						"type": "integer"
					}
				],
				"x-md-detail": "getInteractionAuditLog.htm",
				"x-published": true
			}
		},
		"/interaction/v1/": {
			"get": {
				"tags": [
					"interaction"
				],
				"summary": "getWaitStatistics",
				"description": "",
				"parameters": [],
				"x-md-detail": "getWaitStatistics.htm",
				"x-published": false
			},
			"post": {
				"tags": [
					"interaction"
				],
				"summary": "postTraceEvents",
				"description": "",
				"parameters": [],
				"x-md-detail": "postTraceEvents.htm",
				"x-published": false
			}
		},
		"/interaction/v1/interactions/publishAsync/{id}?versionNumber={versionNumber}": {
			"post": {
				"tags": [
					"interaction"
				],
				"summary": "postPublishInteractionById",
				"description": "Publishes a journey version asynchronously. To call this resource, assign your API Integration the Automation | Interactions | Read scope.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "The ID of the journey to publish expressed in the form of a GUID (UUID).",
						"required": true,
						"type": "string"
					},
					{
						"name": "versionNumber",
						"in": "query",
						"description": "Version number of the journey to publish",
						"required": true,
						"type": "integer"
					}
				],
				"x-md-detail": "postPublishInteractionById.htm",
				"x-published": true
			}
		},
		"/interaction/v1/interactions/publishAsync/": {
			"post": {
				"tags": [
					"interaction"
				],
				"summary": "postPublishInteractionByKey",
				"description": "",
				"parameters": [],
				"x-md-detail": "postPublishInteractionByKey.htm",
				"x-published": false
			}
		},
		"/interaction/v1/interactions/publishStatus/{statusId}": {
			"get": {
				"tags": [
					"interaction"
				],
				"summary": "getPublishStatus",
				"description": "Checks the status of a publication.",
				"parameters": [{
					"name": "statusId",
					"in": "query",
					"description": "The statusId provided by a successful POST request to <a href=\"postPublishInteractionById.htm\">schedule</a> for a specific version of a journey.",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "getPublishStatus.htm",
				"x-published": true
			}
		},
		"/interaction/v1/interactions/stop/{id}?versionNumber={versionNumber}": {
			"post": {
				"tags": [
					"interaction"
				],
				"summary": "postStopInteractionById",
				"description": "Stops a running journey. To call this resource, assign your API Integration the Automation | Interactions | Read scope.",
				"parameters": [{
						"name": "id",
						"in": "query",
						"description": "The ID of the journey to stop, expressed in the form of a GUID (UUID).",
						"required": true,
						"type": "string"
					},
					{
						"name": "versionNumber",
						"in": "query",
						"description": "The version number of the journey to stop",
						"required": true,
						"type": "integer"
					}
				],
				"x-md-detail": "postStopInteractionById.htm",
				"x-published": true
			}
		},
		"/interaction/v1/interactions/contactexit": {
			"post": {
				"tags": [
					"interaction"
				],
				"summary": "contactExit",
				"description": "Removes up to 50 contacts from a journey or from one or more versions of a journey.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/ContactExit"
					}
				}],
				"responses": {
					"202": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/ResponseContactExitRequest_202"
						}
					}
				},
				"x-md-detail": "contactExitRequest.htm",
				"x-published": true
			}
		},
		"/interaction/v1/interactions/contactexit/status": {
			"post": {
				"tags": [
					"interaction"
				],
				"summary": "contactExitStatus",
				"description": "Returns the status of a request to remove a contact from a journey or from one or more versions of a journey.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/ContactExit"
					}
				}],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/ResponseContactExitStatus_200"
						}
					}
				},
				"x-md-detail": "contactExitStatus.htm",
				"x-published": true
			}
		},
		"/interaction/v1/interactions/contactMembership": {
				"post": {
						"tags": [
										 "interaction"
										 ],
						"summary": "contactMembership",
						"description": "Provides a list of journeys and journey versions for a list of contact keys.",
						"parameters": [{
													 "in": "body",
													 "name": "body",
													 "description": "JSON parameters",
													 "schema": {
													 "$ref": "#/definitions/ContactMembership"
													 }
													 }],
						"responses": {
								"200": {
										"description": "",
										"schema": {
												"$ref": "#/definitions/ResponseContactMembership_200"
										}
								}
						},
						"x-md-detail": "contactMembershipRequest.htm",
						"x-published": true
				}
		},
		"/interaction/v1/interactions/pause/{definitionID}?versionNumber={versionNumber}": {
			"post": {
				"tags": [
					"interaction"
				],
				"summary": "JourneyPauseByDefinitionId",
				"description": "Pauses the running journey that matches the specified definitionID.",
				"parameters": [{
						"name": "definitionID",
						"in": "query",
						"description": "The ID of the journey to be paused, expressed in the form of a GUID (UUID).",
						"required": true,
						"type": "string"
					},
					{
						"name": "versionNumber",
						"in": "query",
						"description": "The version number of the journey to be paused. This parameter is optional only when the allVersions parameter is true.",
						"required": true,
						"type": "integer"
					},
					{
						"name": "allVersions",
						"in": "query",
						"description": "Indicates whether to pause all versions of the journey. This parameter is required only when you don't provide a versionNumber in the request URL.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPause"
						}
				    }
				],
				"x-md-detail": "JourneyPauseByDefinitionId.htm",
				"x-published": true
			}
		},
		"/interaction/v1/interactions/pause/key:{definitionKey}?versionNumber={versionNumber}": {
			"post": {
				"tags": [
					"interaction"
				],
				"summary": "JourneyPauseByDefinitionKey",
				"description": "Pauses the running journey that matches the specified definitionKey.",
				"parameters": [{
						"name": "definitionKey",
						"in": "query",
						"description": "The definition key of the journey to be paused. Also known as the customer key of the journey.",
						"required": true,
						"type": "string"
					},
					{
						"name": "versionNumber",
						"in": "query",
						"description": "The version number of the journey to be paused. This parameter is optional only when the allVersions parameter is true.",
						"required": true,
						"type": "integer"
					},
					{
						"name": "allVersions",
						"in": "query",
						"description": "Indicates whether to pause all versions of the journey. This parameter is required only when you don't provide a versionNumber in the request URL.",
						"required": false,
						"type": "integer"
					},
					{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPause"
						}
				    }
				],
				"x-md-detail": "JourneyPauseByDefinitionKey.htm",
				"x-published": true
			}
		},
		"/interaction/v1/interactions/resume/{definitionID}?versionNumber={versionNumber}": {
			"post": {
				"tags": [
					"interaction"
				],
				"summary": "JourneyResumeByDefinitionId",
				"description": "Resumes the paused journey that matches the specified definitionID.",
				"parameters": [{
						"name": "definitionID",
						"in": "query",
						"description": "The ID of the journey to be resumed, expressed in the form of a GUID (UUID).",
						"required": true,
						"type": "string"
					},
					{
						"name": "versionNumber",
						"in": "query",
						"description": "The version number of the journey to be resumed. This parameter is optional only when the allVersions parameter is true.",
						"required": true,
						"type": "integer"
					},
					{
						"name": "allVersions",
						"in": "query",
						"description": "Indicates whether to resume all versions of the journey. This parameter is required only when you don't provide a versionNumber in the request URL.",
						"required": false,
						"type": "integer"
					}

				],
				"x-md-detail": "JourneyResumeByDefinitionId.htm",
				"x-published": true
			}
		},
		"/interaction/v1/interactions/resume/key:{definitionKey}?versionNumber={versionNumber}": {
			"post": {
				"tags": [
					"interaction"
				],
				"summary": "JourneyResumeByDefinitionKey",
				"description": "Resumes the paused journey that matches the specified definitionKey.",
				"parameters": [{
						"name": "definitionID",
						"in": "query",
						"description": "The ID of the journey to be resumed, expressed in the form of a GUID (UUID).",
						"required": true,
						"type": "string"
					},
					{
						"name": "versionNumber",
						"in": "query",
						"description": "The version number of the journey to be resumed. This parameter is optional only when the allVersions parameter is true.",
						"required": true,
						"type": "integer"
					},
					{
						"name": "allVersions",
						"in": "query",
						"description": "Indicates whether to resume all versions of the journey. This parameter is required only when you don't provide a versionNumber in the request URL.",
						"required": false,
						"type": "integer"
					}

				],
				"x-md-detail": "JourneyResumeByDefinitionKey.htm",
				"x-published": true
			}
		},
		"/platform/v1/tokenContext": {
			"get": {
				"tags": [
					"platform"
				],
				"summary": "gettokencontext",
				"description": "Returns information about the authenticated token.",
				"parameters": [],
				"x-md-detail": "gettokencontext.htm",
				"x-published": true
			}
		},
		"/platform/v1/endpoints/{endpointType}": {
			"get": {
				"tags": [
					"platform"
				],
				"summary": "getendpoint",
				"description": "Gets endpoint data.",
				"parameters": [{
					"name": "endpointType",
					"in": "query",
					"description": "Value of endpointType. Valid endpoints are ftp, soap, and rest.",
					"required": true,
					"type": "enum"
				}],
				"x-md-detail": "getendpoint.htm",
				"x-published": true
			}
		},
		"/platform/v1/endpoints": {
			"get": {
				"tags": [
					"platform"
				],
				"summary": "getendpoints",
				"description": "Gets endpoint data.",
				"parameters": [],
				"x-md-detail": "getendpoints.htm",
				"x-published": true
			}
		},
		"/platform/v1/ens-callbacks": {
			"post": {
				"tags": [
					"eventNotification"
				],
				"summary": "createCallback",
				"description": "Registers a new callback to receive event notifications. Verify your callback before you can use it in a subscription.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestCreateCallback"
						}
					}
				],
				"x-md-detail": "createCallback.htm",
				"x-published": true
			},
			"put": {
				"tags": [
					"eventNotification"
				],
				"summary": "updateCallback",
				"description": "Updates a registered callback. It can take up to two minutes for callback changes to become active.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestUpdateCallback"
						}
					}
				],
				"x-md-detail": "updateCallback.htm",
				"x-published": true
			},
			"get": {
				"tags": [
					"eventNotification"
				],
				"summary": "getAllCallbacks",
				"description": "Retrieves details about all registered callbacks.",
				"parameters": [],
				"x-md-detail": "getAllCallbacks.htm",
				"x-published": true
			}
		},
		"/platform/v1/ens-verify": {
			"post": {
				"tags": [
					"eventNotification"
				],
				"summary": "verifyCallback",
				"description": "Verifies a callback so that it can receive notifications.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestVerifyCallback"
						}
					}
				],
				"x-md-detail": "verifyCallback.htm",
				"x-published": true
			}
		},
		"/platform/v1/ens-callbacks/{callbackId}": {
			"get": {
				"tags": [
					"eventNotification"
				],
				"summary": "getCallback",
				"description": "Retrieves details about a registered callback.",
				"parameters": [{
					"name": "callbackId",
					"in": "query",
					"description": "Unique identifier of the callback.",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "getCallback.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"eventNotification"
				],
				"summary": "deleteCallback",
				"description": "Deletes a registered callback that isn't used by any subscriptions. Delete all subscriptions for the callback before deleting the callback.",
				"parameters": [{
					"name": "callbackId",
					"in": "query",
					"description": "Unique identifier of the callback.",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "deleteCallback.htm",
				"x-published": true
			}
		},
		"/platform/v1/ens-regenerate": {
			"put": {
				"tags": [
					"eventNotification"
				],
				"summary": "regenerateSignatureKey",
				"description": "Regenerates a signature key for a given callback. Regenerating a signature key deactivates the existing key.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestRegenerateSignatureKey"
					}
				}
				],
				"responses": {
					"200": {
						"description": "New signature key generated. Review example response.",
						"schema": {
							"$ref": "#/definitions/ResponseRegenerateSignatureKey_200"
						}
					}
				},
				"x-md-detail": "regenerateSignatureKey.htm",
				"x-published": true
			}
		},
		"/platform/v1/ens-subscriptions": {
			"post": {
				"tags": [
					"eventNotification"
				],
				"summary": "createSubscription",
				"description": "Creates a single subscription. A subscription indicates which event types to receive notifications for and which callback, or webhook, to receive them on. A new subscription can take up to two minutes to become active. You can create a subscription only for a verified callback and up to 200 subscriptions per callback.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestCreateSubscription"
						}
					}
				],
				"x-md-detail": "createSubscription.htm",
				"x-published": true
			},
			"put": {
				"tags": [
					"eventNotification"
				],
				"summary": "updateSubscription",
				"description": "Updates a single subscription. To pause an active subscription, set the status request parameter to paused. To unpause a paused subscription, set the status request parameter to active. Always supply a status reason in the request when you update the subscription status. Changes made to a subscription can take up to two minutes to become active.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestUpdateSubscription"
						}
					}
				],
				"x-md-detail": "updateSubscription.htm",
				"x-published": true
			}
		},
		"/platform/v1/ens-subscriptions/{subscriptionId}": {
			"delete": {
				"tags": [
					"eventNotification"
				],
				"summary": "deleteSubscription",
				"description": "Deletes a subscription.",
				"parameters": [{
					"name": "subscriptionId",
					"in": "query",
					"description": "Unique identifier for the subscription to delete.",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "deleteSubscription.htm",
				"x-published": true
			},
			"get": {
				"tags": [
					"eventNotification"
				],
				"summary": "getSubscription",
				"description": "Retrieves details for a subscription.",
				"parameters": [{
					"name": "subscriptionId",
					"in": "query",
					"description": "Unique identifier for the subscription.",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "getSubscription.htm",
				"x-published": true
			}
		},
		"/platform/v1/ens-subscriptions-by-cb/{callbackId}": {
			"get": {
				"tags": [
					"eventNotification"
				],
				"summary": "getAllSubscriptionsForCallback",
				"description": "Retrieves details for all subscriptions associated with a callback.",
				"parameters": [{
					"name": "callbackId",
					"in": "query",
					"description": "Unique identifier of the callback.",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "getAllSubscriptionsForCallback.htm",
				"x-published": true
			}
		},
		"/platform/v1/key": {
			"get": {
				"tags": [
					"platform"
				],
				"summary": "getKeys",

				"description": "Retrieves metadata for all keys that belong to a given MID. Data at Rest Encryption is a prerequisite for this feature.",

				"parameters": [
					{
					"name": "x-request-id",
					"in": "query",
					"description": "Header parameter: Request ID for the request. Default Format: 11ee9b17-5734-4948-98d3-cb4b64e0171c",
					"required": false,
					"type": "string"
					},
					{
					"name": "x-mccs-user-context",
					"in": "query",
					"description": "Header parameter: Indicates the MCCS user context. Example: EID=111;MID=111;EmployeeId=111.",
					"required": false,
					"type": "string"
					},
					{
					"name": "x-mccs-keystore-provider",
					"in": "query",
					"description": "Header parameter: Specify a key store provider to use for an ImportKey or WrappingKey request. Examples: kms, keysecure, database. Default: keysecure.",
					"required": false,
					"type": "string"
					},
					{
					"name": "x-mccs-mac",
					"in": "query",
					"description": "Header parameter: Specify message authentication code for the request.",
					"required": false,
					"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successfully retrieved meta data for all keys for the current account",
						"schema": {
							"$ref": "#/definitions/KeyValuePair[String,Int32]"
						  }
					  },
					  "500": {
							"description": "Unable to process the request",
							"schema": {
							"$ref": "#/definitions/KeyErrorResponse"
							}
					  },
					  "503": {
						"description": "Database unavailable",
						"schema": {
						  "$ref": "#/definitions/KeyErrorResponse"
						}
					}
				},
				"x-md-detail": "getKeys.htm",
				"x-published": true
			},
			"post": {
				"tags": [
					"platform"
				],
				"summary": "createOrImportKey",
				"description": "Creates or imports an encryption key for bring your own key (BYOK) for TDE. Data at Rest Encryption is a prerequisite for this feature.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/KeyImport"
						}
					},
					{
						"name": "x-request-id",
						"in": "query",
						"description": "Header parameter: Request ID for the request. Default Format: 52e3ca33-c54a-4bbe-824c-419ff9a46860.",
						"required": false,
						"type": "string"
					},
					{
						"name": "x-mccs-user-context",
						"in": "query",
						"description": "Header parameter: Indicates the MCCS user context. Example: EID=111;MID=111;EmployeeId=111.",
						"required": false,
						"type": "string"
					},
					{
						"name": "x-mccs-keystore-provider",
						"in": "query",
						"description": "Header parameter: Specify a key store provider to use for an ImportKey or WrappingKey request. Examples: kms, keysecure, database. Default: keysecure.",
						"required": false,
						"type": "string"
					},
					{
						"name": "x-mccs-mac",
						"in": "query",
						"description": "Header parameter: Specify the message authentication code for the request.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"201": {
					  "description": "Encryption key is successfully imported",
					  "schema": {
							"$ref": "#/definitions/KeyImport"
					  }
					},
					"400": {
					  "description": "Invalid keystore provider name in the request header",
					  "schema": {
							"$ref": "#/definitions/KeyProblemDetails"
					  }
					},
					"503": {
					  "description": "System is unavailable to process request",
					  "schema": {
							"$ref": "#/definitions/KeyErrorResponse"
					  }
					},
					"500": {
					  "description": "Unable to process request",
					  "schema": {
							"$ref": "#/definitions/KeyErrorResponse"
					  }
					}
				},
				"x-md-detail": "createOrImportKey.htm",
				"x-published": true
			}
		},
		"/platform/v1/key/type": {
			"get": {
				"tags": [
					"platform"
				],
				"summary": "getKeyTypes",

				"description": "Retrieves supported key algorithms and appropriate key lengths. Data at Rest Encryption is a prerequisite for this feature.",

				"parameters": [
					{
					"name": "x-request-id",
					"in": "query",
					"description": "Header parameter: Request ID for the request. Default Format: d0b531e1-9e61-43e4-bf1b-4b8dc49a16c2",
					"required": false,
					"type": "string"
					},
					{
					"name": "x-mccs-user-context",
					"in": "query",
					"description": "Header parameter: Indicates the MCCS user context. Example: EID=111;MID=111;EmployeeId=111.",
					"required": false,
					"type": "string"
					},
					{
					"name": "x-mccs-keystore-provider",
					"in": "query",
					"description": "Header parameter: Specify a key store provider to use for an ImportKey or WrappingKey request. Examples: kms, keysecure, database. Default: keysecure.",
					"required": false,
					"type": "string"
					},
					{
					"name": "x-mccs-mac",
					"in": "query",
					"description": "Header parameter: Specify the message authentication code for the request.",
					"required": false,
					"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successfully retrieved LOVs",
						"schema": {
						  "$ref": "#/definitions/KeyValuePair[String,Int32]"
						}
					  },
					"500": {
						"description": "Unable to process request",
						"schema": {
							"$ref": "#/definitions/KeyErrorResponse"
						}
					}
				},
				"x-md-detail": "getKeyTypes.htm",
				"x-published": true
			}
		},
		"/platform/v1/wrappingKey": {
			"get": {
				"tags": [
					"platform"
				],
				"summary": "getWrappingKey",

				"description": "Retrieve and create, if necessary, the wrapping key - RSA 4096. Data at Rest Encryption is a prerequisite for this feature.",

				"parameters": [
					{
					  "name": "x-request-id",
					  "in": "query",
					  "description": "Header parameter: Request ID for the request. Default Format: c39516e2-55e0-426d-8717-b2efed6d9841.",
					  "required": false,
					  "type": "string"
					},
					{
					  "name": "x-mccs-user-context",
					  "in": "query",
					  "description": "Header parameter: Indicates the MCCS user context. Example: EID=111;MID=111;EmployeeId=111.",
					  "required": false,
					  "type": "string"
					},
					{
					  "name": "x-mccs-keystore-provider",
					  "in": "query",
					  "description": "Header parameter: Specify a key store provider to use for an ImportKey or WrappingKey request. Examples: kms, keysecure, database. Default: keysecure.",
					  "required": false,
					  "type": "string"
					},
					{
					  "name": "x-mccs-mac",
					  "in": "query",
					  "description": "Header parameter: Specify the message authentication code for the request.",
					  "required": false,
					  "type": "string"
					}
				],

				"responses": {
					"200": {
					  "description": "Successfully retrieved public wrapping key bytes",
						"schema": {
							"$ref": "#/definitions/KeyResponseString"
						}
					},
					"400": {
					  "description": "Invalid keystore provider name in the request header",
					  "schema": {
							"$ref": "#/definitions/KeyProblemDetails"
					  }
					},
					"500": {
					  "description": "Unable to process request",
					  "schema": {
							"$ref": "#/definitions/KeyErrorResponse"
					  }
					}
				},
				"x-md-detail": "getWrappingKey.htm",
				"x-published": true
			}
		},
		"/platform/v1/key/{keyId}": {
			"get": {
				"tags": [
					"platform"
				],
				"summary": "getKeyById",
				"description": "Fetches metadata for a specific key. Data at Rest Encryption is a prerequisite for this feature.",
				"parameters": [
					{
					"name": "keyId",
					"in": "query",
					"description": "ID for the key to retrieve the metadata for.",
					"required": true,
					"type": "string"
					},
					{
					"name": "x-request-id",
					"in": "query",
					"description": "Header parameter: Request ID for the request. Default Format: 06ef8c36-4a7a-4139-bdbd-c6715be06364.",
					"required": false,
					"type": "string"
					},
					{
					"name": "x-mccs-user-context",
					"in": "query",
					"description": "Header parameter: Indicates the MCCS user context. Example: EID=111;MID=111;EmployeeId=111.",
					"required": false,
					"type": "string"
					},
					{
					"name": "x-mccs-keystore-provider",
					"in": "query",
					"description": "Header parameter: Specify a key store provider to use for an ImportKey or WrappingKey request. Examples: kms, keysecure, database. Default: keysecure.",
					"required": false,
					"type": "string"
					},
					{
					"name": "x-mccs-mac",
					"in": "query",
					"description": "Header parameter: Specify the message authentication code for the request.",
					"required": false,
					"type": "string"
					}
				],
				"responses": {
					"200": {
					  "description": "Key metadata successfully retrieved",
					  "schema": {
							"$ref": "#/definitions/KeyMetadata"
					  }
					},
					"400": {
					  "description": "Bad request, please see error details",
						"schema": {
							"$ref": "#/definitions/KeyResponseString"
						}
					},
					"404": {
					  "description": "Given Key Id is not found in metadata table (MemberKeyManagement)",
						"schema": {
							"$ref": "#/definitions/KeyResponseString"
						}
					},
					"500": {
					  "description": "Server error, unable to retrieve key metadata. Validate error logs in splunk",
						"schema": {
							"$ref": "#/definitions/KeyResponseString"
						}
					}
				},
				"x-md-detail": "getKeyById.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"platform"
				],
				"summary": "deleteKeyByKeyId",
				"description": "Deletes a key based on the keyId for the current MID. Data at Rest Encryption is a prerequisite for this feature.",
				"parameters": [
					{
					  "name": "keyId",
					  "in": "query",
					  "description": "ID of the key. Format: UUID.",
					  "required": true,
					  "type": "string"
					},
					{
					  "name": "x-request-id",
					  "in": "query",
					  "description": "Header parameter: Request ID for the request. Default Format: 4586c4c7-8504-4cf4-942d-19f99a57c4d9.",
					  "required": false,
					  "type": "string"
					},
					{
					  "name": "x-mccs-user-context",
					  "in": "query",
					  "description": "Header parameter: Indicates the MCCS user context. Example: EID=111;MID=111;EmployeeId=111.",
					  "required": false,
					  "type": "string"
					},
					{
					  "name": "x-mccs-keystore-provider",
					  "in": "query",
					  "description": "Header parameter: Specify a key store provider to use for an ImportKey or WrappingKey request. Examples: kms, keysecure, database. Default: keysecure.",
					  "required": false,
					  "type": "string"
					},
					{
					  "name": "x-mccs-mac",
					  "in": "query",
					  "description": "Header parameter: Specify the message authentication code for the request.",
					  "required": false,
					  "type": "string"
					}
				],
				"responses": {
					"204": {
					  "description": "Successfully soft deleted meta data and hard deleted key from keystore",
						"schema": {
							"$ref": "#/definitions/KeyResponseString"
						}
					},
					"500": {
					  "description": "Unable to process request",
					  "schema": {
							"$ref": "#/definitions/KeyErrorResponse"
					  }
					},
					"404": {
					  "description": "Key not found",
					  "schema": {
							"$ref": "#/definitions/KeyProblemDetails"
					  }
					},
					"400": {
					  "description": "Tde keys used by encrypted backups cannot be deleted, must wait 90 days from rotate or restore",
					  "schema": {
							"$ref": "#/definitions/KeyProblemDetails"
					  }
					}
				},
				"x-md-detail": "deleteKeyByKeyId.htm",
				"x-published": true
			}
		},
		"/push/v1/location": {
			"get": {
				"tags": [
					"push"
				],
				"summary": "getLocations",
				"description": "Gets a list of all locations.",
				"parameters": [
					{
					"name": "$page",
					"in": "query",
					"description": "Page number to return from the paged results. Start with 1 and continue until you get zero results. Typically provided along with the $pagesize parameter.",
					"required": false,
					"type": "number"
					},
					{
					"name": "$pagesize",
					"in": "query",
					"description": "Number of results per page to return. Typically provided along with the $page parameter.",
					"required": false,
					"type": "number"
					},
					{
					"name": "$filter",
					"in": "query",
					"description": "Filter by a location's property using a simple operator and value. Valid filter properties are Name and LocationType of 1 = Geofence or 3 = Beacon.",
					"required": false,
					"type": "string"
					},
					{
					"name": "$orderBy",
					"in": "query",
					"description": "Determines which property to use for sorting, and also determines the direction in which to sort the data.",
					"required": false,
					"type": "string"
					}
				],
				"x-md-detail": "getLocations.htm",
				"x-published": true
			},
			"post": {
				"tags": [
					"push"
				],
				"summary": "createLocation",
				"description": "Creates a new location.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestCreateLocation"
					}
				}],
				"x-md-detail": "createLocation.htm",
				"x-published": true
			}
		},
		"/push/v1/location/{locationId}": {
			"get": {
				"tags": [
					"push"
				],
				"summary": "getSpecificLocation",
				"description": "Gets a specific location.",
				"parameters": [{
					"name": "locationId",
					"in": "query",
					"description": "ID of the location",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "getSpecificLocation.htm",
				"x-published": true
			},
			"put": {
				"tags": [
					"push"
				],
				"summary": "updateLocation",
				"description": "Updates an existing location.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestUpdateLocation"
						}
					},
					{
						"name": "locationId",
						"in": "query",
						"description": "ID of the location to update",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "updateLocation.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"push"
				],
				"summary": "deleteLocation",
				"description": "Deletes an existing location.",
				"parameters": [{
					"name": "locationId",
					"in": "query",
					"description": "ID of the location to delete",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "deleteLocation.htm",
				"x-published": true
			}
		},
		"/push/v1/messageApp/{messageId}/send": {
			"post": {
				"tags": [
					"push"
				],
				"summary": "postMessageAppSend",
				"description": "Broadcasts a message to all users of a push-enabled app.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPostMessageAppSend"
						}
					},
					{
						"name": "messageID",
						"in": "query",
						"description": "The ID of the triggered send definition configured for MessageSend sending used for the send",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "postMessageAppSend.htm",
				"x-published": true
			}
		},
		"/push/v1/messageList/{messageId}/send": {
			"post": {
				"tags": [
					"push"
				],
				"summary": "postMessageListSend",
				"description": "Sends a message to the specified mobile devices of a push-enabled app.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPostMessageListSend"
						}
					},
					{
						"name": "messageId",
						"in": "query",
						"description": "The API key of the message definition (configured in the MobilePush user interface)",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "postMessageListSend.htm",
				"x-published": true
			}
		},
		"/push/v1/messageTag/{messageId}/deliveries/{tokenId}": {
			"get": {
				"tags": [
					"push"
				],
				"summary": "getMessageTagDeliveries",
				"description": "Retrieves delivery status of a previous messageTag send job.",
				"parameters": [{
						"name": "messageID",
						"in": "query",
						"description": "The API key of the message definition. This key is configured in the MobilePush user interface.",
						"required": true,
						"type": "string"
					},
					{
						"name": "tokenID",
						"in": "query",
						"description": "The value returned following the send of a push message",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "getMessageTagDeliveries.htm",
				"x-published": true
			}
		},
		"/push/v1/messageApp/{messageId}/deliveries/{tokenId}": {
			"get": {
				"tags": [
					"push"
				],
				"summary": "getMessageAppDeliveries",
				"description": "Retrieves delivery status of a previous messageApp send job.",
				"parameters": [{
						"name": "messageID",
						"in": "query",
						"description": "The API key of the message definition. The key is configured in the MobilePush user interface.",
						"required": true,
						"type": "string"
					},
					{
						"name": "tokenID",
						"in": "query",
						"description": "The value returned following the send of a push message",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "getMessageAppDeliveries.htm",
				"x-published": true
			}
		},
		"/push/v1/messageTag/{messageId}/send": {
			"post": {
				"tags": [
					"push"
				],
				"summary": "postMessageTagSend",
				"description": "Sends a push message to users with the specified tags.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPostMessageTagSend"
						}
					},
					{
						"name": "messageID",
						"in": "query",
						"description": "The ID of the triggered send definition configured for MessageSend sending used for the send",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "postMessageTagSend.htm",
				"x-published": true
			}
		},
		"/push/v1/contacts/refreshList/{id}": {
			"post": {
				"tags": [
					"push"
				],
				"summary": "postRefreshPushAudience",
				"description": "Refreshes a list.",
				"parameters": [{
					"name": "listId",
					"in": "query",
					"description": "The Id of the list to refresh",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "postRefreshAudience.htm",
				"x-published": true
			}
		},
		"/push/v1/messageContact/{messageId}/deliveries/{tokenId}": {
			"get": {
				"tags": [
					"push"
				],
				"summary": "getMessageContactDeliveries",
				"description": "Retrieves delivery status of a previous messageContact send job.",
				"parameters": [{
						"name": "messageId",
						"in": "query",
						"description": "Message Id provided for the messageContact",
						"required": true,
						"type": "string"
					},
					{
						"name": "tokenId",
						"in": "query",
						"description": "Token Id returned for the messageContact in the form of a GUID",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "getMessageContactDeliveries.htm",
				"x-published": true
			}
		},
		"/push/v1/contacts/refreshList/{id}/status/{tokenId}": {
			"get": {
				"tags": [
					"push"
				],
				"summary": "getRefreshPushAudience",
				"description": "Gets the refresh list status.",
				"parameters": [{
						"name": "ListID",
						"in": "query",
						"description": "The ID of the list in MobileConnect",
						"required": true,
						"type": "string"
					},
					{
						"name": "TokenID",
						"in": "query",
						"description": "The unique ID returned when using the RefreshList operation",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "getRefreshAudience.htm",
				"x-published": true
			}
		},
		"/push/v1/messageContact/{messageId}/send": {
			"post": {
				"tags": [
					"push"
				],
				"summary": "postMessageContactSendPush",
				"description": "Sends a message to the specified mobile devices of a push-enabled app.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPostMessageContactSendPush"
						}
					},
					{
						"name": "messageID",
						"in": "query",
						"description": "The ID of the triggered send definition configured for MessageSend sending used for the send",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "postMessageContactSendPush.htm",
				"x-published": true
			}
		},
		"/push/v1/messageList/{messageId}/deliveries/{tokenId}": {
			"get": {
				"tags": [
					"push"
				],
				"summary": "getMessageListDeliveries",
				"description": "When you send a push message from the API, you receive a token ID in response. Use the token in this API call to retrieve the number of contacts we attempted to send to, not including those who opted out, for a messageList send job.",
				"parameters": [{
						"name": "messageID",
						"in": "query",
						"description": "The API key of the message definition. The key is configured in the MobilePush user interface.",
						"required": true,
						"type": "string"
					},
					{
						"name": "tokenID",
						"in": "query",
						"description": "The value returned following the send of a push message.",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "getMessageListDeliveries.htm",
				"x-published": true
			}
		},
		"/push/v1/messageBatch/{messageid}/send": {
			"post": {
				"tags": [
					"push"
				],
				"summary": "postMessageBatch",
				"description": "Sends unique messages to devices within the same API call. Each batch can include a maximum of 5000 subscriber key or device token values, depending on which value the call uses.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPostMessageBatch"
						}
					},
					{
						"name": "messageID",
						"in": "query",
						"description": "The ID of the message to update",
						"type": "string"
					}
				],
				"x-md-detail": "postMessageBatch.htm",
				"x-published": true
			}
		},
		"/push/v1/message": {
			"post": {
				"tags": [
					"push"
				],
				"summary": "createPushMessage",
				"description": "Creates a push message template for sending to a list of subscribers or an audience inclusion list or data extension. You can personalize each message for each subscriber using personalization strings or AMPscript lookups from a data extension within a single push message definition. You can also pass the text of the message to override the message contents specified in the definition for API-driven personalization.",
				"parameters": [
					{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestCreatePushMessage"
					}
				}
				],
				"x-md-detail": "createPushMessage.htm",
				"x-published": true
			},
			"get": {
				"tags": [
					"push"
				],
				"summary": "retrieveAllPushMessages",
				"description": "Retrieves all messages currently defined within an account.",
				"parameters": [
					{
					"name": "$page",
					"in": "query",
					"description": "Page number to return from the paged results. Start with 1 and continue until you get zero results. Typically provided along with the $pagesize parameter.",
					"required": false,
					"type": "number"
					},
					{
					"name": "$pagesize",
					"in": "query",
					"description": "Number of results per page to return. Typically provided along with the $page parameter.",
					"required": false,
					"type": "number"
					},
					{
					"name": "$filter",
					"in": "query",
					"description": "Filter by a message's property using a simple operator and value. Valid filter properties are Message Type, Content Type, and Status.",
					"required": false,
					"type": "string"
					},
					{
					"name": "$orderBy",
					"in": "query",
					"description": "Determines which property to use for sorting, and also determines the direction in which to sort the data.",
					"required": false,
					"type": "string"
					}],
				"x-md-detail": "retrieveAllPushMessages.htm",
				"x-published": true
			}
		},
		"/push/v1/message/{messageID}": {
			"get": {
				"tags": [
					"push"
				],
				"summary": "retrieveSinglePushMessage",
				"description": "Retrieves a single message currently defined within an account.",
				"parameters": [{
					"name": "messageId",
					"in": "query",
					"description": "Id of the message to delete",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "retrieveSinglePushMessage.htm",
				"x-published": true
			}
		},
		"/push/v1/message/{messageId}": {
			"put": {
				"tags": [
					"push"
				],
				"summary": "updatePushMessage",
				"description": "Updates a push message. That request optionally allows you to pass the text of the message to override the message specified in the definition.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestUpdatePushMessage"
					}
				}],
				"x-md-detail": "updatePushMessage.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"push"
				],
				"summary": "deletePushMessage",
				"description": "Deletes an existing message",
				"parameters": [{
					"name": "messageId",
					"in": "query",
					"description": "Id of the message to delete",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "deletePushMessage.htm",
				"x-published": true
			}
		},
		"/push/v1/application/{appId}/key": {
			"get": {
				"tags": [
					"push"
				],
				"summary": "retrieveAllCustomKeyValues",
				"description": "Retrieves all custom key values associated with an app.",
				"parameters": [{
					"name": "appId",
					"in": "query",
					"description": "String value identifying the app",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "retrieveAllCustomKeyValues.htm",
				"x-published": true
			},
			"put": {
				"tags": [
					"push"
				],
				"summary": "updateAllCustomKeyValues",
				"description": "Updates information on all custom key values associated with an app.",
				"parameters": [{
					"name": "appId",
					"in": "query",
					"description": "String value identifying the app",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "updateAllCustomKeyValues.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"push"
				],
				"summary": "deleteAllCustomKeyValues",
				"description": "Deletes all custom key values associated with an app.",
				"parameters": [{
					"name": "appId",
					"in": "query",
					"description": "String value identifying the app",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "deleteAllCustomKeyValues.htm",
				"x-published": true
			}
		},
		"/push/v1/application/{appId}": {
			"get": {
				"tags": [
					"push"
				],
				"summary": "retrieveAppInformation",
				"description": "Retrieves a single app associated with an account.",
				"parameters": [{
					"name": "appId",
					"in": "query",
					"description": "String value identifying the app",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "retrieveAppInformation.htm",
				"x-published": true
			}
		},
		"/push/v1/application/{appId}/key/{key}": {
			"put": {
				"tags": [
					"push"
				],
				"summary": "updateSpecificCustomKeyValue",
				"description": "Updates information on a single custom key value associated with an app.",
				"parameters": [{
						"name": "appId",
						"in": "query",
						"description": "String value identifying the app",
						"required": true,
						"type": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "String value identifying the key (must be less than or equal to 15 characters)",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "updateSpecificCustomKeyValue.htm",
				"x-published": true
			},
			"delete": {
				"tags": [
					"push"
				],
				"summary": "deleteSpecificCustomKeyValue",
				"description": "Deletes a single custom key value associated with an app.",
				"parameters": [{
						"name": "appId",
						"in": "query",
						"description": "String value identifying the app",
						"required": true,
						"type": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "String value identifying the key. The string must be less than or equal to 15 characters.",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "deleteSpecificCustomKeyValue.htm",
				"x-published": true
			}
		},
		"/data/v1/integration/send/{integrationType}/{channel}": {
			"post": {
				"tags": [
					"sends"
				],
				"summary": "createDefinition",
				"description": "Creates a new definition. A new send definition is required any time a new combination of email, send classification and audience is desired for a planned send.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestCreateDefinition"
						}
					},
					{
						"name": "integrationType",
						"in": "query",
						"description": "Type of integration to use. The only API-supported integration type at this time is salesforce.",
						"required": true,
						"type": "string"
					},
					{
						"name": "channel",
						"in": "query",
						"description": "The channel for this definition. The only API-supported channel at this time is email.",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "createDefinition.htm",
				"x-published": false
			}
		},
		"/data/v1/integration/send/{integrationType}/{channel}/search": {
			"post": {
				"tags": [
					"sends"
				],
				"summary": "searchDefinitions",
				"description": "Searches for existing definitions by name and/or a subscriber list Id. ",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestSearchDefinitions"
						}
					},
					{
						"name": "integrationType",
						"in": "query",
						"description": "Type of integration to use. The only API-supported integration type at this time is salesforce.",
						"required": true,
						"type": "string"
					},
					{
						"name": "channel",
						"in": "query",
						"description": "The channel for this definition. The only API-supported channel at this time is email.",
						"required": true,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page number to fetch.",
						"required": false,
						"type": "integer"
					},
					{
						"name": "pageSize",
						"in": "query",
						"description": "Page size of the record set.",
						"required": false,
						"type": "integer"
					}
				],
				"x-md-detail": "searchDefinitions.htm",
				"x-published": false
			}
		},
		"/data/v1/integration/send/{integrationType}/{channel}/{definitionId}": {
			"get": {
				"tags": [
					"sends"
				],
				"summary": "getDefinitionById",
				"description": "Retrieves all the information about an existing definition. This resource fails if the definition has any scheduled or running sends.",
				"parameters": [{
						"name": "integrationType",
						"in": "query",
						"description": "Type of integration to use. The only API-supported integration type at this time is salesforce.",
						"required": true,
						"type": "string"
					},
					{
						"name": "channel",
						"in": "query",
						"description": "The channel for this definition. The only API-supported channel at this time is email.",
						"required": true,
						"type": "string"
					},
					{
						"name": "definitionId",
						"in": "query",
						"description": "Id of the send definition to be retrieved.",
						"required": true,
						"type": "number"
					}
				],
				"x-md-detail": "getDefinitionById.htm",
				"x-published": false
			},
			"put": {
				"tags": [
					"sends"
				],
				"summary": "updateDefinitionById",
				"description": "Updates an existing send definition. This will affect any previously scheduled sends that are set to start in the future.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestUpdateDefinitionById"
						}
					},
					{
						"name": "integrationType",
						"in": "query",
						"description": "Type of integration to use. The only API-supported integration type at this time is salesforce.",
						"required": true,
						"type": "string"
					},
					{
						"name": "channel",
						"in": "query",
						"description": "The channel for this definition. The only API-supported channel at this time is email.",
						"required": true,
						"type": "string"
					},
					{
						"name": "definitionId",
						"in": "query",
						"description": "Id of the send definition to be updated.",
						"required": true,
						"type": "number"
					}
				],
				"x-md-detail": "updateDefinitionById.htm",
				"x-published": false
			},
			"delete": {
				"tags": [
					"sends"
				],
				"summary": "deleteDefinitionById",
				"description": "Deletes an existing definition. This call will fail if there are any scheduled or running sends related to this definition.",
				"parameters": [{
						"name": "integrationType",
						"in": "query",
						"description": "Type of integration to use. The only API-supported integration type at this time is salesforce.",
						"required": true,
						"type": "string"
					},
					{
						"name": "channel",
						"in": "query",
						"description": "The channel for this definition. The only API-supported channel at this time is email.",
						"required": true,
						"type": "string"
					},
					{
						"name": "definitionId",
						"in": "query",
						"description": "Id of the send definition to be deleted.",
						"required": true,
						"type": "number"
					}
				],
				"x-md-detail": "deleteDefinitionById.htm",
				"x-published": false
			}
		},
		"/data/v1/integration/send/{integrationType}/{channel}/{definitionId}/schedule": {
			"post": {
				"tags": [
					"sends"
				],
				"summary": "scheduleSend",
				"description": "Schedules an integrated send using the given definition.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestScheduleSend"
						}
					},
					{
						"name": "integrationType",
						"in": "query",
						"description": "Type of integration to use. The only API-supported integration type at this time is salesforce.",
						"required": true,
						"type": "string"
					},
					{
						"name": "channel",
						"in": "query",
						"description": "The channel for this definition. The only API-supported channel at this time is email.",
						"required": true,
						"type": "string"
					},
					{
						"name": "definitionId",
						"in": "query",
						"description": "Id of the send definition to be scheduled.",
						"required": true,
						"type": "number"
					}
				],
				"x-md-detail": "scheduleSend.htm",
				"x-published": false
			}
		},
		"/data/v1/integration/send/{integrationType}/{channel}/instance/{instanceId}": {
			"get": {
				"tags": [
					"sends"
				],
				"summary": "getInstanceStatus",
				"description": "Retrieves the status of the specified send. The response includes any relevant data to the specific send type. If the send has an associated subscribers sync or job process, the response will include the SyncId or JobId.",
				"parameters": [{
						"name": "integrationType",
						"in": "query",
						"description": "Type of integration to use. The only API-supported integration type at this time is salesforce.",
						"required": true,
						"type": "string"
					},
					{
						"name": "channel",
						"in": "query",
						"description": "The channel for this definition. The only API-supported channel at this time is email.",
						"required": true,
						"type": "string"
					},
					{
						"name": "definitionId",
						"in": "query",
						"description": "Id of the send definition to be retrieved.",
						"required": true,
						"type": "number"
					}
				],
				"x-md-detail": "getInstanceStatus.htm",
				"x-published": false
			}
		},
		"/data/v1/integration/send/{integrationType}/{channel}/instance/{instanceId}/cancel": {
			"get": {
				"tags": [
					"sends"
				],
				"summary": "cancelInstance",
				"description": "Attempts to cancel an existing instance. An instance of a send can only be canceled up to a certain point, usually up to the point of the actual sending. Verify the cancel succeeded by calling Get Instance Status after this call.",
				"parameters": [{
						"name": "integrationType",
						"in": "query",
						"description": "Type of integration to use. The only API-supported integration type at this time is salesforce.",
						"required": true,
						"type": "string"
					},
					{
						"name": "channel",
						"in": "query",
						"description": "The channel for this definition. The only API-supported channel at this time is email.",
						"required": true,
						"type": "string"
					},
					{
						"name": "definitionId",
						"in": "query",
						"description": "Id of the send definition to be canceled.",
						"required": true,
						"type": "number"
					}
				],
				"x-md-detail": "cancelInstance.htm",
				"x-published": true
			}
		},
		"/data/v1/integration/send/{integrationType}/{channel}/instance": {
			"get": {
				"tags": [
					"sends"
				],
				"summary": "getInstances",
				"description": "Retrieves all instances, ordered by created date, newest to oldest.",
				"parameters": [{
						"name": "integrationType",
						"in": "query",
						"description": "Type of integration to use. The only API-supported integration type at this time is salesforce.",
						"required": true,
						"type": "string"
					},
					{
						"name": "channel",
						"in": "query",
						"description": "The channel for this definition. The only API-supported channel at this time is email.",
						"required": true,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page number to fetch.",
						"required": false,
						"type": "integer"
					},
					{
						"name": "pageSize",
						"in": "query",
						"description": "Page size of the record set.",
						"required": false,
						"type": "integer"
					}
				],
				"x-md-detail": "getInstances.htm",
				"x-published": false
			}
		},
		"/data/v1/integration/send/{integrationType}/{channel}/{definitionId}/instance": {
			"get": {
				"tags": [
					"sends"
				],
				"summary": "getInstancesByDefinition",
				"description": "Retrieves all instances related to a specific definition, ordered by created date, newest to oldest.",
				"parameters": [{
						"name": "integrationType",
						"in": "query",
						"description": "Type of integration to use. The only API-supported integration type at this time is salesforce.",
						"required": true,
						"type": "string"
					},
					{
						"name": "channel",
						"in": "query",
						"description": "The channel for this definition. The only API-supported channel at this time is email.",
						"required": true,
						"type": "string"
					},
					{
						"name": "definitionId",
						"in": "query",
						"description": "Id of the related send definition.",
						"required": true,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page number to fetch.",
						"required": false,
						"type": "integer"
					},
					{
						"name": "pageSize",
						"in": "query",
						"description": "Page size of the record set.",
						"required": false,
						"type": "integer"
					}
				],
				"x-md-detail": "getInstancesByDefinition.htm",
				"x-published": false
			}
		},
		"/sms/v1/messageContact/{messageId}/history/{tokenId}/mobileNumber/{mobileNumber}": {
			"get": {
				"tags": [
					"sms"
				],
				"summary": "getMessageContactHistory",
				"description": "Retrieves the last message sent to a mobile number.",
				"parameters": [{
						"name": "messageId",
						"in": "query",
						"description": "Message Id provided for the messageContact",
						"required": true,
						"type": "string"
					},
					{
						"name": "tokenId",
						"in": "query",
						"description": "Token Id returned for the messageContact",
						"required": true,
						"type": "string"
					},
					{
						"name": "mobileNumber",
						"in": "query",
						"description": "Mobile number for the messageContact",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "getMessageContactHistory.htm",
				"x-published": true
			}
		},
		"/sms/v1/contacts/refreshList/{id}/status/{tokenId}": {
			"get": {
				"tags": [
					"sms"
				],
				"summary": "getRefreshSMSAudience",
				"description": "Retrieves the refresh list status.",
				"parameters": [{
						"name": "ListID",
						"in": "query",
						"description": "The ID of the list found in the MobileConnect interface",
						"required": true,
						"type": "string"
					},
					{
						"name": "TokenID",
						"in": "query",
						"description": "The unique ID returned when using the RefreshList operation",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "getRefreshSMSAudience.htm",
				"x-published": true
			}
		},
		"/sms/v1/queueMO/history/{tokenId}": {
			"get": {
				"tags": [
					"sms"
				],
				"summary": "getQueueMOHistory",
				"description": "Retrieves the tracking history of a queued MO.",
				"parameters": [{
					"name": "tokenId",
					"in": "query",
					"description": "Token Id returned for the queued MO",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "getQueueMOHistory.htm",
				"x-published": true
			}
		},
		"/sms/v1/messageContact/{messageId}/deliveries/{tokenId}": {
			"get": {
				"tags": [
					"sms"
				],
				"summary": "getMessageContactDelivery",
				"description": "Retrieves the overall delivery status of a message to a contact and the standard SMS status codes and descriptions. Standard SMS status codes are universal regardless of where messages are sent. This API returns status codes in the order received from carriers, so Marketing Cloud can receive codes after the delivered or undelivered status has been returned. Infer the final message status from the status code with the highest numerical value.",
				"parameters": [{
						"name": "messageId",
						"in": "query",
						"description": "Message Id provided for the messageContact",
						"required": true,
						"type": "string"
					},
					{
						"name": "tokenId",
						"in": "query",
						"description": "Token Id returned for the messageContact",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "getMessageContactDelivery.htm",
				"x-published": true
			}
		},
		"/sms/v1/messageList/{id}/deliveries/{tokenId}": {
			"get": {
				"tags": [
					"sms"
				],
				"summary": "getMessageList",
				"description": "Returns status for a message sent to a group of mobile numbers.",
				"parameters": [{
						"name": "messageId",
						"in": "query",
						"description": "Message Id provided for the messageList",
						"required": false,
						"type": "string"
					},
					{
						"name": "tokenId",
						"in": "query",
						"description": "Token Id returned for the messageList",
						"required": false,
						"type": "string"
					}
				],
				"x-md-detail": "getMessageList.htm",
				"x-published": true
			}
		},
		"/sms/v1/queueMO/deliveries/{tokenId}": {
			"get": {
				"tags": [
					"sms"
				],
				"summary": "getQueueMODelivery",
				"description": "Retrieves the delivery status of a queued MO.",
				"parameters": [{
					"name": "tokenId",
					"in": "query",
					"description": "Token Id returned for the queued MO",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "getQueueMODelivery.htm",
				"x-published": true
			}
		},
		"/sms/v1/contacts/queueImport/{id}/status/{tokenId}": {
			"get": {
				"tags": [
					"sms"
				],
				"summary": "getContactImportStatus",
				"description": "Retrieves the status of an import job.",
				"parameters": [{
						"name": "ListID",
						"in": "query",
						"description": "The ID of the List found in the MobileConnect interface",
						"required": true,
						"type": "string"
					},
					{
						"name": "TokenID",
						"in": "query",
						"description": "The unique ID returned when using the ImportQueue operation",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "getContactImportStatus.htm",
				"x-published": true
			}
		},
		"/sms/v1/automation/importSend": {
			"post": {
				"tags": [
					"sms"
				],
				"summary": "importSend",
				"description": "Imports and sends.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestImportSend"
					}
				}],
				"x-md-detail": "importSend.htm",
				"x-published": true
			}
		},
		"/sms/v1/automation/importSend/{tokenid}/status": {
			"get": {
				"tags": [
					"sms"
				],
				"summary": "importSendStatus",
				"description": "Retrieves the status of a ImportSend automation.",
				"parameters": [{
					"name": "tokenID",
					"in": "query",
					"description": "The ID provided in the ImportSend REST response.",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "importSendStatus.htm",
				"x-published": true
			}
		},
		"/sms/v1/contacts/refreshList/{id}": {
			"post": {
				"tags": [
					"sms"
				],
				"summary": "postRefreshSMSAudience",
				"description": "Refreshes a list.",
				"parameters": [{
					"name": "listId",
					"in": "query",
					"description": "The Id of the list to refresh",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "postRefreshSMSAudience.htm",
				"x-published": true
			}
		},
		"/sms/v1/messageList/{id}/send": {
			"post": {
				"tags": [
					"sms"
				],
				"summary": "postMessageList",
				"description": "Initiates a message to one or more contact lists.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPostMessageList"
						}
					},
					{
						"name": "messageId",
						"in": "query",
						"description": "The encodedID can be found when creating a “API Entry Event” type Outbound message in the UI. If you have already passed that point you can find the ID by looking at the API resource behind the scenes when you open that message in the UI.",
						"required": false,
						"type": "string"
					}
				],
				"x-md-detail": "postMessageList.htm",
				"x-published": true
			}
		},
		"/sms/v1/messageContact/{id}/send": {
			"post": {
				"tags": [
					"sms"
				],
				"summary": "postMessageContactSend",
				"description": "Initiates a message to one or more mobile numbers.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestPostMessageContactSend"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The encoded message ID",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "postMessageContactSend.htm",
				"x-published": true
			}
		},
		"/sms/v1/queueMO": {
			"post": {
				"tags": [
					"sms"
				],
				"summary": "postQueueMO",
				"description": "Queues an MO message for send.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestPostQueueMO"
					}
				}],
				"x-md-detail": "postQueueMO.htm",
				"x-published": true
			}
		},
		"/sms/v1/contacts/queueImport/{id}": {
			"post": {
				"tags": [
					"sms"
				],
				"summary": "queueContactImport",
				"description": "Queues a contact import.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestQueueContactImport"
						}
					},
					{
						"name": "listId",
						"in": "query",
						"description": "the list id",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "queueContactImport.htm",
				"x-published": true
			}
		},
		"/sms/v1/keyword": {
			"post": {
				"tags": [
					"sms"
				],
				"summary": "createKeyword",
				"description": "Creates a keyword on an account.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestCreateKeyword"
					}
				}],
				"x-md-detail": "createKeyword.htm",
				"x-published": true
			}
		},
		"/sms/v1/message/outbound": {
			"post": {
				"tags": [
					"sms"
				],
				"summary": "createMessageOutbound",
				"description": "Creates an API trigger message.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestCreateMessageOutbound"
					}
				}],
				"x-md-detail": "createMessageOutbound.htm",
				"x-published": false
			}
		},
		"/sms/v1/automation/importSend/{id}/deliveryReport": {
			"post": {
				"tags": [
					"sms"
				],
				"summary": "importSendDeliveryReport",
				"description": "Generates a .csv fiie containing information regarding SMS message delivery for a specific MessageList and places the report in the Enhanced FTP location for the Marketing Cloud account.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestImportSendDeliveryReport"
						}
					},
					{
						"name": "tokenid",
						"in": "query",
						"description": "The ID provided in the MessageList REST response",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "importSendDeliveryReport.htm",
				"x-published": true
			}
		},
		"/sms/v1/contacts/subscriptions": {
			"post": {
				"tags": [
					"sms"
				],
				"summary": "contactsSubscriptions",
				"description": "Returns subscription status for a mobile number or subscriber key.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestContactsSubscriptions"
					}
				}],
				"x-md-detail": "contactsSubscriptions.htm",
				"x-published": true
			}
		},
		"/sms/v1/messageList/{id}/deliveryReport/{tokenId}": {
			"post": {
				"tags": [
					"sms"
				],
				"summary": "messageListDeliveryReport",
				"description": "Triggers a delivery report for messageList API.",
				"parameters": [{
						"in": "body",
						"name": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/RequestMessageListDeliveryReport"
						}
					},
					{
						"name": "tokenid",
						"in": "query",
						"description": "The ID provided in the MessageList REST response",
						"required": true,
						"type": "string"
					},
					{
						"name": "messageID",
						"in": "query",
						"description": "The API key of the message definition (configured in the MobileConnect user interface)",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "messageListDeliveryReport.htm",
				"x-published": true
			}
		},
		"/sms/v1/keyword/{keywordId}": {
			"delete": {
				"tags": [
					"sms"
				],
				"summary": "deleteKeywordViaKeywordId",
				"description": "Deletes a keyword on an account given a keyword Id.",
				"parameters": [{
						"name": "keywordId",
						"in": "query",
						"description": "Encoded Id of keyword that will be deleted",
						"required": true,
						"type": "string"
					}
				],
				"x-md-detail": "deleteKeywordViaKeywordId.htm",
				"x-published": true
			}
		},
		"/sms/v1/keyword/{keyword}/{longCode}": {
			"delete": {
				"tags": [
					"sms"
				],
				"summary": "deleteKeywordViaKeywordLongCode",
				"description": "Deletes a keyword on an account given a keyword and long code.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestDeleteKeywordViaKeywordLongCode"
					}
				}],
				"x-md-detail": "deleteKeywordViaKeywordLongCode.htm",
				"x-published": true
			}
		},
		"/sms/v1/keyword/{keyword}/{shortCode}/{countryCode}": {
			"delete": {
				"tags": [
					"sms"
				],
				"summary": "deleteKeywordViaKeywordShortCodeCountryCode",
				"description": "Deletes a keyword on an account given a keyword, short code, and country code.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestDeleteKeywordViaKeywordShortCodeCountryCode"
					}
				}],
				"x-md-detail": "deleteKeywordViaKeywordShortCodeCountryCode.htm",
				"x-published": true
			}
		},
		"/sms/v1/message/optin": {
			"post": {
				"tags": [
					"sms"
				],
				"summary": "createMessageOptin",
				"description": "Creates an SMS opt-in message permitting contacts to subscribe to further SMS messages.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestCreateMessageOptin"
					}
				}],
				"x-md-detail": "messageOptIn.htm",
				"x-published": false
			}
		},
		"/platform/v1/webhooks": {
			"post": {
				"tags": [
					"webhooks"
				],
				"summary": "createWebhooks",
				"description": "Creates a webhook endpoint using batch or triggered send options, or a combination of both.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestCreateWebhooks"
					}
				}],
				"x-md-detail": "createWebhooks.htm",
				"x-published": false
			}
		},
		"/platform/v1/accounts/current/webhooks": {
			"get": {
				"tags": [
					"webhooks"
				],
				"summary": "retrieveWebhooksAll",
				"description": "Retrieves all webhooks that have been created for an account.",
				"parameters": [],
				"x-md-detail": "retrieveWebhooksAll.htm",
				"x-published": false
			}
		},
		"/platform/v1/webhooks/{webhookId}": {
			"get": {
				"tags": [
					"webhooks"
				],
				"summary": "retrieveWebhookID",
				"description": "Retrieves a specific webhook by ID. Call this after retrieving the list of all webhooks from <strong>/accounts/current/webhooks</strong>.",
				"parameters": [{
					"name": "webhookId",
					"in": "query",
					"description": "The ID of the Webhook.",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "retrieveWebhookID.htm",
				"x-published": false
			},
			"delete": {
				"tags": [
					"webhooks"
				],
				"summary": "deleteWebhooks",
				"description": "Deletes a webhook.",
				"parameters": [{
					"name": "webhookId",
					"in": "query",
					"description": "The ID of a Webhook.",
					"required": true,
					"type": "string"
				}],
				"x-md-detail": "deleteWebhooks.htm",
				"x-published": false
			}
		},
		"/platform/v1/webhooks/verify": {
			"post": {
				"tags": [
					"webhooks"
				],
				"summary": "verifyWebhook",
				"description": "Confirms that the callback URL belongs to the subscriber by validating the ID, callbackKey, and secretToken registered to the webhook's endpoint.",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "JSON parameters",
					"schema": {
						"$ref": "#/definitions/RequestVerifyWebhook"
					}
				}],
				"x-md-detail": "verifyWebhook.htm",
				"x-published": false
			}
		},
		"/ott/v1/send": {
			"post": {
				"tags": [
					"chatMessaging"
				],
				"summary": "sendMessageToRecipient",
				"description": "Send an OTT message to the recipient. Supported OTT networks are Facebook Messenger and LINE.",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "JSON parameters",
						"schema": {
							"$ref": "#/definitions/OttSendMessageRequestEntity"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Created",
						"schema": {
							"$ref": "#/definitions/ResponseOttSendMessage_201"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_400"
						}
					},
					"403": {
						"description": "Forbidden",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_40x"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_40x"
						}
					}
				},
				"x-md-detail": "OTTsendMessageToRecipient.htm",
				"x-published": true
			}
		},
		"/ott/v1/send/{messageId}": {
			"get": {
				"tags": [
					"chatMessaging"
				],
				"summary": "retrieveSentMessageByMessageId",
				"description": "Retrieves all the information about an existing OTT send message request.",
				"parameters": [
					{
						"name": "messageId",
						"in": "query",
						"description": "Id of the send request to be retrieved. Id can be user-defined MessageKey or ottRequestId returned as a response to send message request.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "success",
						"schema": {
							"$ref": "#/definitions/ResponseOttRetrieveSendMessage_200"
						}
					},
					"403": {
						"description": "Forbidden",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_40x"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_40x"
						}
					}
				},
				"x-md-detail": "OTTretrieveSentMessage.htm",
				"x-published": true
			}
		},
		"/ott/v1/registration": {
			"post": {
				"tags": [
					"chatMessaging"
				],
				"description": "Register a property for a specific OTT platform. If you try to register a Messenger Page ID or LINE Channel ID  resource that already exists in Marketing Cloud, the details in the request payload override the details in Marketing Cloud.",
				"summary": "registerOttProperty",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "JSON Parameters",
						"schema": {
							"$ref": "#/definitions/OttRegistrationRequestEntity"
						}
					}
				],
				"responses": {
					"201": {
						"description": "success",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_201"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_400"
						}
					},
					"403": {
						"description": "Forbidden",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_40x"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_40x"
						}
					}
				},
				"x-md-detail": "OTTregisterProperty.htm",
				"x-published": true
			}
		},
		"/ott/v1/registration/{platform}/{ottPropertyId}": {
			"get": {
				"tags": [
					"chatMessaging"
				],
				"description": "Retrieves information about a registered OTT property by Platform and ID.",
				"summary": "retrieveRegistrationPropertyByPlatformAndId",
				"parameters": [
					{
						"name": "platform",
						"in": "query",
						"description": "OTT Platform Name of the property.",
						"required": true,
						"type": "string"
					},
					{
						"name": "ottPropertyId",
						"in": "query",
						"description": "ID of the OTT property",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/ResponseOttRetrieveRegistration_200"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_400"
						}
					},
					"403": {
						"description": "Forbidden",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_40x"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_40x"
						}
					}
				},
				"x-md-detail": "OTTretrieveRegistrationProperty.htm",
				"x-published": true
			}
		},
		"/ott/v1/registration/{platform}": {
			"get": {
				"tags": [
					"chatMessaging"
				],
				"description": "Retrieves paginated collection of registered OTT properties by OTT Platform.",
				"summary": "retrieveRegistrationCollectionByPlatform",
				"parameters": [
					{
						"name": "platform",
						"in": "query",
						"description": "OTT Platform Name of property",
						"required": true,
						"type": "string"
					},
					{
						"name": "$page",
						"in": "query",
						"description": "Page number to return from the paged results. Start with 1 and continue until you get zero results. Typically provided along with the $pagesize parameter.",
						"required": false,
						"type": "number"
					},
					{
						"name": "$pagesize",
						"in": "query",
						"description": "Number of results per page to return. Typically provided along with the $page parameter.",
						"required": false,
						"type": "number"
					}
				],
				"responses": {
					"200": {
						"description": "success",
						"schema": {
							"$ref": "#/definitions/ResponseOttRetrieveRegistrationCollection_200"
						}
					},
					"400": {
						"description": "Bad Request",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_400"
						}
					},
					"403": {
						"description": "Forbidden",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_40x"
						}
					},
					"404": {
						"description": "Not Found",
						"schema": {
							"$ref": "#/definitions/ResponseOttMessage_40x"
						}
					}
				},
				"x-md-detail": "OTTretrieveRegistrationCollection.htm",
				"x-published": true
			}
		}
	},
	"definitions": {
		"AssetData": {
			"type": "object",
			"required": [],
			"properties": {
				"campaigns": {
					"description": "Property bag for campaign attributes",
					"type": "object"
				},
				"campaigns.campaigns": {
					"description": "List of campaigns this asset is tied to",
					"type": "array"
				},
				"campaigns.altered": {
					"description": "Whether the asset is used by the campaigns team or not",
					"type": "boolean"
				},
				"approvals": {
					"description": "Property bag for approvals attributes",
					"type": "object"
				},
				"approvals.ApprovalStatus": {
					"description": "Status of approvals",
					"type": "number"
				},
				"email": {
					"description": "Property bag for email attributes",
					"type": "object"
				},
				"email.options": {
					"description": "A dictionary property used by some applications",
					"type": "object"
				},
				"email.legacy": {
					"description": "Used by channels to contain the LegacyId, LegacyCategoryId, and other properties consumed by those channels",
					"type": "object"
				},
				"email.attributes": {
					"description": "Values used by the email group",
					"type": "array"
				}
			}
		},
		"RequestAdvancedAssetQuery": {
			"type": "object",
			"required": [
				"query"
			],
			"properties": {
				"query": {
					"description": "Contains the actual search request, comprised of one or more simple queries. Combine multiple query objects into an advanced query using the logical operator AND or OR.",
					"type": "object"
				},
				"query.property": {
					"description": "Refers to an element of the asset you are querying",
					"type": "string"
				},
				"query.simpleOperator": {
					"description": "Represents the comparison you are making between the property and the value",
					"type": "string"
				},
				"query.value": {
					"description": "Represents the data you are comparing the property for returning search results. The value can be practically any constant expression: a single word, a phrase or sentence, a number with our without decimals. When filtering for a property among multiple values, such as when using the <strong>in</strong> operator, the <strong>value</strong> field becomes <strong>values</strong>.",
					"type": "string"
				},
				"page": {
					"description": "Contains page and pageSize. For page, start with 1 and continue until you get zero results. pageSize is the number of results per page to return.",
					"type": "object"
				},
				"sort": {
					"description": "Contains one or more properties to use for sorting, and also determines the direction in which to sort the data.",
					"type": "object"
				},
				"fields": {
					"description": "List of asset properties used to reduce the size of your results to only the properties you need.",
					"type": "object"
				}
			}
		},
		"ChannelView": {
			"type": "object",
			"required": [],
			"properties": {
				"compiled": {
					"description": "A representation of the view",
					"type": "string"
				}
			}
		},
		"Base64String": {
			"type": "string",
			"required": []
		},
		"AssetPut": {
			"type": "object",
			"required": [
				"id"
			],
			"additionalProperties": {
				"$ref": "#/definitions/Asset"
			}
		},
		"AssetPatch": {
			"type": "object",
			"required": [],
			"properties": {
				"$ref": "#/definitions/Asset"
			}
		},
		"AssetSalutation": {
			"type": "object",
			"required": [],
			"properties": {
				"HTMLHeader": {
					"description": "The HTML header",
					"type": "string"
				},
				"HTMLFooter": {
					"description": "The HTML footer",
					"type": "string"
				},
				"textHeader": {
					"description": "The text header",
					"type": "string"
				},
				"textFooter": {
					"description": "The text footer",
					"type": "string"
				}
			}
		},
		"AssetError": {
			"type": "object",
			"required": [],
			"properties": {
				"Message": {
					"description": "The error message",
					"type": "string"
				},
				"ErrorCode": {
					"description": "The specific error code",
					"type": "number"
				},
				"Documentation": {
					"description": "Any specific documentation for the error",
					"type": "string"
				}
			}
		},
		"Asset": {
			"type": "object",
			"required": [],
			"properties": {
				"CustomerKey": {
					"description": "Reference to customer's private ID/name for the asset",
					"type": "string"
				},
				"ContentType": {
					"description": "The type that the content attribute will be in",
					"type": "string"
				},
				"Data": {
					"description": "Property bag containing the asset data",
					"type": "object"
				},
				"AssetType": {
					"description": "The type of the asset saved as a name/ID pair",
					"type": "object"
				},
				"Version": {
					"description": "The version of the asset",
					"type": "number"
				},
				"Locked": {
					"description": "Specifies if the asset can be modified or not",
					"type": "boolean"
				},
				"FileProperties": {
					"description": "Stores the different properties that this asset refers to if it is a file type",
					"type": "object"
				},
				"Name": {
					"description": "Name of the asset, set by the client. 200 character maximum.",
					"type": "string"
				},
				"Description": {
					"description": "Description of the asset, set by the client",
					"type": "string"
				},
				"Category": {
					"description": "ID of the category the asset belongs to",
					"type": "object"
				},
				"Tags": {
					"description": "List of tags associated with the asset",
					"type": "array"
				},
				"Content": {
					"description": "The actual content of the asset",
					"type": "string"
				},
				"Design": {
					"description": "Fallback for display when neither content nor supercontent are provided",
					"type": "string"
				},
				"SuperContent": {
					"description": "Content that supersedes content in terms of display",
					"type": "string"
				},
				"CustomFields": {
					"description": "Custom fields within an asset",
					"type": "object"
				},
				"Views": {
					"description": "Views within an asset",
					"type": "object"
				},
				"Blocks": {
					"description": "Blocks within the asset",
					"type": "object"
				},
				"MinBlocks": {
					"description": "Minimum number of blocks within an asset",
					"type": "number"
				},
				"MaxBlocks": {
					"description": "Maximum number of blocks within an asset",
					"type": "number"
				},
				"Channels": {
					"description": "List of channels that are allowed to use this asset",
					"type": "object"
				},
				"AllowedBlocks": {
					"description": "List of blocks that are allowed in the asset",
					"type": "array"
				},
				"Slots": {
					"description": "Slots within the asset",
					"type": "object"
				},
				"BusinessUnitAvailability": {
					"description": "A dictionary of member IDs that have been granted access to the asset",
					"type": "object"
				},
				"sharingProperties": {
					"description": "Allows you to share content with one or more business units that have Content Builder Sharing enabled. See <a href=\"sharing.htm\">Sharing</a> for additional information.",
					"type": "object"
				},
				"sharingProperties.sharedWith": {
					"description": "List of MID IDs the asset is shared with",
					"type": "object"
				},
				"sharingProperties.sharingType": {
					"description": "Indicates the permission that you are granting to the list of MIDs in sharedWith. Possible values are view, edit, or local.",
					"type": "string"
				},
				"Template": {
					"description": "Template the asset follows",
					"type": "object"
				},
				"File": {
					"description": "Base64-encoded string of a file associated with an asset",
					"type": "string"
				},
				"GenerateFrom": {
					"description": "Tells the sending compiler what view to use for generating this view's content",
					"type": "string"
				}
			}
		},
		"ResponseDeleteAsset_200": {
			"type": "object",
			"required": [],
			"properties": {
				"message": {
					"description": "The resource was successfully deleted.",
					"type": "string"
				}
			}
		},
		"RequestCategory": {
			"type": "object",
			"required": [
				"Name",
				"ParentId"
			],
			"properties": {
				"Name": {
					"description": "Name of the category.",
					"type": "string"
				},
				"ParentId": {
					"description": "ID of the parent category.",
					"type": "number"
				},
				"CategoryType": {
					"description": "The type of category, either asset or asset-shared, which is automatically set to the CategoryType of the parent category. If set to asset-shared, include the SharingProperties in the call.",
					"type": "string"
				},
				"EnterpriseId": {
					"description": "ID of the enterprise this business unit belongs to.",
					"type": "number"
				},
				"MemberId": {
					"description": "ID of the member who creates the category.",
					"type": "number"
				},
				"SharingProperties": {
					"description": "Allows you to share categories with one or more business units that have Content Builder Sharing enabled. See <a href=\"sharing.htm\">Sharing</a> for additional information. Stores the MIDs of business units this category is shared with and the sharing type. Only included in the response if CategoryType is asset-shared.",
					"type": "object"
				},
				"SharingProperties.SharedWith": {
					"description": "List of up to 100 MID IDs the category is shared with. To share the category with all business units in the enterprise, and if your account has access to Content Builder Across Enterprise Sharing, set this to 0. SharedWith cannot contain 0 and other MIDs simultaneously. Since shared categories live in and are owned by the enterprise business unit, don't include the enterprise business unit in the SharedWith property.",
					"type": "object"
				},
				"SharingProperties.SharingType": {
					"description": "Indicates the permission that you are granting to the list of MIDs in sharedWith. The only possible value for categories is edit.",
					"type": "string"
				},
				"Description": {
					"description": "Description of the category.",
					"type": "string"
				}
			}
		},
		"DeletedAssets": {
			"type": "object",
			"required": [],
			"properties": {
				"name": {
					"description": "Name of the asset, set by the client. 200 character maximum.",
					"type": "string"
				},
				"customerKey": {
					"description": "Reference to customer's private ID/name for the asset.",
					"type": "string"
				},
				"categoryID": {
					"description": "ID of the category the asset belongs to.",
					"type": "number"
				}
			}
		},
		"UpdateCategory": {
			"type": "object",
			"required": [
				"Id",
				"Name",
				"ParentId"
			],
			"properties": {
				"Id": {
					"description": "System-assigned ID of the category,",
					"type": "number"
				},
				"Name": {
					"description": "Name of the category.",
					"type": "string"
				},
				"ParentId": {
					"description": "ID of the parent category.",
					"type": "number"
				},
				"EnterpriseId": {
					"description": "ID of the enterprise this business unit belongs to.",
					"type": "number"
				},
				"CategoryType": {
					"description": "The type of category, either asset or asset-shared.",
					"type": "string"
				},
				"MemberId": {
					"description": "ID of the member who creates the category.",
					"type": "number"
				},
				"SharingProperties": {
					"description": "Stores the MIDs of business units this category is shared with and the sharing type. Only included in the response if CategoryType is asset-shared.",
					"type": "object"
				},
				"SharingProperties.SharedWith": {
					"description": "List of MID IDs the category is shared with.",
					"type": "object"
				},
				"SharingProperties.SharingType": {
					"description": "Indicates the permission that you are granting to the list of MIDs in sharedWith. The only possible value for categories is edit.",
					"type": "string"
				},
				"Description": {
					"description": "Description of the category.",
					"type": "string"
				}
			}
		},
		"ResponseCategory_200": {
			"type": "object",
			"required": [],
			"properties": {
				"Id": {
					"description": "System-assigned ID for the category.",
					"type": "string"
				},
				"Name": {
					"description": "Name of the category.",
					"type": "string"
				},
				"ParentId": {
					"description": "ID of the parent category.",
					"type": "number"
				},
				"CategoryType": {
					"description": "The type of category, either asset or asset-shared.",
					"type": "string"
				},
				"MemberId": {
					"description": "ID of the member who creates the category.",
					"type": "number"
				},
				"EnterpriseId": {
					"description": "ID of the enterprise this business unit belongs to.",
					"type": "number"
				},
				"SharingProperties": {
					"description": "Stores the MIDs of business units this category is shared with and the sharing type. Only included in the response if CategoryType is asset-shared.",
					"type": "object"
				},
				"Meta": {
					"description": "Meta is used much like the data attribute on CMS assets but for internal functionality in Content Builder. If meta is returned, be sure to pass it through the API.",
					"type": "object"
				}
			}
		},
		"ResponseCategory_403": {
			"type": "object",
			"required": [],
			"properties": {
				"Message": {
					"description": "Insufficient privileges",
					"type": "string"
				},
				"ErrorCode": {
					"description": "20002",
					"type": "number"
				}
			}
		},
		"ResponseCategory_400":{
			"type": "object",
			"required": [],
			"properties": {
				"Message": {
					"description": "Bad request!",
					"type": "string"
				},
				"ErrorCode": {
					"description": "40004",
					"type": "number"
				}
			}
		},
		"ResponseCategory_404": {
			"type": "object",
			"required": [],
			"properties": {
				"Message": {
					"description": "Object not found",
					"type": "string"
				},
				"ErrorCode": {
					"description": "30003",
					"type": "number"
				}
			}
		},
		"ResponseCategory_500": {
			"type": "object",
			"required": [],
			"properties": {
				"Message": {
					"description": "No message",
					"type": "string"
				},
				"ErrorCode": {
					"description": "10000",
					"type": "number"
				}
			}
		},
		"ResponseDeleteCategory_200": {
			"type": "object",
			"required": [],
			"properties": {
				"message": {
					"description": "The resource was successfully deleted.",
					"type": "string"
				}
			}
		},
		"ResponseIsCustomObjectUsedInContacts_200": {
			"type": "object",
			"required": [
				"isUsedByContacts",
				"requestServiceMessageID",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"isUsedByContacts": {
					"description": "Indicates whether a contact model uses the custom object",
					"type": "boolean"
				},
				"requestServiceMessageID": {
					"type": "guid",
					"description": "Service message ID for the request"
				},
				"resultMessages": {
					"type": "array",
					"description": "Array of returned messages regarding custom objects"
				},
				"serviceMessageID": {
					"type": "guid",
					"description": "Service message ID for the response"
				}
			}
		},
		"RequestGetDeleteOptions": {
			"type": "object",
			"required": [],
			"properties": {
				"ListType": {
					"description": "Type of list referenced. Specify either Audience or List.",
					"type": "string"
				},
				"DeleteOperationType": {
					"description": "Type of delete operation referenced. Specify either ContactAndAttributes or AttributesOnly.",
					"type": "string"
				},
				"ApplicationContext": {
					"description": "The application ID or application key value used to retrieve options available for that application.",
					"type": "string"
				}
			}
		},
		"RequestDeleteByContactKeys": {
			"type": "object",
			"required": [
				"Values",
				"DeleteOperationType"
			],
			"properties": {
				"Values": {
					"description": "Array of contact key values to delete",
					"type": "array"
				},
				"DeleteOperationType": {
					"description": "Type of delete operation to perform. Specify ContactAndAttributes to delete a contact and all its attributes from the entire account and channels. AttributesOnly is reserved for future use.",
					"type": "string"
				}
			}
		},
		"RequestDeleteByContactIDs": {
			"type": "object",
			"required": [
				"Values",
				"DeleteOperationType"
			],
			"properties": {
				"Values": {
					"description": "Array of contact ID values to delete",
					"type": "array"
				},
				"DeleteOperationType": {
					"description": "Type of delete operation to perform. Specify ContactAndAttributes to delete a contact from the entire account as long as no other channel references that contact. AttributesOnly is reserved for future use.",
					"type": "string"
				}
			}
		},
		"RequestDeleteByListReference": {
			"type": "object",
			"required": [
				"DeleteOperationType",
				"ListType",
				"listKey"
			],
			"properties": {
				"DeleteOperationType": {
					"description": "Type of delete operation to perform. Specify ContactAndAttributes to delete a contact from the entire account as long as no other channel references that contact. AttributesOnly is reserved for future use.",
					"type": "string"
				},
				"targetList": {
					"description": "Object used to identify list. Can include ListType and ListKey objects.",
					"type": "object"
				},
				"targetList.ListType": {
					"description": "Object including list type information, including listTypeID or ListTypeKey. The only valid value for ListTypeID is 3, indicating a data extension.",
					"type": "object"
				},
				"targetList.listKey": {
					"description": "ID used to identify list within Marketing Cloud",
					"type": "string"
				},
				"deleteListWhenCompleted": {
					"description": "Indicates whether to delete list after performing this operation. This option does not apply to lists identified by ID, key, or reference. For objects marked as not deletable, this setting skips the list and issues a warning. The process continues despite the error.",
					"type": "boolean"
				},
				"deleteListContentsWhenCompleted": {
					"description": "Indicates whether to delete contents of list after performing this operation. This option does not apply to lists identified by ID, key, or reference. For objects marked as not deletable, this setting skips the list and issues a warning. The process continues despite the error.",
					"type": "boolean"
				}
			}
		},
		"RequestSetContactDeleteConfigurationSettings": {
			"type": "object",
			"required": [
				"items",
				"items.SettingKey",
				"items.Value"
			],
			"properties": {
				"items": {
					"description": "Key value pairs of configuration settings you are modifying.",
					"type": "array"
				},
				"items.SettingKey": {
					"description": "Configuration setting key to modify. This key supports only the SuppressionRestoreUntilDays value.",
					"type": "string"
				},
				"items.Value": {
					"description": "Value of the setting to modify. A value of -1 = 0 days. A value of 1 = 1 day.",
					"type": "string"
				}
			}
		},
		"RequestRetrieveContactKey": {
			"type": "object",
			"required": [
				"channelAddressList"
			],
			"properties": {
				"channelAddressList": {
					"description": "List of email channel addresses for which a contact key is requested",
					"type": "array"
				},
				"maximumCount": {
					"description": "Number of contact keys associated with an email channel address. The default value is 1.",
					"type": "integer"
				}
			}
		},
		"RequestValidateEmail": {
			"type": "object",
			"required": [
				"email",
				"validators"
			],
			"properties": {
				"email": {
					"description": "Email address to be validated",
					"type": "string"
				},
				"validators": {
					"description": "List of validators to check email against. Validators include: SyntaxValidator, MXValidator, and ListDetectiveValidator",
					"type": "array"
				}
			}
		},
		"RequestDomainVerificationBulkInsert": {
			"type": "object",
			"required": [
				"NotificationEmail"
			],
			"properties": {
				"NotificationEmail": {
					"description": "Email address where a notification is sent when the process completes.",
					"type": "string"
				},
				"Addresses": {
					"description": "Array of email addresses to add as from addresses. The call must include either Addresses or DETable and DEColumn.",
					"type": "string"
				},
				"DETable": {
					"description": "Name of the data extension to retrieve addresses from. The call must include either DETable and DEColumn or Addresses.",
					"type": "string"
				},
				"DEColumn": {
					"description": "Column in DETable to retrieve addresses from. The call must include either DETable and DEColumn or Addresses.",
					"type": "string"
				}
			}
		},
		"RequestDomainVerificationCreateAuthenticatedDomain": {
			"type": "object",
			"required": [
				"domain"
			],
			"properties": {
				"domain": {
					"description": "The root domain of the email address.",
					"type": "string"
				}
			}
		},
		"RequestDomainVerificationUpdateAuthenticatedDomain": {
			"type": "object",
			"required": [
				"domain",
				"IsSendable"
			],
			"properties": {
				"domain": {
					"description": "The root domain of the email address.",
					"type": "string"
				},
				"isSendable": {
					"description": "Determines whether or not the email address is sendable.",
					"type": "boolean"
				}
			}
		},
		"RequestDomainVerificationDeleteAuthenticatedDomain": {
			"type": "object",
			"required": [
				"EmailAddress",
				"DomainType"
			],
			"properties": {
				"EmailAddress": {
					"description": "Email address to delete.",
					"type": "string"
				},
				"DomainType": {
					"description": "Domain type of the email address. Use UserDomain.",
					"type": "boolean"
				}
			}
		},
		"RequestDomainVerificationRegisterDomain": {
			"type": "object",
			"required": [
				"domain"
			],
			"properties": {
				"domain": {
					"description": "The root domain of the email address.",
					"type": "string"
				}
			}
		},
		"RequestDomainVerificationVerifyDomain": {
			"type": "object",
			"required": [
				"Domain",
				"Key"
			],
			"properties": {
				"domain": {
					"description": "The root domain of the email address.",
					"type": "string"
				},
				"key": {
					"description": "The domain’s stored token key.",
					"type": "boolean"
				}
			}
		},
		"RequestDomainVerificationPushDomain": {
			"type": "object",
			"required": [
				"domainlist"
			],
			"properties": {
				"domainlist": {
					"description": "List of registered domains to push to existing child business units. Each child business unit receives all registered domains in this list.",
					"type": "Array of strings"
				}
			}
		},
		"RequestMessageDefinitionSends": {
			"type": "object",
			"required": [
				"To",
				"To.Address",
				"To.SubscriberKey"
			],
			"properties": {
				"From": {
					"description": "Object containing email address and name of sender.",
					"type": "object"
				},
				"From.Address": {
					"description": "Email address that will show as the sender.",
					"type": "string"
				},
				"From.Name": {
					"description": "Name of the sender.",
					"type": "string"
				},
				"To": {
					"description": "Object requiring email address and optional subscriber parameters passed in at send time.",
					"type": "object"
				},
				"To.Address": {
					"description": "Email address of the message recipient.",
					"type": "string"
				},
				"To.SubscriberKey": {
					"description": "Unique identifier defined for the message recipient.",
					"type": "string"
				},
				"To.ContactAttributes": {
					"description": "The profile attributes setup determines the attributes that can be passed in.",
					"type": "object"
				},
				"To.ContactAttributes.SubscriberAttributes": {
					"description": "Name and value pairs for subscriber attributes defined for the message.",
					"type": "object"
				},
				"Options": {
					"description": "Object used to specify asynchronous or synchronous. If not specified, defaults to asynchronous.",
					"type": "object"
				},
				"Options.RequestType": {
					"description": "Valid values ASYNC and SYNC. Default value when not defined is ASYNC. Determines if the request is processed asychronously.",
					"type": "string"
				}
			}
		},
		"RequestCreateContacts": {
			"type": "object",
			"required": [
				"attributeSets",
				"attributeSets.name"
			],
			"properties": {
				"contactKey": {
					"description": "Primary address for the contact. You must provide either a value for contactKey or contactID.",
					"type": "string"
				},
				"contactID": {
					"description": "Unique ID for the contact. You must provide either a value for contactKey or contactID.",
					"type": "string"
				},
				"attributeSets": {
					"description": "Array of information used to create a new contact",
					"type": "array"
				},
				"attributeSets.name": {
					"description": "Name of attribute group to which to add the contact information",
					"type": "string"
				},
				"attributeSets.values": {
					"description": "Name and value pairs indicating the attribute and applicable value",
					"type": "array"
				}
			}
		},
		"RequestEstablishContacts": {
			"type": "object",
			"required": [
				"contactKeys"
			],
			"properties": {
				"contactKeys": {
					"description": "String array of one or more contact keys.",
					"type": "array"
				},
				"contactType": {
					"description": "The default contact type is \"Default\" or 0. Most users do not modify the default value.",
					"type": "number"
				},
				"returnResults": {
					"description": "Indicates if the call returns results. The default value is true.",
					"type": "boolean"
				},
				"correlateResponseItem": {
					"description": "Indicates if the result items' return order matches the request order. The default value is true.",
					"type": "boolean"
				},
				"includeNewContactAwareness": {
					"description": "Indicates that the contact has never been included in the results before. The default value is true.",
					"type": "boolean"
				}
			}
		},
		"RequestUpdateContacts": {
			"type": "object",
			"required": [
				"contactKey",
				"contactID",
				"attributeSets",
				"attributeSets.name"
			],
			"properties": {
				"contactKey": {
					"description": "Primary address for the contact. You must provide either a value for contactKey or contactID.",
					"type": "string"
				},
				"contactID": {
					"description": "Unique ID for the contact. You must provide either a value for contactKey or contactID.",
					"type": "string"
				},
				"attributeSets": {
					"description": "Array of information used to create a new contact",
					"type": "array"
				},
				"attributeSets.name": {
					"description": "Name of attribute group to which to add the contact information",
					"type": "string"
				},
				"attributeSets.values": {
					"description": "Name and value pairs indicating the attribute and applicable value",
					"type": "array"
				}
			}
		},
		"RequestFetchContactAddressesBySearchCriteria": {
			"type": "object",
			"required": [
				"filterConditionOperator",
				"filterConditionValue"
			],
			"properties": {
				"filterConditionOperator": {
					"description": "Filter condition operator name. Currently supports only the \"Is\" operator",
					"type": "string"
				},
				"filterConditionValue": {
					"description": "Value for attribute used in search criteria for contacts and associated addresses. <ul><li>When using the \"LastModfiedDate\" attributeName, separate the values for start and end date in the filterconditionValue with an \"AND\"</li> <li>The \"Channel\" attributeName supports these values: <ul><li>MOBILE</li> <li>PUSH</li> <li>LINE</li> <li>EMAIL</li></ul></li></ul>",
					"type": "string"
				}
			}
		},
		"RequestFetchContactAddressCount": {
			"type": "object",
			"required": [
				"queryFilter",
				"queryFilter.hasCriteria",
				"queryFilter.rootExpressionSet",
				"queryFilter.rootExpressionSet.expressions",
				"queryFilter.rootExpressionSet.expressions.customerDataDefinitionID",
				"queryFilter.rootExpressionSet.expressions.operator",
				"queryFilter.rootExpressionSet.expressions.values"
			],
			"properties": {
				"queryFilter": {
					"description": "Filter used in search criteria to fetch contact counts that match search criteria",
					"type": "object"
				},
				"queryFilter.hasCriteria": {
					"description": "Indicates the filter specifies search criteria. This property should always include a \"true\" value",
					"type": "boolean"
				},
				"queryFilter.rootExpressionSet": {
					"description": "Container for all expressions used in specifying search criteria.",
					"type": "object"
				},
				"queryFilter.rootExpressionSet.expressions": {
					"description": "List of all expressions used in specifying search criteria. This resource supports only one expression",
					"type": "array"
				},
				"queryFilter.rootExpressionSet.expressions.customerDataDefinitionID": {
					"description": "Short Numbers representing the attributeName of the search. <ul><li>ContactKey: 101</li> <li>LastModfiedDate: 102</li> <li>Source: 103</li> <li>Channel: 104</li> <li>Status: 105</li> <li>AudienceID: 106</li></ul>",
					"type": "short"
				},
				"queryFilter.rootExpressionSet.expressions.operator": {
					"description": "The filter condition operator name. Supports only the \"Equal\" operator",
					"type": "string"
				},
				"queryFilter.rootExpressionSet.expressions.values": {
					"description": "Value for attribute used in search criteria to fetch contact counts as a string array. The \"Channel\" attributeName (CustomerDataDefinitionID: 104) supports these channels: <ul><li>MOBILE</li> <li>PUSH</li> <li>LINE</li> <li>EMAIL</li></ul>",
					"type": "array"
				}
			}
		},
		"ResponseFetchContactAddressesBySearchCriteria_200": {
			"type": "object",
			"required": [
				"pageNumber",
				"pageSize",
				"addresses",
				"addresses.contactID",
				"addresses.contactKey",
				"addresses.addressTypeID",
				"addresses.addressID",
				"addresses.addressKey",
				"addresses.status",
				"addresses.ordinal",
				"addresses.source",
				"addresses.modifiedDate",
				"addresses.valueSets",
				"addresses.valueSets.definitionID",
				"addresses.valueSets.definitionKey",
				"addresses.valueSets.definitionName",
				"addresses.valueSets.values",
				"addresses.valueSets.values.definitionID",
				"addresses.valueSets.values.definitionKey",
				"addresses.valueSets.values.definitionName",
				"addresses.valueSets.values.valueID",
				"addresses.valueSets.values.innerValue",
				"requestServiceMessageID",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"pageNumber": {
					"type": "integer",
					"description": "Page number of results retrieved"
				},
				"pageSize": {
					"type": "integer",
					"description": "Page size of results retrieved"
				},
				"addresses": {
					"type": "array",
					"description": "Array of all address objects retrieved"
				},
				"addresses.contactID": {
					"type": "object",
					"description": "Type-value object specifying ContactID tied to given address"
				},
				"addresses.contactKey": {
					"type": "object",
					"description": "Type-value object specifying ContactKey tied to given address"
				},
				"addresses.addressTypeID": {
					"type": "integer",
					"description": "Type of the retrieved address: <ul><li>EMAIL: 1</li> <li>MOBILE: 4</li> <li>PUSH: 9</li> <li>LINE: 10</li></ul>"
				},
				"addresses.addressID": {
					"type": "object",
					"description": "Type-value object specifying the AddressID for retrieved address"
				},
				"addresses.addressKey": {
					"type": "object",
					"description": "Type-value object specifying the AddressKey for retrieved address"
				},
				"addresses.status": {
					"type": "integer",
					"description": "Status value of retrieved address"
				},
				"addresses.ordinal": {
					"type": "integer",
					"description": "Ordinal value of retrieved address"
				},
				"addresses.source": {
					"type": "integer",
					"description": "Source value of retrieved address"
				},
				"addresses.modifiedDate": {
					"type": "string",
					"description": "Last modified date value of retrieved address"
				},
				"addresses.valueSets": {
					"type": "array",
					"description": "Object array containing value set information of pertinent attributes retrieved for address"
				},
				"addresses.valueSets.definitionID": {
					"type": "guid",
					"description": "Default ID assigned to represent the Set Definition of value Set information for retrieved address"
				},
				"addresses.valueSets.definitionKey": {
					"type": "string",
					"description": "Default key assigned to represent the Set Definition of value Set information for retrieved address"
				},
				"addresses.valueSets.definitionName": {
					"type": "string",
					"description": "Default name assigned to represent the Set Definition of value Set information for retrieved address"
				},
				"addresses.valueSets.values": {
					"type": "array",
					"description": "Object array containing property definition and actual value information of attributes retrieved for address"
				},
				"addresses.valueSets.values.definitionID": {
					"type": "guid",
					"description": "The value definition ID of a retrieved attribute for retrieved address"
				},
				"addresses.valueSets.values.definitionKey": {
					"type": "string",
					"description": "The value definition key of a retrieved attribute for retrieved address"
				},
				"addresses.valueSets.values.definitionName": {
					"type": "string",
					"description": "The value definition name of a retrieved attribute for retrieved address"
				},
				"addresses.valueSets.values.valueID": {
					"type": "guid",
					"description": "An auto-generated guid representing a retrieved attribute value for the retrieved address"
				},
				"addresses.valueSets.values.innerValue": {
					"type": "string",
					"description": "Actual value of a retrieved attribute for the retrieved address"
				},
				"requestServiceMessageID": {
					"type": "guid",
					"description": "Service message ID value of the request"
				},
				"resultMessages": {
					"type": "array",
					"description": "Array of returned messages generated while processing the request"
				},
				"serviceMessageID": {
					"type": "guid",
					"description": "Service message ID value of the response"
				}
			}
		},
		"ResponseFetchContactAddressesBySearchCriteria_default": {
			"type": "object",
			"required": [
				"pageNumber",
				"pageSize",
				"hasErrors",
				"requestServiceMessageID",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"pageNumber": {
					"type": "integer",
					"description": "Page number of results retrieved"
				},
				"pageSize": {
					"type": "integer",
					"description": "Page size of results retrieved"
				},
				"hasErrors": {
					"type": "boolean",
					"description": "Indicates errors occured while processing the request"
				},
				"requestServiceMessageID": {
					"type": "guid",
					"description": "Service message ID value of request"
				},
				"resultMessages": {
					"type": "array",
					"description": "Array of returned error messages generated while processing request"
				},
				"serviceMessageID": {
					"type": "guid",
					"description": "Service message ID value of response"
				}
			}
		},
		"ResponseFetchContactAddressCount_200": {
			"type": "object",
			"required": [
				"totalCount",
				"requestServiceMessageID",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"totalCount": {
					"type": "integer",
					"description": "Total count of contacts matching search criteria"
				},
				"requestServiceMessageID": {
					"type": "guid",
					"description": "Service message ID value of request"
				},
				"resultMessages": {
					"type": "array",
					"description": "Array of returned messages generated while processing request"
				},
				"serviceMessageID": {
					"type": "guid",
					"description": "Service message ID value of response"
				}
			}
		},
		"ResponseFetchContactAddressCount_default": {
			"type": "object",
			"required": [
				"totalCount",
				"hasErrors",
				"requestServiceMessageID",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"totalCount": {
					"type": "integer",
					"description": "Total count of contacts matching search criteria"
				},
				"hasErrors": {
					"type": "boolean",
					"description": "Indicates errors occured while processing request"
				},
				"requestServiceMessageID": {
					"type": "guid",
					"description": "Service message ID value of request"
				},
				"resultMessages": {
					"type": "array",
					"description": "Array of returned error messages generated while processing request"
				},
				"serviceMessageID": {
					"type": "guid",
					"description": "Service message ID value of response"
				}
			}
		},
		"RequestPopulationAttributeGroupInsert": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"description": "Name of the new population",
					"type": "string"
				}
			}
		},
		"RequestAttributeSetsDataIDInsert": {
			"type": "object",
			"required": [
				"items",
				"items.values"
			],
			"properties": {
				"items": {
					"description": "Array of values to insert into the attribute set",
					"type": "array"
				},
				"items.values": {
					"description": "Name and value pairs of attributes to insert into the attribute set",
					"type": "array"
				}
			}
		},
		"RequestAttributeSetsDataIDUpdate": {
			"type": "object",
			"required": [
				"items",
				"items.values"
			],
			"properties": {
				"items": {
					"description": "Array of values to insert into the attribute set",
					"type": "array"
				},
				"items.values": {
					"description": "Name and value pairs of attributes to insert into the attribute set",
					"type": "array"
				}
			}
		},
		"RequestRequestToken": {
			"type": "object",
			"required": [
				"clientId",
				"clientSecret"
			],
			"properties": {
				"clientId": {
					"description": "First part of the Client Credentials App Key pair generated when creating an API Integration in Installed Packages",
					"type": "string"
				},
				"clientSecret": {
					"description": "Second part of the Client Credentials App Key pair generated when creating an API Integration in Installed Packages",
					"type": "string"
				},
				"accessType": {
					"description": "Set to <strong>offline</strong> to return a RefreshToken that is not session-based for later use",
					"type": "string"
				},
				"refreshToken": {
					"description": "Use the refreshToken obtained through <a href=\"https://developer.salesforce.com/docs/atlas.en-us.mc-app-development.meta/mc-app-development/single-sign-on.htm\">SSO for Marketing Cloud Apps</a> along with the accessType option to return an accessToken that is contextualized for your app. The refreshToken is valid for up to 700 days until it is used and can only be used once. It has a 5-minute revocation period after use, allowing for more attempts in case the service doesn't respond immediately.",
					"type": "string"
				}
			}
		},
		"RequestAccessToken": {
			"type": "object",
			"required": [
				"grant_type",
				"code",
				"client_id",
				"client_secret",
				"redirect_uri"
			],
			"properties": {
				"grant_type": {
					"description": "Type of grant. Must be 'client_credentials' for server-to-server integrations. Must be 'authorization_code' for web app and public app integrations.",
					"type": "string"
				},
				"code": {
					"description": "Required for web app and public app integrations. Authorization code obtained as part of the v2/authorize request.",
					"type": "string"
				},
				"client_id": {
					"description": "Client ID issued when you create the API integration in Installed Packages.",
					"type": "string"
				},
				"client_secret": {
					"description": "Required for server-to-server and web app integrations. Client secret issued when you create the API integration in Installed Packages.",
					"type": "string"
				},
				"redirect_uri": {
					"description": "Required for web app and public app integrations. Must match the redirect URL used to request the authorization code. Must be in plain text as it is in Installed Packages. It can’t be URL-encoded for this request.",
					"type": "string"
				},
				"scope": {
					"description": "Space-separated list of data-access permissions for your application. Review <a href=\"https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/rest-permissions-and-scopes.htm\">REST API Permission IDs and Scopes</a> for a full list of permissions. For web app and public app integrations: Must match the scopes or be a subset of the scopes requested as part of the authorization code request. For server-to-server integrations: If scope is not specified, the token is issued with the scopes specified on the API integration in Installed Packages.",
					"type": "string"
				},
				"account_id": {
					"description": "Account identifier, or MID, of the target business unit. Use to switch between business units.",
					"type": "number"
				}
			}
		},
		"RequestAuthorizationCode": {
			"type": "object",
			"required": [
				"response_type",
				"client_id",
				"redirect_uri"
			],
			"properties": {
				"response_type": {
					"description": "Type of response. Must be 'code' for web apps and public apps.",
					"type": "string"
				},
				"client_id": {
					"description": "Client ID issued when you create the API integration in Installed Packages.",
					"type": "string"
				},
				"redirect_uri": {
					"description": "Where the end user is directed after login. Must match a redirect URL specified on the API integration in Installed Packages. The URL must be encoded for this request.",
					"type": "string"
				},
				"scope": {
					"description": "Space-separated list of data-access permissions for your application. Review <a href=\"https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/rest-permissions-and-scopes.htm\">REST API Permission IDs and Scopes</a> for a full list of permissions. If scope is not specified, the token is issued with the scopes assigned to the API integration in Installed Packages.",
					"type": "string"
				},
				"state": {
					"description": "Used by your application to maintain state between the request and the redirect. The authorization server includes this value when redirecting the end-user’s browser back to your application. This parameter is recommended because it helps to minimize the risk of cross-site forgery attack.",
					"type": "string"
				}
			}
		},
		"RequestAssociateAssetToCampaign": {
			"type": "object",
			"required": [
				"ids",
				"type"
			],
			"properties": {
				"ids": {
					"description": "String array of asset ids from Content Builder. When associating a Template Based Email created using the Classic editor to a campaign, use the legacyID as the ID. Retrieve the legacyID using the <a href=\"assetAdvancedQuery.htm\">advanced asset query</a>.",
					"type": "array"
				},
				"type": {
					"description": "Options for the array: EMAIL, automation_definition, calendar_event, triggered, list, group, data_extension, sendable_custom_object, landing_page, facebook_tab, ct_facebook_post, ct_twitter_post, sms_message, push_message, CMS_asset. CMS_ASSET refers to Content Builder assets.",
					"type": "string"
				}
			}
		},
		"RequestGetCampaignCollection": {
			"type": "object",
			"required": [],
			"properties": {
				"page": {
					"description": "Page number of data returned. The default value is 1.",
					"type": "integer"
				},
				"pageSize": {
					"description": "Number of records per page. The maximum and default value is 50.",
					"type": "integer"
				},
				"orderBy": {
					"description": "Defines the order of the data (Default value of ModifiedDate DESC). Valid values include ModifiedDate, Name, CreatedDate, ID. All values must include either ASC (for ascending) or DESC (for descending) following the actual value. ASC and DESC indicate the order in which the specified information appears.",
					"type": "string"
				}
			}
		},
		"RequestPatchCampaign": {
			"type": "object",
			"required": [],
			"properties": {}
		},
		"RequestPutDataExtensionRowByKeyAsync": {
			"type": "object",
			"required": [],
			"properties": {
				"values": {
					"description": "Column name and value data set for the row being inserted into the data extension",
					"type": "object"
				}
			}
		},
		"RequestPutDataExtensionRowByKey": {
			"type": "object",
			"required": [],
			"properties": {
				"values": {
					"description": "Column name and value data set for the row being inserted into the data extension",
					"type": "object"
				}
			}
		},
		"RequestPutDataExtensionRowByID": {
			"type": "object",
			"required": [],
			"properties": {
				"values": {
					"description": "Column name and value data set for the row being inserted into the data extension",
					"type": "object"
				}
			}
		},
		"RequestPostEvent": {
			"type": "object",
			"required": [
				"ContactKey",
				"EventDefinitionKey"
			],
			"properties": {
				"ContactKey": {
					"description": "The ID that uniquely identifies a subscriber/contact",
					"type": "string"
				},
				"EventDefinitionKey": {
					"description": "Find the EventDefinitionKey in Event Administration after the event is created and saved. This is true for both standard and custom events. Do not include a period in the event definition key.",
					"type": "string"
				},
				"Data": {
					"description": "Properties of the event. Only required if defined in a custom event or by the event.",
					"type": "object"
				}
			}
		},
		"ContactExit": {
			"type": "object",
			"required": [
				"ContactKey",
				"DefinitionKey"
			],
			"properties": {
				"ContactKey": {
					"description": "ID that uniquely identifies a subscriber or contact. Include a single contact or an array of up to 50 contacts.",
					"type": "string"
				},
				"DefinitionKey": {
					"description": "Customer Key that uniquely identifies the journey. This key is the same for all versions of the journey.",
					"type": "string"
				},
				"Versions": {
					"description": "One or more versions of a journey from which to remove a contact.",
					"type": "array"
				}
			}
		},
		"ContactMembership" : {
				"type" : "object",
				"required" : [
											"ContactKeyList"
											],
				"properties" : {
						"ContactKeyList" : {
								"type" : "array",
								"description" : "List of up to 50 contact keys."
						}
				}
		},
		"RequestCreateEventDefinition": {
			"type": "object",
			"required": [
				"type",
				"name",
				"eventDefinitionKey",
				"dataExtensionId",
				"schema"
			],
			"properties": {
				"type": {
					"description": "Event represents the most generic type of Event Definition. Other possible values include ContactEvent, DateEvent, or RestEvent.",
					"type": "string"
				},
				"name": {
					"description": "A name for your Event Definition that identifies the event in Marketing Cloud",
					"type": "string"
				},
				"description": {
					"description": "Description of Event Definition",
					"type": "string"
				},
				"mode": {
					"description": "You can run Event Definitions in Production (default) or Test mode.",
					"type": "string"
				},
				"eventDefinitionKey": {
					"description": "Unique Id for an Event Definition in Marketing Cloud. Don't include special characters.",
					"type": "string"
				},
				"sourceApplicationExtensionId": {
					"description": "A link to the application extension that defines the configuration screens for this type. Journey Builder uses this ID to filter shared entry sources. For example, for the Event Definition to be visible in the Existing Entry sources panel in the UI, this field needs to be populated. To obtain this value, perform a GET eventDefinition on similar events in Journey Builder.",
					"type": "string"
				},
				"iconUrl": {
					"description": "URL to an icon displayed in Event Administration and the Journey Builder Canvas that identifies an Event Definition",
					"type": "string"
				},
				"isVisibleInPicker": {
					"description": "Indicates whether the Event Picker shows the Event Definition to users when configuring a journey. To see your Event Definition in Journey Builder, use true.",
					"type": "boolean"
				},
				"category": {
					"description": "Broad category of the event type. The default value is event.",
					"type": "string"
				},
				"arguments": {
					"description": "Contains filter criteria for the Event Definition. Only required for types other than event.",
					"type": "object"
				},
				"arguments.criteria": {
					"description": "When the API call defines a filter template, use this parameter as a template when a user chooses and configures the Event Definition. If you are not defining an additional filter for the Event Definition, leave this empty.",
					"type": "string"
				},
				"configuration": {
					"description": "Optional configuration data for the event. Only required for types other than event.",
					"type": "object"
				},
				"metaData": {
					"description": "Optional data describing the event and its configuration. Only required for types other than event.",
					"type": "object"
				},
				"dataExtensionId": {
					"description": "The ID for the data extension associated with the event. Events fired from the API write to this data extension. Required only when not providing a schema.",
					"type": "string"
				},
				"dataExtensionName": {
					"description": "The read-only name of the data extension associated with the event. POST and PUT methods ignore this field.",
					"type": "string"
				},
				"schema": {
					"description": "Schema information for an event. The call uses this information to create a data extension associated with the Event Definition. Only required when not providing a dataExtensionId value. See <a href=\"event-definition-schema.htm\">Event Definition Schema</a> for additional information.",
					"type": "object"
				},
				"sendableCustomObjectField": {
					"description": "Defines the subscriber key or email address within a data extension. Required when defining a schema.",
					"type": "string"
				},
				"sendableSubscriberField": {
					"description": "Indicates type of sendable subscriber field. The default value is SubscriberKey. Required when defining a schema.",
					"type": "string"
				},
				"schedule": {
					"description": "Creates an automation run daily according to the defined <a href=\"event-definition-schedule.htm\">schedule</a>. The call automatically adds a Fire Event activity to the automation. This automation fires events from the data extension defined as part of the Event Definition. See <a href=\"https://help.salesforce.com/articleView?id=mc_jb_fire_event.htm&type=5\">Firing an Event Using Automation Studio</a> for additional information.",
					"type": "string"
				}
			}
		},
		"RequestUpdateEventDefinition": {
			"type": "object",
			"required": [],
			"properties": {
				"name": {
					"description": "A name for your Event Definition that identifies the event in Marketing Cloud",
					"type": "string"
				},
				"description": {
					"description": "Description of Event Definition",
					"type": "string"
				},
				"eventDefinitionKey": {
					"description": "Unique Id for an Event Definition in Marketing Cloud. Don't include special characters.",
					"type": "string"
				},
				"sourceApplicationExtensionId": {
					"description": "A link to the application extension that defines the configuration screens for this type. Journey Builder uses this ID to filter shared entry sources. For example, for the Event Definition to be visible in the Existing Entry sources panel in the UI, this field needs to be populated. To obtain this value, perform a GET eventDefinition on similar events in Journey Builder.",
					"type": "string"
				},
				"dataExtensionId": {
					"description": "The ID for the data extension associated with the event. Events fired from the API write to this data extension.",
					"type": "string"
				}
			}
		},
		"RequestPostCreateInteraction": {
			"type": "object",
			"required": [
				"key",
				"name",
				"workflowApiVersion"
			],
			"properties": {
				"key": {
					"description": "The customer key as a GUID (UUID) to be used while referencing this journey",
					"type": "string"
				},
				"name": {
					"description": "The name of this journey",
					"type": "string"
				},
				"description": {
					"description": "A description of this journey",
					"type": "string"
				},
				"workflowApiVersion": {
					"description": "The Journey Spec version to use for this journey. Possible values: 0.5, 1.0.",
					"type": "number"
				},
				"goals": {
					"description": "The goal for this particular journey. Expressed as an object of type ContactDecision from the Journey Spec.",
					"type": "array"
				},
				"triggers": {
					"description": "The trigger for this particular journey. Expressed as an object of type ContactEvent from the Journey Spec.",
					"type": "array"
				},
				"activities": {
					"description": "The activities which compose this particular journey. Expressed as objects of types supported by the Journey Spec.",
					"type": "array"
				}
			}
		},
		"RequestPutUpdateInteraction": {
			"type": "object",
			"required": [
				"key",
				"name",
				"workflowApiVersion",
				"version"
			],
			"properties": {
				"key": {
					"description": "The user-defined Key for the journey to update",
					"type": "string"
				},
				"name": {
					"description": "The name of this journey",
					"type": "string"
				},
				"workflowApiVersion": {
					"description": "The Journey Spec version to use for this journey. Possible values: 0.5, 1.0.",
					"type": "number"
				},
				"version": {
					"description": "The version of this journey",
					"type": "number"
				},
				"id": {
					"description": "The GUID (UUID) to be used while referencing this journey.",
					"type": "string"
				},
				"modifiedDate": {
					"description": "This field must match the current Database value from Marketing Cloud or the request will be rejected. You are not actually updating this field; it is used in mapping to the correct version of this journey",
					"type": "string"
				},
				"description": {
					"description": "A description of this journey",
					"type": "string"
				},
				"goals": {
					"description": "The goal for this particular journey. Expressed as an object of type ContactDecision from the Journey Spec.",
					"type": "array"
				},
				"triggers": {
					"description": "The trigger for this particular journey. Expressed as an object of type ContactEvent from the Journey Spec.",
					"type": "array"
				},
				"activities": {
					"description": "The activities which compose this particular journey. Expressed as objects of types supported by the Journey Spec",
					"type": "array"
				}
			}
		},
		"RequestGetInteractions": {
			"type": "object",
			"required": [],
			"properties": {
				"key": {
					"description": "The user-defined key for a specific journey to retrieve",
					"type": "string"
				},
				"id": {
					"description": "The GUID (UUID) for a specific journey to retrieve. The ID returns all versions of that journey.",
					"type": "string"
				}
			}
		},
		"RequestPostMessageAppSend": {
			"type": "object",
			"required": [],
			"properties": {
				"override": {
					"description": "A flag indicating the contact is to receive the messageText as provided instead of the message's original text.",
					"type": "boolean"
				},
				"messageText": {
					"description": "The text value to be used in place of the message's original text. This field is required when override is true.",
					"type": "string"
				},
				"title": {
					"description": "The title to be used in place of the message's original title.",
					"type": "string"
				},
				"subtitle": {
					"description": "The subtitle to be used in place of the message's original subtitle.",
					"type": "string"
				},
				"mutable-content": {
					"description": "If true, rich push functionality is enabled for the message.",
					"type": "boolean"
				},
				"sendTime": {
					"description": "Date formatted yyyy-MM-dd HH:mm specifying a time in the future to send the message.",
					"type": "date"
				},
				"blackoutWindow": {
					"description": "Blackout window definition used to delay message sending outside a given windowStart and windowEnd and utcOffset.",
					"type": "string"
				},
				"sound": {
					"description": "Sound filename to be played on the device.",
					"type": "string"
				},
				"badge": {
					"description": "For iOS SDK version 4.9.5 and newer: Overrides the value on the push message definition. Badge count displays this number in a badge on the app and increments this number by one for each new unread message. For older iOS SDK versions: Overrides the value on the push message definition. Badge count does not increment.",
					"type": "string"
				},
				"openDirect": {
					"description": "Value used as the open direct destination",
					"type": "string"
				},
				"customPayload": {
					"description": "Custom definition in escaped JSON.",
					"type": "string"
				},
				"customKeys": {
					"description": "An array of key/value pairs used as custom keys to be sent with the message request body.",
					"type": "array"
				}
			}
		},
		"RequestPostMessageListSend": {
			"type": "object",
			"required": [
				"inclusionListIds"
			],
			"properties": {
				"inclusionListIds": {
					"description": "An array of one or more contact list ids to include in send",
					"type": "array"
				},
				"exclusionListIds": {
					"description": "An array of one or more contact list ids to exclude in send",
					"type": "array"
				},
				"InclusionDataExtensionIds": {
					"description": "An array of one or more data extension External Keys to include in send",
					"type": "array"
				},
				"ExclusionDataExtensionIds": {
					"description": "An array of one or more data extension External Keys to exclude in send",
					"type": "array"
				},
				"override": {
					"description": "Flag to indicate that the contact is to receive the messageText as provided instead of the message's original text",
					"type": "boolean"
				},
				"messageText": {
					"description": "The text value to be used in place of the message's original text. This field is required when override is true.",
					"type": "string"
				},
				"title": {
					"description": "The title to be used in place of the message's original title.",
					"type": "string"
				},
				"subtitle": {
					"description": "The subtitle to be used in place of the message's original subtitle.",
					"type": "string"
				},
				"mutable-content": {
					"description": "If true, rich push functionality is enabled for the message.",
					"type": "boolean"
				},
				"sendTime": {
					"description": "Date formatted yyyy-MM-dd HH:mm specifying a time in the future to send the message",
					"type": "date"
				},
				"blackoutWindow": {
					"description": "Blackout window definition used to delay message sending outside a given windowStart and windowEnd and utcOffset",
					"type": "string"
				},
				"sound": {
					"description": "Sound filename to be played on the device",
					"type": "string"
				},
				"badge": {
					"description": "For iOS SDK version 4.9.5 and newer: Overrides the value on the push message definition. Badge count displays this number in a badge on the app and increments this number by one for each new unread message. For older iOS SDK versions: Overrides the value on the push message definition. Badge count does not increment.",
					"type": "string"
				},
				"openDirect": {
					"description": "Value used as the open direct destination",
					"type": "string"
				},
				"customPayload": {
					"description": "Custom definition in escaped JSON",
					"type": "string"
				},
				"customKeys": {
					"description": "An array of key/value pairs used as custom keys to be sent with the message request body",
					"type": "array"
				}
			}
		},
		"RequestPostMessageTagSend": {
			"type": "object",
			"required": [
				"inclusionTags"
			],
			"properties": {
				"inclusionTags": {
					"description": "Tags used to identify contacts that will receive the message",
					"type": "array"
				},
				"exclusionTags": {
					"description": "Tags used to identify contacts that will not receive the message",
					"type": "array"
				},
				"override": {
					"description": "Flag to indicate that the contact is to receive the messageText as provided instead of the message's original text",
					"type": "boolean"
				},
				"messageText": {
					"description": "Text value to be used in place of the message's original text. This value is required when override is true.",
					"type": "boolean"
				},
				"title": {
					"description": "The title to be used in place of the message's original title.",
					"type": "string"
				},
				"subtitle": {
					"description": "The subtitle to be used in place of the message's original subtitle.",
					"type": "string"
				},
				"mutable-content": {
					"description": "If true, rich push functionality is enabled for the message.",
					"type": "boolean"
				},
				"sendTime": {
					"description": "Date formatted yyyy-MM-dd HH:mm specifying a time in the future to send the message",
					"type": "date"
				},
				"blackoutWindow": {
					"description": "Blackout window definition used to delay message sending outside a given windowStart and windowEnd and utcOffset",
					"type": "string"
				},
				"sound": {
					"description": "Sound filename to be played on the device",
					"type": "string"
				},
				"badge": {
					"description": "For iOS SDK version 4.9.5 and newer: Overrides the value on the push message definition. Badge count displays this number in a badge on the app and increments this number by one for each new unread message. For older iOS SDK versions: Overrides the value on the push message definition. Badge count does not increment.",
					"type": "string"
				},
				"openDirect": {
					"description": "Value used as the open direct destination",
					"type": "string"
				},
				"customPayload": {
					"description": "Custom definition in escaped JSON",
					"type": "string"
				},
				"customKeys": {
					"description": "An array of key/value pairs used as custom keys to be sent with the message request body",
					"type": "array"
				}
			}
		},
		"RequestPostMessageContactSend": {
			"type": "object",
			"required": [
				"mobileNumbers"
			],
			"properties": {
				"mobileNumbers": {
					"description": "An array of one or more mobile numbers",
					"type": "array"
				},
				"Subscribers": {
					"description": "Array of up to 250 subscriber records where the message is sent to. Subscribers is different from mobileNumbers because it allows you to specify a SubscriberKey value and the mobile number as the unique identifier for that record.",
					"type": "array"
				},
				"Subscribers.MobileNumber": {
					"description": "Specifies the mobile number used as the unique identifier for that record.",
					"type": "string"
				},
				"Subscribers.SubscriberKey": {
					"description": "Specifies the SubscriberKey value used as the unique identifier for that record.",
					"type": "string"
				},
				"Subscribers.Attributes": {
					"description": "Set real-time attributes for individual personalization strings, per subscriber. The subscriber attribute must match the attribute string in the message. You can pass attributes that are not used as attributes in the message into the SMS send log. The dictionary key is available as a standard replacement string in AMPScript.",
					"type": "array"
				},
				"subscribe": {
					"description": "Flag to indicate a subscription should be created if none exist",
					"type": "boolean"
				},
				"resubscribe": {
					"description": "Flag to indicate a subscription should be reset if currently unsubscribed",
					"type": "boolean"
				},
				"keyword": {
					"description": "The keyword must align with code on message. Required when subscribe and/or resubscribe are true.",
					"type": "string"
				},
				"override": {
					"description": "Flag to indicate that the contact is receive the messageText as provided instead of the message's original text",
					"type": "boolean"
				},
				"messageText": {
					"description": "Text value to be used in place of the message's original text. This value is required when override is true.",
					"type": "string"
				},
				"blackoutWindow": {
					"description": "Details about the window of time where messages should not be sent. Messages initiated inside of this window will be queued and delivered once the window is open.",
					"type": "object"
				},
				"blackoutWindow.UtcOffset": {
					"description": "The UTC offset of the blackout window start and end times. UtcOffset is required in every REST call in order for the blackout window to be honored.",
					"type": "string"
				},
				"blackoutWindow.WindowStart": {
					"description": "The start time of the blackout window, in the UTC offset specified. To see if the SendTime is within the blackout window, convert the WindowStart and WindowEnd times to UTC and compare them to the SendTime.",
					"type": "string"
				},
				"blackoutWindow.WindowEnd": {
					"description": "The end time of the blackout window, in the UTC offset specified. To see if the SendTime is within the blackout window, convert the WindowStart and WindowEnd times to UTC and compare them to the SendTime.",
					"type": "string"
				},
				"SendTime": {
					"description": "Date and Time in UTC that the message will go out. Example format: 2012-10-17 17:01. The blackoutWindow will still be respected if used with this option. If you attempt to send during the blackoutWindow, the message is scheduled to send one second after the blackout window ends. If the SendTime is set to a date and time in the past, the message will send immediately.",
					"type": "UTC Time"
				},
				"ContentURL": {
					"description": "The URL of the media content sent via an MMS message.",
					"type": "string"
				}
			}
		},
		"RequestPostMessageBatch": {
			"type": "object",
			"required": [
				"deviceTokens",
				"subscriberKeys",
				"message",
				"message.alert"
			],
			"properties": {
				"deviceTokens": {
					"description": "Device tokens of the mobile devices that will receive the message. Required if subscriberKeys are not set.",
					"type": "array"
				},
				"subscriberKeys": {
					"description": "Subscriber keys of the mobile devices that will receive the message. Required if deviceTokens are not set.",
					"type": "array"
				},
				"inclusionTags": {
					"description": "Tags used to identify contacts that will receive the message",
					"type": "array"
				},
				"exclusionTags": {
					"description": "Tags used to identify contacts that will not receive the message",
					"type": "array"
				},
				"sendTime": {
					"description": "Date formatted yyyy-MM-dd HH:mm specifying a time in the future to send the message",
					"type": "date"
				},
				"message": {
					"description": "Components of the message to include in the send",
					"type": "array"
				},
				"message.alert": {
					"description": "Message text displayed on the mobile device",
					"type": "string"
				},
				"message.sound": {
					"description": "A sound filename to be played on the device",
					"type": "string"
				},
				"message.badge": {
					"description": "For iOS SDK version 4.9.5 and newer: Overrides the value on the push message definition. Badge count displays this number in a badge on the app and increments this number by one for each new unread message. For older iOS SDK versions: Overrides the value on the push message definition. Badge count does not increment.",
					"type": "string"
				},
				"message.openDirect": {
					"description": "Value used as the OpenDirect destination",
					"type": "string"
				},
				"message.custom": {
					"description": "Custom definition in escaped JSON",
					"type": "array"
				},
				"message.keys": {
					"description": "An array of key/value pairs used as custom keys to be sent with the message request body",
					"type": "array"
				},
				"title": {
					"description": "The title to be used in place of the message's original title.",
					"type": "string"
				},
				"subtitle": {
					"description": "The subtitle to be used in place of the message's original subtitle.",
					"type": "string"
				},
				"mutable-content": {
					"description": "If true, rich push functionality is enabled for the message.",
					"type": "boolean"
				}
			}
		},
		"RequestCreatePushMessage": {
			"type": "object",
			"required": [
				"messageType",
				"contentType",
				"name",
				"application",
				"application.id",
				"application.name"
			],
			"properties": {
				"messageType": {
					"description": "Indicates the type of message to create using the following integer values: 1 - Outbound (default), 3 - Location Entry, 4 - Location Exit, 5 - Beacon, 8 - Inbox",
					"type": "integer"
				},
				"contentType": {
					"description": "Indicates the content included within the message using the following integer values: 1 - Alert (default), 2 - Inbox, 3 - Inbox+Alert",
					"type": "integer"
				},
				"name": {
					"description": "Name of the message. Must be 100 or fewer characters. For Content Builder messages, use this format: content name-unique identifier. For example: 'my test content message-0debaa7a11e11b0a00b12345ef384b1z'.",
					"type": "string"
				},
				"application": {
					"description": "App used to send message",
					"type": "array"
				},
				"application.id": {
					"description": "The ID of the application",
					"type": "string"
				},
				"application.name": {
					"description": "The name of the application",
					"type": "string"
				},
				"alert": {
					"description": "Message displayed on the mobile device",
					"type": "string"
				},
				"sound": {
					"description": "Used to override the value on the push message definition. Indicates the sound file to play when the push message arrives on the mobile device. Name must include 100 or less characters.",
					"type": "string"
				},
				"badge": {
					"description": "Available for both iOS and Android. For iOS SDK version 4.9.5 and newer: Overrides the value on the push message definition. Badge count displays this number in a badge on the app and increments this number by one for each new unread message. For older iOS SDK versions: Overrides the value on the push message definition. Badge count does not increment.",
					"type": "integer"
				},
				"content-available": {
					"description": "Integer value indicating the availability of content for an application enabled to use background push. Set this value to 1 to deliver the message as a silent push. This parameter applies only to apps integrated with the background push functionality available in iOS and Android. Note that you can use background push functionality in all apps with iOS 7 and Newsstand apps in iOS 6.",
					"type": "integer"
				},
				"openDirect": {
					"description": "Used to override the value on the push message definition. This value determines the location within the app that an app user views when they open that app via a push message. Assigned values must include 15 or less characters.",
					"type": "string"
				},
				"keys": {
					"description": "Used to override the value on the push message definition. An array of Key/Value pairs that correspond to customer values defined in MobilePush.",
					"type": "array"
				},
				"custom": {
					"description": "Specify the actual request body of the push message to precisely align that request body to your specifications.",
					"type": "array"
				},
				"sendInitiator": {
					"description": "Indicates the method used to initiate the send for a push message using the following integer values: 0 - UI-based send, 1 - API (default), 2 - Automation, 3 - Journey Builder",
					"type": "integer"
				},
				"startDate": {
					"description": "Date and time when the message becomes available for sends. Uses a default value of the message creation time.",
					"type": "date"
				},
				"endDate": {
					"description": "Date and time when the message is no longer available for sends. This optional parameter applies only to messages whose contentType is CloudPage or Alert+CloudPage. endDate must be after startDate.",
					"type": "date"
				},
				"messagesPerPeriod": {
					"description": "Integer value indicating the number of messages that can send during a specified time period to throttle the volume of users responding to the notification. Use only when sendInitiator value equals 0.",
					"type": "integer"
				},
				"minutesPerPeriod": {
					"description": "Integer value indicating the number of minutes included in a specified time period. Use only when sendInitiator value equals 0.",
					"type": "integer"
				},
				"numberOfPeriods": {
					"description": "Indicates the time span of the period using the following integer values: 1 - Year, 2 - Month, 3 - Week, 4 - Day, 5 - Hour",
					"type": "integer"
				},
				"isRollingPeriod": {
					"description": "Boolean value indicating whether the limit resets after a rolling time period window or ends at a specified time",
					"type": "boolean"
				},
				"messageLimit": {
					"description": " Integer values indicating the total number of times a messages displays on a mobile device",
					"type": "integer"
				},
				"title": {
					"description": "The title to be used in place of the message's original title.",
					"type": "string"
				},
				"subtitle": {
					"description": "The subtitle to be used in place of the message's original subtitle. This setting applies only to push notification alerts.",
					"type": "string"
				},
				"mutable-content": {
					"description": "If true, rich push functionality is enabled for the message.",
					"type": "boolean"
				},
				"tzBased": {
					"description": "Boolean value indicating whether a send occurs based on the specified time zone for a mobile device, as reflected in the contact record. To ensure timely delivery for each timezone, make sure that any dependent data extensions and audiences are available to be refreshed up to 14 hours prior to the scheduled send time. Uses a default value of false. Use only when sendInitiator value equals 0.",
					"type": "boolean"
				},
				"tzPastSendAction": {
					"description": "Indicates the action to perform when a time-zone-based send occurs and that send time already passed for some time zones. Uses the following string values: 1 - Send immediately (default), 2 - Send at scheduled time, next day, 3 - Never send",
					"type": "string"
				},
				"scheduleTzOffset": {
					"description": "Integer value indicating the time zone offset. Uses a default value of -6.",
					"type": "integer"
				},
				"scheduledTzSupportsDst": {
					"description": "Boolean value indicating whether the scheduled time zone supports Daylight Savings Time. Uses a default value of false.",
					"type": "boolean"
				},
				"inclusionLists": {
					"description": "Array of list ID values indicating the lists that will receive the send. Use only when sendInitiator value equals 0.",
					"type": "array"
				},
				"exclusionLists": {
					"description": "Array of list ID values indicating the lists excluded from receiving the send. Use only when sendInitiator value equals 0.",
					"type": "array"
				},
				"status": {
					"description": "Indicates the status of the message using the following integer values:: 1 - Draft, 2 - Active (default), 3 - Inactive, 4 - Deleted",
					"type": "integer"
				},
				"pageId": {
					"description": "Integer values indicating the page associated with the message for CloudPage and Alert+CloudPage sends",
					"type": "integer"
				},
				"url": {
					"description": "String value indicating the URL for the page associated with the message for CloudPage and Alert+CloudPage sends",
					"type": "string"
				},
				"subject": {
					"description": "String value indicating the subject line used for the message",
					"type": "string"
				},
				"media": {
					"description": "Rich media to include in the message",
					"type": "array"
				},
				"media.androidUrl": {
					"description": "URL for the media to send to Android devices",
					"type": "string"
				},
				"media.iosUrl": {
					"description": "URL for the media to send to iOS devices",
					"type": "string"
				},
				"media.alt": {
					"description": "Text to display if the message cannot include the specified rich media",
					"type": "string"
				},
				"geofences": {
					"description": "Array of string values indicating the geofences associated with the message send. Use only when sendInitiator value equals 1.",
					"type": "array"
				}
			}
		},
		"RequestUpdatePushMessage": {
			"type": "object",
			"required": [],
			"properties": {
				"messageType": {
					"description": "Indicates the type of message to create using the following integer values: 1 - Outbound (default), 3 - Location Entry, 4 - Location Exit",
					"type": "integer"
				},
				"contentType": {
					"description": "Indicates the content included within the message using the following integer values: 1 - Alert (default), 2 - CloudPage, 3 - Alert+CloudPage",
					"type": "integer"
				},
				"name": {
					"description": "String value indicating the name of the message. Must use 100 or less characters.",
					"type": "string"
				},
				"application": {
					"description": "App used to send message",
					"type": "array"
				},
				"application.id": {
					"description": "The ID of the application",
					"type": "string"
				},
				"application.name": {
					"description": "The name of the application",
					"type": "string"
				},
				"alert": {
					"description": "Message displayed on the mobile device",
					"type": "string"
				},
				"sound": {
					"description": "Used to override the value on the push message definition. Indicates the sound file to play when the push message arrives on the mobile device. Name must include 100 or less characters.",
					"type": "string"
				},
				"badge": {
					"description": "For iOS SDK version 4.9.5 and newer: Overrides the value on the push message definition. Badge count displays this number in a badge on the app and increments this number by one for each new unread message. For older iOS SDK versions: Overrides the value on the push message definition. Badge count does not increment.",
					"type": "integer"
				},
				"content-available": {
					"description": "Integer value indicating the availability of content for an application enabled to use background push. Set this value to 1 to indicate available content. This parameter applies only to apps integrated with the background push functionality available in iOS. Note that you can use background push functionality in all apps with iOS 7 and Newsstand apps in iOS 6.",
					"type": "integer"
				},
				"openDirect": {
					"description": "Used to override the value on the push message definition. This value determines the location within the app that an app user views when they open that app via a push message. Assigned values must include 15 or less characters.",
					"type": "string"
				},
				"keys": {
					"description": "Used to override the value on the push message definition. An array of Key/Value pairs that correspond to customer values defined in MobilePush.",
					"type": "array"
				},
				"custom": {
					"description": "Specify the actual request body of the push message to precisely align that request body to your specifications.",
					"type": "array"
				},
				"sendInitiator": {
					"description": "Indicates the method used to initiate the send for a push message using the following integer values: 0 - UI-based send, 1 - API (default), 2 - Automation, 3 - Journey Builder",
					"type": "integer"
				},
				"startDate": {
					"description": "Date value indicating the time when the message becomes available for sends. Uses a default value of the message creation time.",
					"type": "date"
				},
				"messagesPerPeriod": {
					"description": "Integer value indicating the number of messages that can send during a specified time period. Use only when sendInitiator value equals 0.",
					"type": "integer"
				},
				"minutesPerPeriod": {
					"description": "Integer value indicating the number of minutes included in a specified time period. Use only when sendInitiator value equals 0.",
					"type": "integer"
				},
				"numberOfPeriods": {
					"description": "Indicates the time span of the period using the following integer values: 1 - Year, 2 - Month, 3 - Week, 4 - Day, 5 - Hour",
					"type": "integer"
				},
				"isRollingPeriod": {
					"description": "Boolean value indicating whether the limit resets after a rolling time period window or ends at a specified time",
					"type": "boolean"
				},
				"messageLimit": {
					"description": " Integer values indicating the total number of times a messages displays on a mobile device",
					"type": "integer"
				},
				"title": {
					"description": "The title to be used in place of the message's original title.",
					"type": "string"
				},
				"subtitle": {
					"description": "The subtitle to be used in place of the message's original subtitle.",
					"type": "string"
				},
				"mutable-content": {
					"description": "If true, rich push functionality is enabled for the message.",
					"type": "boolean"
				},
				"tzBased": {
					"description": "Boolean value indicating whether a send occurs based on the specified time zone for a mobile device. Uses a default value of false. Use only when sendInitiator value equals 0.",
					"type": "boolean"
				},
				"tzPastSendAction": {
					"description": "Indicates the action to perform when a time-zone-based send occurs and that send time already passed for some time zones. Uses the following string values: 1 - Send immediately (default), 2 - Send at scheduled time, next day, 3 - Never send",
					"type": "string"
				},
				"scheduleTzOffset": {
					"description": "Integer value indicating the time zone offset. Uses a default value of -6.",
					"type": "integer"
				},
				"scheduledTzSupportsDst": {
					"description": "Boolean value indicating whether the scheduled time zone supports Daylight Savings Time. Uses a default value of false.",
					"type": "boolean"
				},
				"inclusionLists": {
					"description": "Array of list ID values indicating the lists that will receive the send. Use only when sendInitiator value equals 0.",
					"type": "array"
				},
				"exclusionLists": {
					"description": "Array of list ID values indicating the lists excluded from receiving the send. Use only when sendInitiator value equals 0.",
					"type": "array"
				},
				"status": {
					"description": "Indicates the status of the message using the following integer values: 1 - Draft, 2 - Active (default), 3 - Inactive, 4 - Deleted",
					"type": "integer"
				},
				"pageId": {
					"description": "Integer values indicating the page associated with the message for CloudPage and Alert+CloudPage sends",
					"type": "integer"
				},
				"url": {
					"description": "String value indicating the URL for the page associated with the message for CloudPage and Alert+CloudPage sends",
					"type": "string"
				},
				"subject": {
					"description": "String value indicating the subject line used for the message",
					"type": "string"
				},
				"geofences": {
					"description": "Array of string values indicating the geofences associated with the message send. Use only when sendInitiator value equals 0.",
					"type": "array"
				}
			}
		},
		"RequestCreateDefinition": {
			"type": "object",
			"required": [
				"EmailDefinition",
				"EmailDefinition.Name",
				"EmailDefinition.EmailId",
				"EmailDefinition.SendClassificationId",
				"EmailDefinition.Targets",
				"Schedule.AllRecipientsOptedIn"
			],
			"properties": {
				"EmailDefinition": {
					"description": "Contains all required and optional information needed to build the email definition",
					"type": "object"
				},
				"EmailDefinition.Name": {
					"description": "Name of the send definition",
					"type": "string"
				},
				"EmailDefinition.ExternalKey": {
					"description": "External key, will be auto-generated if not included",
					"type": "string"
				},
				"EmailDefinition.Description": {
					"description": "Description of the send definition",
					"type": "string"
				},
				"EmailDefinition.EmailId": {
					"description": "Id of the email for this send definition",
					"type": "number"
				},
				"EmailDefinition.EmailSubject": {
					"description": "Email subject, auto-populated from email",
					"type": "string"
				},
				"EmailDefinition.SendClassificationId": {
					"description": "Send classification Id for this send definition",
					"type": "number"
				},
				"EmailDefinition.OverrideSenderProfileId": {
					"description": "Sender profile to use instead of the default within the send classification",
					"type": "number"
				},
				"EmailDefinition.OverrideDeliveryProfileId": {
					"description": "Delivery profile to use instead of the default within the send classification",
					"type": "number"
				},
				"EmailDefinition.Bcc": {
					"description": "BCC email addresses",
					"type": "string"
				},
				"EmailDefinition.CC": {
					"description": "CC email addresses",
					"type": "string"
				},
				"EmailDefinition.IsMultipartMIME": {
					"description": "Defaults to true",
					"type": "boolean"
				},
				"EmailDefinition.UseSendLogging": {
					"description": "Defaults to false",
					"type": "boolean"
				},
				"EmailDefinition.SupressFromReports": {
					"description": "Defaults to false",
					"type": "boolean"
				},
				"EmailDefinition.RequestIntegratedTracking": {
					"description": "Defaults to true",
					"type": "boolean"
				},
				"EmailDefinition.TrackingFolderId": {
					"description": "Folder where tracking will be stored. Defaults to 0 - My tracking.",
					"type": "number"
				},
				"EmailDefinition.DedupeByEmail": {
					"description": "Defaults to false",
					"type": "boolean"
				},
				"EmailDefinition.SeedList": {
					"description": "Contains seedlist values: <ul><li>IsSeedListSend (boolean)</li><li>SeedListOccurance (number)</li></ul>",
					"type": "object"
				},
				"EmailDefinition.SendThrottling": {
					"description": "Contains throttling values: <ul><li>ThrottleOpens (string) - DateTime to start throttling.</li><li>ThrottleCloses (string) - DateTime to end throttling.</li><li>ThrottleLimit (number) - Maximum sends per period.</li></ul>",
					"type": "object"
				},
				"EmailDefinition.Targets": {
					"description": "Contains the following values: <ul><li>Type (string, required) - Report or Campaign.</li><li>Name (string, required) - Name of the Report or Campaign.</li><li>Id (string) - Id of the object of the specified type.</li></ul> If SalesforceDataExtension is included, only targets and exclusions of the same type are allowed.",
					"type": "object"
				},
				"EmailDefinition.Exclusions": {
					"description": "Contains the following values: <ul><li>Type (string, required) - Report or Campaign.</li><li>Name (string, required) - Name of the Report or Campaign.</li><li>Id (string) - Id of the object of the specified type.</li></ul> If SalesforceDataExtension is included, only targets and exclusions of the same type are allowed.",
					"type": "object"
				},
				"Schedule": {
					"description": "If included, the API will attempt to schedule the send after creating it.",
					"type": "object"
				},
				"Schedule.StartImmediately": {
					"description": "Schedule the send immediately",
					"type": "boolean"
				},
				"Schedule.StartDateTime": {
					"description": "If StartImmediately is false, set the date and time the send should start.",
					"type": "string"
				},
				"Schedule.AllRecipientsOptedIn": {
					"description": "Must be set to true or the send will not be scheduled. This states that all the subscribers with the definition have opted in to your send.",
					"type": "boolean"
				}
			}
		},
		"RequestSearchDefinitions": {
			"type": "object",
			"required": [
				"Criteria"
			],
			"properties": {
				"Criteria": {
					"description": "Search criteria. None of the options are required, but either Name or SubscriberListId needs to be populated.",
					"type": "object"
				},
				"Criteria.Operation": {
					"description": "Search operator, 'and' or 'or'. If an operation is not specified, it defaults to 'or'.",
					"type": "string"
				},
				"Criteria.Name": {
					"description": "Search string, where the string represents the name of the definition.",
					"type": "string"
				},
				"Criteria.SubscriberListId": {
					"description": "Id for either target or exclusion",
					"type": "string"
				}
			}
		},
		"RequestUpdateDefinitionById": {
			"type": "object",
			"required": [
				"EmailDefinition"
			],
			"properties": {
				"EmailDefinition": {
					"description": "Contains all required and optional information needed to build the email definition",
					"type": "object"
				},
				"EmailDefinition.Name": {
					"description": "Name of the send definition",
					"type": "string"
				},
				"EmailDefinition.ExternalKey": {
					"description": "External key, will be auto-generated if not included",
					"type": "string"
				},
				"EmailDefinition.Description": {
					"description": "Description of the send definition",
					"type": "string"
				},
				"EmailDefinition.EmailId": {
					"description": "Id of the email for this send definition",
					"type": "number"
				},
				"EmailDefinition.EmailSubject": {
					"description": "Email subject, auto-populated from email",
					"type": "string"
				},
				"EmailDefinition.SendClassificationId": {
					"description": "Send classification Id for this send definition",
					"type": "number"
				},
				"EmailDefinition.OverrideSenderProfileId": {
					"description": "Sender profile to use instead of the default within the send classification",
					"type": "number"
				},
				"EmailDefinition.OverrideDeliveryProfileId": {
					"description": "Delivery profile to use instead of the default within the send classification",
					"type": "number"
				},
				"EmailDefinition.Bcc": {
					"description": "BCC email addresses",
					"type": "string"
				},
				"EmailDefinition.CC": {
					"description": "CC email addresses",
					"type": "string"
				},
				"EmailDefinition.IsMultipartMIME": {
					"description": "Defaults to true",
					"type": "boolean"
				},
				"EmailDefinition.UseSendLogging": {
					"description": "Defaults to false",
					"type": "boolean"
				},
				"EmailDefinition.SupressFromReports": {
					"description": "Defaults to false",
					"type": "boolean"
				},
				"EmailDefinition.RequestIntegratedTracking": {
					"description": "Defaults to true",
					"type": "boolean"
				},
				"EmailDefinition.TrackingFolderId": {
					"description": "Folder where tracking will be stored. Defaults to 0 - My tracking.",
					"type": "number"
				},
				"EmailDefinition.DedupeByEmail": {
					"description": "Defaults to false",
					"type": "boolean"
				},
				"EmailDefinition.SeedList": {
					"description": "Contains seedlist values: <ul><li>IsSeedListSend (boolean)</li><li>SeedListOccurance (number)</li></ul>",
					"type": "object"
				},
				"EmailDefinition.SendThrottling": {
					"description": "Contains throttling values: <ul><li>ThrottleOpens (string) - DateTime to start throttling.</li><li>ThrottleCloses (string) - DateTime to end throttling.</li><li>ThrottleLimit (number) - Maximum sends per period.</li></ul>",
					"type": "object"
				},
				"EmailDefinition.Targets": {
					"description": "Contains the following values: <ul><li>Type (string, required) - Report or Campaign.</li><li>Name (string, required) - Name of the Report or Campaign.</li><li>Id (string) - Id of the object of the specified type.</li></ul> If SalesforceDataExtension is included, only targets and exclusions of the same type are allowed.",
					"type": "object"
				},
				"EmailDefinition.Exclusions": {
					"description": "Contains the following values: <ul><li>Type (string, required) - Report or Campaign.</li><li>Name (string, required) - Name of the Report or Campaign.</li><li>Id (string) - Id of the object of the specified type.</li></ul> If SalesforceDataExtension is included, only targets and exclusions of the same type are allowed.",
					"type": "object"
				}
			}
		},
		"RequestScheduleSend": {
			"type": "object",
			"required": [
				"Schedule",
				"Schedule.AllRecipientsOptedIn"
			],
			"properties": {
				"Schedule": {
					"description": "Object containing values related to scheduling the send",
					"type": "object"
				},
				"Schedule.StartImmediately": {
					"description": "Schedule the send immediately",
					"type": "boolean"
				},
				"Schedule.StartDateTime": {
					"description": "If StartImmediately is false, set the date and time the send should start.",
					"type": "string"
				},
				"Schedule.AllRecipientsOptedIn": {
					"description": "Must be set to true or the send will not be scheduled. This states that all the subscribers with the definition have opted in to your send.",
					"type": "boolean"
				}
			}
		},
		"RequestImportSend": {
			"type": "object",
			"required": [
				"messageId",
				"keyword",
				"importDefinition"
			],
			"properties": {
				"messageId": {
					"description": "Encoded message Id",
					"type": "string"
				},
				"keyword": {
					"description": "A valid keyword on the shortcode for the message to opt the numbers on to",
					"type": "string"
				},
				"notificationEmail": {
					"description": "If specified, email notifications will be sent on import and program completion",
					"type": "string"
				},
				"override": {
					"description": "Flag to indicate whether the override text should be used",
					"type": "boolean"
				},
				"overrideText": {
					"description": "Text to override the existing message.",
					"type": " string"
				},
				"isDuplicationAllowed": {
					"description": "If true, duplicate messages may be sent",
					"type": "boolean"
				},
				"isVisible": {
					"description": "If specified true, the import definition and list created will be visible",
					"type": "boolean"
				},
				"importDefinition": {
					"description": "List of Import Definitions to be created (currently limited to 1)",
					"type": "string"
				}
			}
		},
		"RequestPostMessageContactSendPush": {
			"type": "object",
			"required": [],
			"properties": {
				"inclusionTags": {
					"description": "Tags used to identify contacts that will receive the message",
					"type": "array"
				},
				"exclusionTags": {
					"description": "Tags used to identify contacts that will not receive the message",
					"type": "array"
				},
				"deviceTokens": {
					"description": "The device tokens of the mobile devices that will receive the message (5000 max.). This value is required if subscriberKeys are not set.",
					"type": "array"
				},
				"subscriberKeys": {
					"description": "The subscriber keys of the mobile devices that will receive the message (5000 max.). This value is required if deviceTokens are not set.",
					"type": "array"
				},
				"override": {
					"description": "If true, the contact receives the messageText, title, and subtitle as provided instead of the message's original text.",
					"type": "boolean"
				},
				"messageText": {
					"description": "The text value to be used in place of the message's original text. This value is required if deviceTokens are not set.",
					"type": "string"
				},
				"title": {
					"description": "The title to be used in place of the message's original title.",
					"type": "string"
				},
				"subtitle": {
					"description": "The subtitle to be used in place of the message's original subtitle.",
					"type": "string"
				},
				"mutable-content": {
					"description": "If true, rich push functionality is enabled for the message.",
					"type": "boolean"
				},
				"sendTime": {
					"description": "Date formatted yyyy-MM-dd HH:mm specifying a time in the future to send the message, referencing UTC-6.",
					"type": "date"
				},
				"blackoutWindow": {
					"description": "Blackout window definition used to delay message sending outside a given windowStart and windowEnd and utcOffset.",
					"type": "string"
				},
				"MessageCategory": {
					"description": "Used to specify the Interactive Notification category for a given send. Sending a messageCategory triggers the mobile device to the display buttons the application has defined and associated with that category name. Each Push application can have one or more categories.",
					"type": "object"
				},
				"MessageCategory.Name": {
					"description": "A name is required when including the MessageCategory object.",
					"type": "string"
				},
				"sound": {
					"description": "Sound filename to be played on the device",
					"type": "string"
				},
				"badge": {
					"description": "For iOS SDK version 4.9.5 and newer: Overrides the value on the push message definition. Badge count displays this number in a badge on the app and increments this number by one for each new unread message. For older iOS SDK versions: Overrides the value on the push message definition. Badge count does not increment.",
					"type": "string"
				},
				"openDirect": {
					"description": "Value used as the open direct destination",
					"type": "string"
				},
				"customPayload": {
					"description": "Custom definition in escaped JSON.",
					"type": "string"
				},
				"customKeys": {
					"description": "An array of key/value pairs used as custom keys to be sent with the message request body",
					"type": "array"
				},
				"content-available": {
					"description": "Indicates the availability of content for an application enabled to use silent push. Set this value to 1 to indicate available content. This parameter applies only to apps integrated with the background push functionality available in iOS.",
					"type": "integer"
				}
			}
		},
		"RequestPostMessageList": {
			"type": "object",
			"required": [],
			"properties": {
				"TargetListIds": {
					"description": "A list of one or more List ID strings. The contacts in these Lists will be included in the send and will overwrite the Message’s default inclusion lists.",
					"type": "array"
				},
				"OverrideTemplateTargetLists": {
					"description": "A flag indicating TargetListIds will be provided for overriding the message default Target List Ids",
					"type": "string"
				},
				"ExclusionListIds": {
					"description": "A list of one or more List ID strings. The contacts in these Lists will be excluded in the send and will overwrite the Message’s default exclusion lists.",
					"type": "array"
				},
				"IgnoreExclusionLists": {
					"description": " A flag indicating that exclusion lists (even the default message exclusion lists) will not be used in the send",
					"type": "boolean"
				},
				"OverrideMessageText": {
					"description": "A flag indicating that the text provided should override the text stored with the Message",
					"type": "string"
				},
				"MessageText": {
					"description": "Required when OverrideMessageText is true",
					"type": "string"
				},
				"blackoutWindow": {
					"description": "Details about the window of time where messages should not be sent. Messages initiated inside of this window will be queued and delivered once the window is open.",
					"type": "object"
				},
				"blackoutWindow.UtcOffset": {
					"description": "The UTC offset of the blackout window start and end times. UtcOffset is required in every REST call in order for the blackout window to be honored.",
					"type": "string"
				},
				"blackoutWindow.WindowStart": {
					"description": "The start time of the blackout window, in the UTC offset specified. To see if the SendTime is within the blackout window, convert the WindowStart and WindowEnd times to UTC and compare them to the SendTime",
					"type": "string"
				},
				"blackoutWindow.WindowEnd": {
					"description": "The end time of the blackout window, in the UTC offset specified. To see if the SendTime is within the blackout window, convert the WindowStart and WindowEnd times to UTC and compare them to the SendTime",
					"type": "string"
				},
				"sendTime": {
					"description": "Date and Time in UTC that the message will go out. Example format: 2012-10-17 17:01. The BlackoutWindow will still be respected if used with this option. If the SendTime is set to a date and time in the past, the message will send immediately.",
					"type": "date"
				},
				"allowDuplication": {
					"description": "The same mobile number may receive multiple texts if this value is true",
					"type": "boolean"
				},
				"ContentURL": {
					"description": "The URL of the media content sent via an MMS message",
					"type": "string"
				}
			}
		},
		"RequestPostQueueMO": {
			"type": "object",
			"required": [
				"mobileNumbers",
				"subscribers",
				"shortCode",
				"messageText"
			],
			"properties": {
				"mobileNumbers": {
					"description": "An array of mobile numbers used in the send. Either the mobileNumbers or subscribers property is required, but not both.",
					"type": "array"
				},
				"subscribers": {
					"description": "An array of subscriber keys and mobile numbers used in the send. Either the mobileNumbers or subscribers property is required, but not both.",
					"type": "array"
				},
				"shortCode": {
					"description": "The short code",
					"type": "string"
				},
				"messageText": {
					"description": "The text value",
					"type": "string"
				}
			}
		},
		"RequestQueueContactImport": {
			"type": "object",
			"required": [],
			"properties": {
				"shortCode": {
					"description": "The short code",
					"type": "string"
				},
				"keyword": {
					"description": "The keyword",
					"type": "string"
				},
				"sendEmailNotification": {
					"description": "Send email notification",
					"type": "boolean"
				},
				"emailAddress": {
					"description": "Email address the notification goes to",
					"type": "string"
				},
				"importMappingType": {
					"description": "Field mapping type",
					"type": "string"
				},
				"fileName": {
					"description": "The name of the file, including extensions",
					"type": "string"
				},
				"fileType": {
					"description": "The only type supported is csv",
					"type": "string"
				},
				"isFirstRowHeader": {
					"description": "Flag indicating whether or not the first row is the header",
					"type": "boolean"
				},
				"fieldMaps": {
					"description": "List of field maps includes destination, ordinal, and source",
					"type": "array"
				}
			}
		},
		"RequestCreateKeyword": {
			"type": "object",
			"required": [],
			"properties": {
				"longCode": {
					"description": "The long code that the keyword will be created on",
					"type": "string"
				},
				"shortCode": {
					"description": "The short code that the keyword will be created on",
					"type": "string"
				},
				"keyword": {
					"description": "The keyword that will be created",
					"type": "string"
				},
				"countryCode": {
					"description": "The two letter country code specifying the country that short code belongs to",
					"type": "string"
				}
			}
		},
		"RequestCreateMessage": {
			"type": "object",
			"required": [],
			"properties": {
				"longCode": {
					"description": "The long code for which you create and associate the message. You must not specify a CountryCode when using a LongCode.",
					"type": "string"
				},
				"shortCode": {
					"description": "The short code for which you create and associate the message. You must specify a countryCode when using a ShortCode.",
					"type": "string"
				},
				"messageText": {
					"description": "The text included within the SMS message",
					"type": "string"
				},
				"messageName": {
					"description": "The name of the message (must contain less than 50 characters)",
					"type": "string"
				},
				"countryCode": {
					"description": "The two letter country code specifying the country that short code belongs to",
					"type": "string"
				}
			}
		},
		"RequestImportSendDeliveryReport": {
			"type": "object",
			"required": [
				"fileName"
			],
			"properties": {
				"fileName": {
					"description": "The name of the report file in your FTP/reports folder",
					"type": "string"
				}
			}
		},
		"RequestContactsSubscriptions": {
			"type": "object",
			"required": [],
			"properties": {
				"mobileNumber": {
					"description": "An array of mobile numbers",
					"type": "string"
				},
				"subscriberKey": {
					"description": "An array of subscriber keys",
					"type": "string"
				}
			}
		},
		"RequestMessageListDeliveryReport": {
			"type": "object",
			"required": [
				"fileName"
			],
			"properties": {
				"fileName": {
					"description": "The name of the report file in your FTP/reports folder",
					"type": "string"
				}
			}
		},
		"RequestCreateMessageOutbound": {
			"type": "object",
			"required": [],
			"properties": {
				"messageName": {
					"description": "The name of the message that is being created",
					"type": "string"
				},
				"messageText": {
					"description": "The message that will be sent out",
					"type": "string"
				},
				"longCode": {
					"description": "The long code that the message will be created on",
					"type": "string"
				},
				"shortCode": {
					"description": "The short code that the message will be created on",
					"type": "string"
				},
				"countryCode": {
					"description": "The two letter country code specifying the country that short code belongs to",
					"type": "string"
				}
			}
		},
		"RequestDeleteKeywordViaKeywordLongCode": {
			"type": "object",
			"required": [],
			"properties": {
				"keyword": {
					"description": "The keyword that will be deleted",
					"type": "string"
				},
				"longCode": {
					"description": "The long code of the keyword that will be deleted",
					"type": "string"
				}
			}
		},
		"RequestDeleteKeywordViaKeywordShortCodeCountryCode": {
			"type": "object",
			"required": [],
			"properties": {
				"keyword": {
					"description": "The keyword that will be deleted",
					"type": "string"
				},
				"shortCode": {
					"description": "The short code of the keyword that will be deleted",
					"type": "string"
				},
				"countryCode": {
					"description": "The two letter country code specifying the country that short code belongs to",
					"type": "string"
				}
			}
		},
		"RequestCreateMessageOptin": {
			"type": "object",
			"required": ["messageName", "keyword", "messageOptInType", "optinErrorMessage", "startDate", "endDate"],
			"properties": {
				"longCode": {
					"description": "Long code that the message will be created on. Either long code or short code is required.",
					"type": "string"
				},
				"shortCode": {
					"description": "Short code that the message will be created on. Either long code or short code is required.",
					"type": "string"
				},
				"messageName": {
					"description": "Name of the message",
					"type": "string"
				},
				"countryCode": {
					"description": "Two-letter country code specifying the country that the short code belongs to. Required for short code.",
					"type": "string"
				},
				"keyword": {
					"description": "Keyword to which users are subscribed",
					"type": "string"
				},
				"messageOptInType": {
					"description": "Opt-in template: Single, Double, or Age. Single opt-in requires users to text one keyword (e.g., JOIN) to opt in. Double opt-in requires users to text in a second keyword (e.g., Y or YES) to confirm opt in. Age means double opt-in with age confirmation. It requires users to text in their age after texting JOIN. If age is above the minimum, the user is opted in.",
					"type": "string"
				},
				"responseMessage": {
					"description": "Response sent to users after they text in the keyword for Single. Required for Single. Not used for Double or Age.",
					"type": "string"
				},
				"doubleOptInInitialMessage": {
					"description": "Response sent to users that asks for confirmation of opt-in (for Double) or for their age (for Age). Required for Double and Age. Not used for Single.",
					"type": "string"
				},
				"doubleOptInConformationMessage": {
					"description": "Response sent to users after they text Y or YES for Double. Required for Double or Age. Not used for Single.",
					"type": "string"
				},
				"doubleOptInValidResponses": {
					"description": "Valid responses that users can text in for Double, such as Y or YES. Required for Double. Not used for Single or Age.",
					"type": "string or comma-separated string"
				},
				"optInInvalidAgeMessage": {
					"description": "Response sent to users whose age is below the minimum. Required for Age. Not used for Single or Double.",
					"type": "string"
				},
				"MinimumAge": {
					"description": "Minimum age that users can text in and be opted in. Required for Age. Not used for Single or Double.",
					"type": "number"
				},
				"allowSingleOptIn": {
					"description": "Determines whether users receive a different response if they are already opted in: True or False.",
					"type": "boolean"
				},
				"duplicateOptInMessage": {
					"description": "Response sent to users who are already opted in",
					"type": "string"
				},
				"optinErrorMessage": {
					"description": "Response sent to users if an error occurred while opting them in",
					"type": "string"
				},
				"startDate": {
					"description": "Date the message becomes active",
					"type": "date"
				},
				"endDate": {
					"description": "Date the message becomes inactive. If users try to opt in to an inactive message, they receive the default keyword response for the code or the new message that the keyword has been set up for.",
					"type": "date"
				},
				"NextKeyword": {
					"description": "Keyword to append to the next message received from users. For example, the NextKeyword is ZIP. After a user texts in JOIN, the response is “Welcome. Please send your zip code.” Users can text in their zip code without using the keyword ZIP.",
					"type": "string"
				}
			}
		},
		"RequestCreateLocation": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"description": "Name of the location",
					"type": "string"
				},
				"location": {
					"description": "Text defining the location; usually a physical or mailing address",
					"type": "string"
				},
				"description": {
					"description": "Description or notes for the location",
					"type": "string"
				},
				"center": {
					"description": "Center point of the location circle",
					"type": "object"
				},
				"center.latitude": {
					"description": "Geographic latitude of the location center",
					"type": "decimal"
				},
				"center.longitude": {
					"description": "Geographic longitude of the location center",
					"type": "decimal"
				},
				"radius": {
					"description": "Radius of the location circle in meters",
					"type": "integer"
				},
				"attributes": {
					"description": "List of attributes for the location",
					"type": "array"
				},
				"attributes.attribute": {
					"description": "Name of the attribute",
					"type": "string"
				},
				"attributes.value": {
					"description": "Value for the attribute",
					"type": "string"
				},
				"locationType": {
					"description": "Indicates whether this is a geofence or beacon location. If not specified, it defaults to geofence. To specify, use 1 for geofence or 3 for beacon.",
					"type": "integer"
				},
				"proximityUuid": {
					"description": "Unique identifier used to distinguish one beacon from another. Required if creating a beacon location. This number is found on the beacon hardware. Enter the UUID exactly as listed.",
					"type": "string"
				},
				"major": {
					"description": "Specifies a particular beacon within a group. Required if creating a beacon location. This number is found on the beacon hardware. Enter this number exactly as listed.",
					"type": "integer"
				},
				"minor": {
					"description": "Groups a related set of beacons. Required if creating a beacon location. This number is found on the beacon hardware. Enter this number exactly as listed.",
					"type": "integer"
				}
			}
		},
		"RequestUpdateLocation": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"description": "Name of the location",
					"type": "string"
				},
				"location": {
					"description": "Text defining the location; usually a phyiscal or mailing address",
					"type": "string"
				},
				"description": {
					"description": "Description or notes for the location",
					"type": "string"
				},
				"center": {
					"description": "Center point of the location circle",
					"type": "object"
				},
				"center.latitude": {
					"description": "Geographic latitude of the location center",
					"type": "decimal"
				},
				"center.longitude": {
					"description": "Geographic longitude of the location center",
					"type": "decimal"
				},
				"radius": {
					"description": "Radius of the location circle in meters",
					"type": "integer"
				},
				"attributes": {
					"description": "List of attributes for the location",
					"type": "array"
				},
				"attributes.attribute": {
					"description": "Name of the attribute",
					"type": "string"
				},
				"attributes.value": {
					"description": "Value for the attribute",
					"type": "string"
				},
				"locationType": {
					"description": "Indicates whether this is a geofence or beacon location. If not specified, it defaults to geofence. To specify, use 1 for geofence or 3 for beacon.",
					"type": "integer"
				},
				"proximityUuid": {
					"description": "Unique identifier used to distinguish one beacon from another. Required if creating a beacon location. This number is found on the beacon hardware. Enter the UUID exactly as listed.",
					"type": "string"
				},
				"major": {
					"description": "Specifies a particular beacon within a group. Required if creating a beacon location. This number is found on the beacon hardware. Enter this number exactly as listed.",
					"type": "integer"
				},
				"minor": {
					"description": "Groups a related set of beacons. Required if creating a beacon location. This number is found on the beacon hardware. Enter this number exactly as listed.",
					"type": "integer"
				}
			}
		},
		"RequestCreateWebhooks": {
			"type": "object",
			"required": [
				"name",
				"callbackUrl",
				"callbackKey",
				"configuration"
			],
			"properties": {
				"name": {
					"description": "Name of the webhook",
					"type": "string"
				},
				"callbackUrl": {
					"description": "Callback URL that is listening for events",
					"type": "string"
				},
				"callbackKey": {
					"description": "External key used to reference the webhook. The callbackKey is used in combination with the secretToken to verify the identity of the webhook.",
					"type": "string"
				},
				"configuration": {
					"description": "Contains FuelMessagingEvents or Triggered SendEvents, or a combination of both",
					"type": "object"
				}
			}
		},
		"RequestVerifyWebhook": {
			"type": "object",
			"required": [
				"id",
				"callbackKey",
				"secretToken"
			],
			"properties": {
				"id": {
					"description": "The ID of the Webhook",
					"type": "string"
				},
				"callbackKey": {
					"description": "External key used to reference the webhook. The callbackKey is used in combination with the secretToken to verify the identity of the webhook.",
					"type": "string"
				},
				"secretToken": {
					"description": "Secret token that was posted to the callbackURL specified when webhook was created",
					"type": "string"
				}
			}
		},
		"ResponseCustomObjectFieldRelationships_200": {
			"type": "object",
			"required": [
				"customobjectFieldId",
				"requestServiceMessageID",
				"resultMessages",
				"serviceMessageID",
				"customObjectFieldRelationships"
			],
			"properties": {
				"customobjectFieldId": {
					"type": "guid",
					"description": "Requested CustomObjectFieldID"
				},
				"requestServiceMessageID": {
					"type": "guid",
					"description": "Service message ID value of the request"
				},
				"resultMessages": {
					"type": "array",
					"description": "Array of returned messages generated while processing the request"
				},
				"serviceMessageID": {
					"type": "guid",
					"description": "Service message ID value of the response"
				},
				"customObjectFieldRelationships": {
					"type": "array",
					"description": "Array of relationship detail for the requested CustomObjectField"
				},
				"customObjectFieldRelationships.attributeInfo": {
					"type": "object",
					"description": "Contact attribute and parent attribute set info of the requested CustomObjectField"
				},
				"customObjectFieldRelationships.attributeInfo.parentAttributeSet": {
					"type": "object",
					"description": "AttributeSet info of the requested CustomObjectField"
				},
				"customObjectFieldRelationships.attributeInfo.parentAttributeSet.definitionID": {
					"type": "guid",
					"description": "Definition ID value of the attribute set that the requested CustomObjectField belongs to"
				},
				"customObjectFieldRelationships.attributeInfo.parentAttributeSet.definitionName": {
					"type": "guid",
					"description": "Definition Name value of the attribute set that the requested CustomObjectField belongs to"
				},
				"customObjectFieldRelationships.attributeInfo.parentAttributeSet.definitionKey": {
					"type": "guid",
					"description": "Customer key value of the attribute set that the requested CustomObjectField belongs to"
				},
				"customObjectFieldRelationships.attributeInfo.AttributeDefinitionEntity": {
					"type": "object",
					"description": "Attribute Info of the requested CustomObjectField"
				},
				"customObjectFieldRelationships.attributeInfo.AttributeDefinitionEntity.definitionID": {
					"type": "guid",
					"description": "Definition ID value of the attribute of the requested CustomObjectField"
				},
				"customObjectFieldRelationships.attributeInfo.AttributeDefinitionEntity.definitionName": {
					"type": "guid",
					"description": "Definition Name value of the attribute of the requested CustomObjectField"
				},
				"customObjectFieldRelationships.attributeInfo.AttributeDefinitionEntity.definitionKey": {
					"type": "guid",
					"description": "Customer key value defined of the attribute of the requested CustomObjectField"
				},
				"customObjectFieldRelationships.attributegroups": {
					"type": "array",
					"description": "Array of AttributeGroups the requested CustomObjectField is associated with"
				},
				"customObjectFieldRelationships.attributegroups.definitionID": {
					"type": "guid",
					"description": "Definition ID value of the attribute group that the requested CustomObjectField belongs to"
				},
				"customObjectFieldRelationships.attributegroups.definitionName": {
					"type": "guid",
					"description": "Definition Name value of the attribute group that the requested CustomObjectField belongs to"
				},
				"customObjectFieldRelationships.attributegroups.definitionKey": {
					"type": "guid",
					"description": "Customer Key value defined for the attribute group that the requested CustomObjectField belongs to"
				}
			}
		},
		"RequestRestrictByContactKeys": {
			"type": "object",
			"required": ["Values"],
			"properties": {
				"Values": {
					"description": "Array of contact key values to restrict.",
					"type": "array"
				}
			}
		},
		"RequestRestrictByContactIDs": {
			"type": "object",
			"required": ["Values"],
			"properties": {
				"Values": {
					"description": "Array of contact IDs to restrict.",
					"type": "array"
				}
			}
		},
		"RequestRestrictByListReference": {
			"type": "object",
			"required": ["ListType",
				"listKey"
			],
			"properties": {
				"targetList": {
					"description": "Object used to identify list. Can include ListType and ListKey objects.",
					"type": "object"
				},
				"targetList.ListType": {
					"description": "Object that includes list type information. Can include listTypeID or ListTypeKey. The only valid value for ListTypeID is 3, indicating a data extension.",
					"type": "object"
				},
				"targetList.listKey": {
					"description": "ID used to identify the list in Marketing Cloud.",
					"type": "string"
				},
				"deleteListWhenCompleted": {
					"description": "Indicates whether to delete the list after requesting it. This option does not apply to lists identified by ID, key, or reference. If this option is true, the process skips lists marked as not deletable, issues a warning, and continues processing remaining lists.",
					"type": "boolean"
				},
				"deleteListContentsWhenCompleted": {
					"description": "Indicates whether to delete the contents of a list after requesting it. This option does not apply to lists identified by ID, key, or reference. If this option is true, the process skips lists marked as not deletable, issues a warning, and continues processing remaining lists.",
					"type": "boolean"
				}
			}
		},
		"RequestCreateCallback": {
			"type": "object",
			"required": [
				"callbackName",
				"url"
			],
			"properties": {
				"callbackName": {
					"description": "Name of the callback.",
					"type": "string"
				},
				"url": {
					"description": "HTTPS URL of the customer callback that receives event notifications in the format `https://host`[/path]. A URL port and query string are not supported. The URL must be syntactically correct and not already registered. If the URL is already registered as a callback, an error occurs.",
					"type": "string"
				},
				"maxBatchSize": {
					"description": "Maximum number of events that this callback can receive in a single call. Must be at least 100 and no more than 1,000. Default is 1,000.",
					"type": "integer"
				}
			}
		},
		"RequestVerifyCallback": {
			"type": "object",
			"required": [
				"callbackId",
				"verificationKey"
			],
			"properties": {
				"callbackId": {
					"description": "Unique identifier of the callback.",
					"type": "string"
				},
				"verificationKey": {
					"description": "Unique, single-use verification code for the callback.  Supplied during callback creation via an HTTPS POST.",
					"type": "string"
				}
			}
		},
		"RequestUpdateCallback": {
			"type": "object",
			"required": [
				"callbackName",
				"callbackId"
			],
			"properties": {
				"callbackName": {
					"description": "Name of the callback.",
					"type": "string"
				},
				"callbackId": {
					"description": "Unique identifier of the callback.",
					"type": "string"
				},
				"maxBatchSize": {
					"description": "Must be at least 100 and no more than 1,000. Default is 1,000.",
					"type": "integer"
				}
			}
		},
		"RequestRegenerateSignatureKey": {
			"type": "object",
			"required": [
				"callbackId"
			],
			"properties": {
				"callbackId": {
					"description": "Unique identifier of the callback.",
					"type": "string"
				}
			}
		},
		"RequestCreateSubscription": {
			"type": "object",
			"required": [
				"subscriptionName",
				"callbackId",
				"eventCategoryTypes"
			],
			"properties": {
				"subscriptionName": {
					"description": "Name of the subscription. This name must be unique.",
					"type": "string"
				},
				"callbackId": {
					"description": "Unique identifier of the callback that receives the notification events. This callback must already exist and must be verified.",
					"type": "string"
				},
				"eventCategoryTypes": {
					"description": "Comma-separated list of fully qualified event types for which you’re requesting notifications. Expressed as NotificationEventCategory.NotificationEventType. Review <a href=\"https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/ens-supported-events.htm\">Supported Notification Events</a> for a list of supported event categories and types.",
					"type": "array"
				},
				"filters": {
					"description": "Each string in the array is a key:value pair to filter on. Review <a href=\"https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/ens-subscription-filters.htm\">Subscription Filters</a> for a list of data items available for filtering.",
					"type": "array"
				}
			}
		},
		"RequestUpdateSubscription": {
			"type": "object",
			"required": [
				"subscriptionId",
				"eventCategoryTypes"
			],
			"properties": {
				"subscriptionId": {
					"description": "Unique identifier for the subscription to update.",
					"type": "string"
				},
				"eventCategoryTypes": {
					"description": "Comma-separated list of fully qualified event types for which you’re requesting notifications. Expressed as NotificationEventCategory.NotificationEventType. Review <a href=\"https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/ens-supported-events.htm\">Supported Notification Events</a> for a list of supported event categories and types.",
					"type": "array"
				},
				"filters": {
					"description": "Each string in the array is a key=value pair to filter on. Review <a href=\"https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/ens-subscription-filters.htm\">Subscription Filters</a> for a list of data items available for filtering.",
					"type": "array"
				},
				"subscriptionName": {
					"description": "Name of the subscription. This name must be unique.",
					"type": "string"
				},
				"status": {
					"description": "Indicates the status of the callback subscription. Can be set to either active or paused. You can only pause active callback subscriptions. You can only make paused callback subscriptions active.",
					"type": "string"
				},
				"statusReason": {
					"description": "Describes why you changed the status.",
					"type": "string"
				}
			}
		},
		"RequestUpdateMessageDefinition": {
			"type": "object",
			"required": [
				"name",
				"content.customerKey",
				"subscriptions.list"
			],
			"properties": {
				"name": {
					"description": "Name of the definition. Must be unique.",
					"type": "string"
				},
				"content.customerKey": {
					"description": "Unique identifier of the content asset.",
					"type": "string"
				},
				"status": {
					"description": "Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.",
					"type": "string"
				},
				"description": {
					"description": "User-provided description of the send definition.",
					"type": "string"
				},
				"classification": {
					"description": "Marketing Cloud external key of a sending classification defined in Email Studio Administration.  Only transactional classifications are permitted. Default is default transactional.",
					"type": "string"
				},
				"subscriptions.list": {
					"description": "Marketing Cloud external key of the list or all subscribers. Contains the subscriber keys and profile attributes.",
					"type": "string"
				},
				"subscriptions.dataExtension": {
					"description": "Marketing Cloud external key of the triggered send data extension. Each request inserts as a new row in the data extension.",
					"type": "string"
				},
				"subscriptions.autoAddSubscriber": {
					"description": "Adds the recipient’s email address and contact key as a subscriber key to subscriptions.list. Default is true.",
					"type": "boolean"
				},
				"subscriptions.updateSubscriber": {
					"description": "Updates the recipient’s contact key as a subscriber key with the provided email address and profile attributes to subscriptions.list. Default is true.",
					"type": "boolean"
				},
				"options.trackLinks": {
					"description": "Wraps links for tracking and reporting. Default is true.",
					"type": "boolean"
				},
				"options.cc": {
					"description": "Include CC email addresses with every send. To CC dynamically at send time, create a profile attribute and use the %%attribute%% syntax.",
					"type": "array"
				},
				"options.bcc": {
					"description": "Include BCC email addresses with every send. To BCC dynamically at send time, create a profile attribute and use the %%attribute%% syntax.",
					"type": "array"
				},
				"options.createJourney": {
					"description": "A value of true makes the send definition available in Journey Builder as a Transactional Send Journey. After the definition is tied to a Transactional Send Journey, the definition remains part of Journey Builder. You can’t unlink a journey from a definition without recreating the transactional send definition.",
					"type": "boolean"
				}
			}
		},
		"RequestCreateSendDefinition": {
			"type": "object",
			"required": [
				"definitionKey",
				"name",
				"content.customerKey",
				"subscriptions.list"
			],
			"properties": {
				"definitionKey": {
					"description": "Unique, user-generated key to access the definition object.",
					"type": "string"
				},
				"name": {
					"description": "Name of the definition. Must be unique.",
					"type": "string"
				},
				"content.customerKey": {
					"description": "Unique identifier of the content asset.",
					"type": "string"
				},
				"status": {
					"description": "Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.",
					"type": "string"
				},
				"description": {
					"description": "User-provided description of the send definition.",
					"type": "string"
				},
				"classification": {
					"description": "Marketing Cloud external key of a sending classification defined in Email Studio Administration.  Only transactional classifications are permitted. Default is default transactional.",
					"type": "string"
				},
				"subscriptions.list": {
					"description": "Marketing Cloud external key of the list or all subscribers. Contains the subscriber keys and profile attributes.",
					"type": "string"
				},
				"subscriptions.dataExtension": {
					"description": "Marketing Cloud external key of the triggered send data extension. Each request inserts as a new row in the data extension. To deduplicate at send time, use messageKey. Don’t use a primary key on the triggered send data extension.",
					"type": "string"
				},
				"subscriptions.autoAddSubscriber": {
					"description": "Adds the recipient’s email address and contact key as a subscriber key to subscriptions.list. Default is true.",
					"type": "boolean"
				},
				"subscriptions.updateSubscriber": {
					"description": "Updates the recipient’s contact key as a subscriber key with the provided email address and profile attributes to subscriptions.list. Default is true.",
					"type": "boolean"
				},
				"options.trackLinks": {
					"description": "Wraps links for tracking and reporting. Default is true.",
					"type": "boolean"
				},
				"options.cc": {
					"description": "Include CC email addresses with every send. To CC dynamically at send time, create a profile attribute and use the %%attribute%% syntax.",
					"type": "array"
				},
				"options.bcc": {
					"description": "Include BCC email addresses with every send. To BCC dynamically at send time, create a profile attribute and use the %%attribute%% syntax.",
					"type": "array"
				},
				"options.createJourney": {
					"description": "A value of true updates the send definition to make it available in Journey Builder as a Transactional Send Journey. After the definition is tied to a Transactional Send Journey, the definition remains part of Journey Builder. You can’t unlink a journey from a definition without recreating the transactional send definition.",
					"type": "boolean"
				}
			}
		},
		"RequestSendMessageMultipleRecipients": {
			"type": "object",
			"required": [
				"definitionKey",
				"recipients",
				"recipients.contactKey"
			],
			"properties": {
				"definitionKey": {
					"description": "Unique identifier of the definition.",
					"type": "string"
				},
				"recipients": {
					"description": "Array of recipient objects that contain parameters and metadata for the recipients, such as send tracking and personalization attributes. Use this parameter to send to multiple recipients in one request. Use either the recipient or recipients parameter, but not both.",
					"type": "array"
				},
				"recipients.contactKey": {
					"description": "Unique identifier for a subscriber in Marketing Cloud. Each request must include a contactKey. You can use an existing subscriber key or create one at send time by using the recipient’s email address.",
					"type": "string"
				},
				"recipients.to": {
					"description": "Channel address of the recipient. For email, it’s the recipient's email address.",
					"type": "string"
				},
				"recipients.messageKey": {
					"description": "Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Can be up to 100 characters, and there are no restricted characters. Each recipient in a  request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.",
					"type": "string"
				},
				"recipients.attributes": {
					"description": "Information used to personalize the message for the recipient. Written as key:value pairs. The attributes match profile attributes, content attributes, or triggered send data extension attributes.",
					"type": "object"
				},
				"attributes": {
					"description": "Information used to personalize the message for the request. Written as key:value pairs. The attributes match profile attributes, content attributes, or triggered send data extension attributes.",
					"type": "object"
				}
			}
		},
		"RequestSendMessageSingleRecipient": {
			"type": "object",
			"required": [
				"definitionKey",
				"recipient",
				"recipient.contactKey"
			],
			"properties": {
				"definitionKey": {
					"description": "Unique identifier of the definition.",
					"type": "string"
				},
				"recipient": {
					"description": "Object that contains parameters and metadata for the recipient, such as send tracking and personalization attributes. Use this parameter to send to one recipient. Use either the recipient or recipients parameter, but not both.",
					"type": "object"
				},
				"recipient.contactKey": {
					"description": "Unique identifier for a subscriber in Marketing Cloud. Each request must include a contactKey. You can use an existing subscriber key or create one at send time by using the recipient’s email address.",
					"type": "string"
				},
				"recipient.to": {
					"description": "Channel address of the recipient. For email, it’s the recipient's email address.",
					"type": "string"
				},
				"recipient.attributes": {
					"description": "Information used to personalize the message for the recipient. Written as key:value pairs. The attributes match profile attributes, content attributes, or triggered send data extension attributes.",
					"type": "object"
				}
			}
		},
		"RequestContactPreferences": {
			"type": "object",
			"required": [
				"items",
				"items.contactID"
			],
			"properties": {
				"items": {
					"description": "Array of contact IDs and other properties to add.",
					"type": "array"
				},
				"items.contactID": {
					"description": "Unique ID for the contact.",
					"type": "long"
				},
				"items.hasOptedOutTracking": {
					"description": "Indicates whether a contact opted out of tracking information.",
					"type": "boolean"
				}

			}
		},
		"RequestAddContactPreferenceByContactId": {
			"type": "object",
			"required": [
				"value",
				"value.contactID"
			],
			"properties": {
				"value": {
					"description": "Array of contact IDs and other properties to add.",
					"type": "object"
				},
				"value.contactID": {
					"description": "Unique ID for the contact.",
					"type": "long"
				},
				"value.hasOptedOutTracking": {
					"description": "Indicates whether a contact opted out of tracking information.",
					"type": "boolean"
				}

			}
		},
		"RequestSearchContactPreferenceByReferenceType": {
			"type": "object",
			"required": [
				"items"
			],
			"properties": {
				"items": {
					"description": "Array of contact IDs or contact keys to search.",
					"type": "array"
				}
			}
		},
		"RequestPause": {
			"type": "object",
			"required": [

			],
			"properties": {
				"ExtendWaitEndDates": {
					"description": "Indicates whether to extend waits for all Wait by Duration activities while the journey is paused. This parameter applies only to Wait By Duration wait types. If the value is true, the wait end date is extended by the pause period. If the value is false, the wait end date isn't extended. If you don't use this parameter, the default value is false.",
					"type": "boolean"
				},
				"PausedDays": {
					"description": "Number of days to pause the journey. Default is 14 days.",
					"type": "integer"
				},
				"GuardrailAction": {
					"description": "Indicates whether to resume or stop the journey after the pause duration (PausedDays). Allowed values are Stop and Resume. If you don't use this parameter, the default value is false.",
					"type": "string"
				},
				"RetainContactInjectionWhileJourneyPaused": {
					"description": "Indicates how new contact injections are treated (for entry sources that support this option) while the journey is paused. Choose whether to ignore new contacts (false) or to queue and process them when the journey resumes (true). If you don't use this parameter, the default value is false.",
					"type": "boolean"
				},
				"id": {
					"description": "ID of the journey to be paused.",
					"type": "string"
				},
				"Version": {
					"description": "Version of the journey to be paused.",
					"type": "string"
				}
			}
		},
		"ResponseCustomObjectFieldRelationships_IDRequired_400": {
			"type": "object",
			"required": [
				"message"
			],
			"properties": {
				"message": {
					"type": "string",
					"description": "The request must contain a valid CustomObjectFieldID"
				}
			}
		},
		"ResponsePostEvent_200": {
			"type": "object",
			"required": [
				"eventInstanceId"
			],
			"properties": {
				"eventInstanceId": {
					"type": "string",
					"description": "ID of the entry event"
				}
			}
		},
		"ResponseContactExitRequest_202": {
			"type": "object",
			"required": [
				"errors"
			],
			"properties": {
				"errors": {
					"type": "array",
					"description": "List of errors for request to remove a contact from a journey"
				},
				"contactKey": {
					"type": "string",
					"description": "Contact that needs to be removed from a journey"
				},
				"definitionKey": {
					"type": "string",
					"description": "Definition key of the journey"
				},
				"status": {
					"type": "array",
					"description": "Array of statuses of the contact in a given journey"
				},
				"status.version": {
					"type": "string",
					"description": "Version number of the journey"
				},
				"status.message": {
					"type": "string",
					"description": "Status of the request to remove a contact from a specific version of the journey"
				}
			}
		},
		"ResponseContactExitStatus_200": {
			"type": "object",
			"required": [
				"contactKey",
				"definitionKey",
				"status",
				"status.version",
				"status.message"
			],
			"properties": {
				"contactKey": {
					"type": "string",
					"description": "Contact that needs to be removed from a journey"
				},
				"definitionKey": {
					"type": "string",
					"description": "Definition key of the journey"
				},
				"status": {
					"type": "array",
					"description": "Array of statuses of the contact in a given journey"
				},
				"status.version": {
					"type": "string",
					"description": "Version number of the journey"
				},
				"status.message": {
					"type": "string",
					"description": "Status of the request to remove a contact from a specific version of the journey"
				},
				"status.definitionInstanceId": {
					"type": "string",
					"description": "Unique Id representing each instance of a contact in a journey"
				}
			}
		},
		"ResponseContactMembership_200":{
				"type" : "object",
				"required" : [
						"results"
				],
				"properties" : {
						"results" : {
								"type" : "object",
								"description" : "An object containing contacts found in a journey and contacts not found in a journey."
						},
						"contactMemberships" : {
								"type" : "array",
								"description" : "Contact membership information."
						},
						"contactMemberships.contactKey" : {
								"type" : "string",
								"description" : "Contact key that was included in the request."
						},
						"contactMemberships.definitionKey" : {
								"type" : "string",
								"description" : "Unique identifier for the journey where the contact was found."
						},
						"contactMemberships.Version" : {
								"type" : "string",
								"description" : "Version number of the journey where the contact was found."
						},
						"contactsNotFound" : {
								"type" : "array",
								"description" : "List of contacts not found in any journeys in the account."
						}
				}
		},
		"ResponseEstablishContact_200": {
			"type": "object",
			"required": [
				"items",
				"requestServiceMessageID",
				"responseDateTime",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"items": {
					"description": "An array of contact result objects for the requested contacts to be established.",
					"type": "array"
				},
				"items.value": {
					"description": "The Contact result returned",
					"type": "object"
				},
				"items.value.requestedContactKey": {
					"description": "The requested Contact Key",
					"type": "string"
				},
				"items.value.isNewContact": {
					"description": "Returns if the Contact was newly created. Only is returned when includeNewContactAwareness=true",
					"type": "boolean"
				},
				"items.value.contactReference": {
					"description": "The Contact reference returned",
					"type": "object"
				},
				"items.value.contactReference.contactID": {
					"description": "The established Contact's ID",
					"type": "long"
				},
				"items.value.contactReference.contactType": {
					"description": "The established Contact's Type",
					"type": "string"
				},
				"items.value.contactReference.contactKey": {
					"description": "The established Contact's Type",
					"type": "string"
				},
				"items.value.contactReference.contactStatus": {
					"description": "The established Contact's Status",
					"type": "string"
				},
				"items.value.requestItemIndex": {
					"description": "The Contact reference's index in the Request",
					"type": "int"
				},
				"items.value.resultMessages": {
					"description": "An array of result messages related to this Contact",
					"type": "array"
				},
				"requestServiceMessageID": {
					"description": "Service message ID for the request",
					"type": "guid"
				},
				"responseDateTime": {
					"description": "The time the Response was created",
					"type": "datetime"
				},
				"resultMessages": {
					"description": "An array of result messages",
					"type": "array"
				},
				"serviceMessageID": {
					"description": "Service message ID for the Response",
					"type": "guid"
				}
			}
		},
		"ResponseValidateEmail_200": {
			"type": "object",
			"required": [
				"email",
				"valid"
			],
			"properties": {
				"email": {
					"type": "string",
					"description": "Email address that was validated"
				},
				"valid": {
					"type": "string",
					"description": "Whether it was valid or not"
				}
			}
		},
		"ResponseValidateEmail_default": {
			"type": "object",
			"required": [
				"email",
				"failedValidation",
				"valid"
			],
			"properties": {
				"email": {
					"type": "string",
					"description": "Email address that was validated"
				},
				"failedValidation": {
					"type": "string",
					"description": "Validator that failed: SyntaxValidator, MXValidator, or ListDetectiveValidator"
				},
				"valid": {
					"type": "string",
					"description": "Whether it was valid or not"
				}
			}
		},
		"ResponseCreatePopulationAttributeGroup_200": {
			"type": "object",
			"required": [
				"item",
				"operationstatus",
				"requestservicemessageid",
				"servicemessageid"
			],
			"properties": {
				"item": {
					"type": "object",
					"description": "The newly created population item"
				},
				"operationstatus": {
					"type": "string",
					"description": "Current operation status"
				},
				"requestservicemessageid": {
					"type": "guid",
					"description": "Service message ID for the request"
				},
				"servicemessageid": {
					"type": "guid",
					"description": "Service message ID for the response"
				}
			}
		},
		"ResponseCreatePopulationAttributeGroup_default": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"type": "string",
					"description": "Error message text"
				},
				"errorCode": {
					"type": "int",
					"description": "ErrorCode ID for the error"
				}
			}
		},
		"ResponseFetchDeleteOperations_200": {
			"type": "object",
			"required": [
				"items",
				"items.operationID",
				"items.eid",
				"items.mid",
				"items.employeeID",
				"items.operationRequestID",
				"items.status",
				"items.scheduledTime",
				"items.startTime",
				"items.endTime",
				"items.listTypeID",
				"items.listIdentifier",
				"items.listKey",
				"items.listName",
				"items.expectedListCount",
				"items.actualListCount",
				"items.successCount",
				"items.errorCount",
				"items.deleteType",
				"items.createdDate",
				"items.createdBy",
				"items.operationName",
				"items.restorableUntilDate",
				"page",
				"pageSize",
				"count",
				"resultMessages",
				"requestservicemessageid",
				"servicemessageid"
			],
			"properties": {
				"items": {
					"type": "array",
					"description": "Array of retrieved contact delete operations."
				},
				"items.operationID": {
					"type": "long",
					"description": "Operation ID of the contact delete operation. Keep track of this ID because it allows you to check the status of a deletion and decide how to proceed if there is a failure."
				},
				"items.eid": {
					"type": "long",
					"description": "ID for the top-level enterprise account associated with the business unit."
				},
				"items.mid": {
					"type": "long",
					"description": "Account ID of the account user."
				},
				"items.employeeID": {
					"type": "long",
					"description": "Employee ID of the user who created the contact delete operation."
				},
				"items.OperationRequestID": {
					"type": "guid",
					"description": "Request ID of the contact delete operation."
				},
				"items.status": {
					"type": "string",
					"description": "Current status of the contact delete operation <ul><li>Pending</li><li>Processing</li> <li>Cancelling</li> <li>Cancelled</li> <li>Failed</li> <li>Completed</li> <li>CompletedWithErrors</li></ul>."
				},
				"items.scheduledTime": {
					"type": "datetime",
					"description": "Date the contact delete operation is scheduled to start."
				},
				"items.startTime": {
					"type": "datetime",
					"description": "Date the contact delete operation started."
				},
				"items.endTime": {
					"type": "datetime",
					"description": "Date the contact delete operation ended."
				},
				"items.listTypeID": {
					"type": "Short",
					"description": "Type of list used in the contact delete operation."
				},
				"items.listIdentifier": {
					"type": "string",
					"description": "Identifier of list used in the contact delete operation."
				},
				"items.listKey": {
					"type": "string",
					"description": "ListKey of list used in the contact delete operation."
				},
				"items.listName": {
					"type": "string",
					"description": "Name of list used in the contact delete operation."
				},
				"items.expectedListCount": {
					"type": "long",
					"description": "Estimated number of contacts to delete in the contact delete operation."
				},
				"items.actualListCount": {
					"type": "long",
					"description": "Actual number of contacts to delete in the contact delete operation."
				},
				"items.successCount": {
					"type": "long",
					"description": "Number of contacts successfully deleted in the contact delete operation."
				},
				"items.errorCount": {
					"type": "long",
					"description": "Number of contacts that errored out in the contact delete operation."
				},
				"items.deleteType": {
					"type": "string",
					"description": "Type of delete performed: <ul><li>None</li> <li>ContactAndAttributes</li> <li>AttributesOnly</li> </ul>"
				},
				"items.operationName": {
					"type": "string",
					"description": "Name of the contact delete operation."
				},
				"items.restorableUntilDate": {
					"type": "datetime",
					"description": "Deadline to restore contacts deleted by contact delete operation."
				},
				"items.createdDate": {
					"description": "Creation date of contact delete operation.",
					"type": "datetime"
				},
				"items.createdBy": {
					"description": "Employee ID of the user who created the contact delete operation.",
					"type": "long"
				},
				"pageNumber": {
					"type": "integer",
					"description": "Requested page number of results."
				},
				"pageSize": {
					"type": "integer",
					"description": "Requested page size of results."
				},
				"count": {
					"type": "integer",
					"description": "Total count of contact delete operation."
				},
				"resultMessages": {
					"type": "array",
					"description": "Array of returned error messages generated while processing request."
				},
				"requestservicemessageid": {
					"type": "guid",
					"description": "Service message ID for the request."
				},
				"servicemessageid": {
					"type": "guid",
					"description": "Service message ID for the response."
				}
			}
		},
		"ResponseFetchDeleteOperations_default": {
			"type": "object",
			"required": [
				"page",
				"pageSize",
				"count",
				"resultMessages",
				"requestservicemessageid",
				"servicemessageid"
			],
			"properties": {
				"pageNumber": {
					"type": "integer",
					"description": "Requested page number of results"
				},
				"pageSize": {
					"type": "integer",
					"description": "Requested page size of results"
				},
				"count": {
					"type": "integer",
					"description": "Total count of contact delete operation"
				},
				"resultMessages": {
					"type": "array",
					"description": "Array of returned error messages generated while processing request"
				},
				"requestservicemessageid": {
					"type": "guid",
					"description": "Service message ID for the request"
				},
				"servicemessageid": {
					"type": "guid",
					"description": "Service message ID for the response"
				}
			}
		},
		"RequestCreateWorkflowTeamUser": {
			"type": "object",
			"required": [
				"userId",
				"userName"
			],
			"properties": {
				"userId": {
					"description": "Id of the user to be added",
					"type": "string"
				},
				"userName": {
					"description": "Username of the user to be added",
					"type": "string"
				}
			}
		},
		"RequestTransitionWorkflowItem": {
			"type": "object",
			"required": [
				"transitionid",
				"validators"
			],
			"properties": {
				"transitionid": {
					"description": "Id for the transition",
					"type": "string"
				},
				"overrideNotificationId": {
					"description": "An override notification of 9 sends workflow notifications upon transition. Currently, the only possible value is 9.",
					"type": "string"
				}
			}
		},
		"RequestPatchApprovalsSettings": {
			"type": "object",
			"required": [
				"key",
				"value"
			],
			"properties": {
				"key": {
					"description": "Key for the EnableEmailApprovals setting",
					"type": "string"
				},
				"value": {
					"description": "True/false value for the EnableEmailApprovals setting",
					"type": "string"
				}
			}
		},
		"ResponseRetrieveContactKey_200": {
			"type": "object",
			"required": [
				"channelAddressResponseEntities",
				"requestServiceMessageID",
				"serviceMessageID"
			],
			"properties": {
				"channelAddressResponseEntities": {
					"description": "List of contact keys with their created date and time",
					"type": "array"
				},
				"channelAddressResponseEntities.contactKey": {
					"description": "Contact key of the email channel address",
					"type": "string"
				},
				"channelAddressResponseEntities.createdDate": {
					"description": "Contact key creation date",
					"type": "datetime"
				},
				"channelAddress": {
					"description": "Requested email channel address",
					"type": "string"
				},
				"operationStatus": {
					"type": "string",
					"description": "Current operation status"
				},
				"requestServiceMessageID": {
					"type": "guid",
					"description": "Service message ID for the request"
				},
				"serviceMessageID": {
					"type": "guid",
					"description": "Service message ID for the response"
				}
			}
		},
		"ResponseRetrieveContactKey_EmptyResponse": {
			"type": "object",
			"required": [
				"channelAddressResponseEntities",
				"channelAddress"
			],
			"properties": {
				"channelAddressResponseEntities": {
					"description": "Empty array returned when email channel address is not found",
					"type": "array"
				},
				"channelAddress": {
					"description": "Requested email channel address",
					"type": "string"
				}
			}
		},
		"ResponseCreateWorkflowTeamUser_200": {
			"type": "object",
			"required": [
				"workflowRoleInstanceUserId",
				"workflowItemId",
				"workflowRoleInstanceId",
				"userId",
				"memberId",
				"enterpriseId",
				"modifiedBy"
			],
			"properties": {
				"workflowRoleInstanceUserId": {
					"description": "Id of the newly created record in WorkflowRoleInstanceUser table",
					"type": "string"
				},
				"workflowItemId": {
					"description": "Id of the workflow item",
					"type": "string"
				},
				"workflowRoleInstanceId": {
					"description": "Id of the WorkflowRoleInstance record",
					"type": "string"
				},
				"userId": {
					"description": "Id of the user",
					"type": "string"
				},
				"memberId": {
					"description": "MID the user belongs to",
					"type": "string"
				},
				"enterpriseId": {
					"description": "EID the user’s MID belongs to",
					"type": "string"
				},
				"modifiedBy": {
					"description": "MemberId that created the record",
					"type": "string"
				}
			}
		},
		"ResponseWorkflowTeam_200": {
			"type": "object",
			"required": [
				"count",
				"page",
				"pageSize",
				"objectType",
				"Items"
			],
			"properties": {
				"count": {
					"description": "Number of records retrieved",
					"type": "string"
				},
				"page": {
					"description": "Current page number",
					"type": "string"
				},
				"pageSize": {
					"description": "Number of records on each page",
					"type": "string"
				},
				"objectType": {
					"description": "Workflow type",
					"type": "string"
				},
				"Items": {
					"description": "List of workflow items",
					"type": "array"
				},
				"Items.id": {
					"description": "Workflow Id",
					"type": "string"
				},
				"Items.objectType": {
					"description": "Workflow object type",
					"type": "string"
				},
				"Items.name": {
					"description": "Workflow name",
					"type": "string"
				},
				"Items.description": {
					"description": "Description of the workflow",
					"type": "string"
				},
				"Items.roleUsers": {
					"description": "List of role users",
					"type": "array"
				},
				"Items.roleUsers.id": {
					"description": "Unique Id for the association between role and users",
					"type": "string"
				},
				"Items.roleUsers.TeamId": {
					"description": "Team Id the role user is associated with",
					"type": "string"
				},
				"Items.roleUsers.roleDefinitionId": {
					"description": "Role definition Id",
					"type": "string"
				},
				"Items.roleUsers.roleDefinitionName": {
					"description": "Role definition name",
					"type": "string"
				},
				"Items.roleUsers.employeeId": {
					"description": "Id of the user assigned to the role",
					"type": "string"
				},
				"Items.roleUsers.employeeName": {
					"description": "Name of the user assigned to the role",
					"type": "string"
				},
				"Items.roleUsers.roleId": {
					"description": "Id of the role",
					"type": "string"
				}
			}
		},
		"ResponseWorkflowTeam_404": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "No workflow teams found for workflow object type: [workflowObjectType]",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (30003)",
					"type": "string"
				}
			}
		},
		"ResponseCreateWorkflowTeamUser_404": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "The UserId supplied does not exist and thus the role user cannot be added.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (30003)",
					"type": "string"
				}
			}
		},
		"ResponseCreateWorkflowTeamUser_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "UserId is required.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10002)",
					"type": "string"
				}
			}
		},
		"ResponseTransitionWorkflowItem_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "WorkflowItemId must be a number greater than zero.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10003)",
					"type": "string"
				}
			}
		},
		"ResponseCreateWorkflowTeamUser_403": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "Insufficient Privileges.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (20002)",
					"type": "string"
				}
			}
		},
		"ResponseDeleteWorkflowTeamUser_403": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "Insufficient Privileges.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (20002)",
					"type": "string"
				}
			}
		},
		"ResponseDeleteWorkflowTeamUser_404": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "The WorkflowRoleInstanceUser is not active and thus cannot be deleted.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (30003)",
					"type": "string"
				}
			}
		},
		"ResponseGetApprovals_404": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "No active approval with the given id exists.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (30003)",
					"type": "string"
				}
			}
		},
		"ResponsePatchApprovals_404": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "No active approval with the given id exists.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (30003)",
					"type": "string"
				}
			}
		},
		"ResponseGetApprovals_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "id is a required field.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10002)",
					"type": "string"
				}
			}
		},
		"ResponseGetApprovals_200": {
			"type": "object",
			"required": [
				"approvalItemId",
				"objectType",
				"objectId",
				"name",
				"description",
				"workflowItemId",
				"workflowState",
				"workflowType",
				"workflowState",
				"workflowName",
				"deadline",
				"commentCounts",
				"workflowItem",
				"blocked"
			],
			"properties": {
				"approvalItemId": {
					"description": "Id of approval item",
					"type": "string"
				},
				"objectType": {
					"description": "Object type for the approval item",
					"type": "string"
				},
				"objectId": {
					"description": "Unique Id of the object associated with the approval item",
					"type": "string"
				},
				"name": {
					"description": "Name of approval item",
					"type": "string"
				},
				"description": {
					"description": "Description of the approval item",
					"type": "string"
				},
				"workflowItemId": {
					"description": "Id of the workflow item",
					"type": "string"
				},
				"workflowState": {
					"description": "Workflow state of the approval item",
					"type": "string"
				},
				"workflowType": {
					"description": "Type of workflow",
					"type": "string"
				},
				"workflowName": {
					"description": "Name of the workflow",
					"type": "string"
				},
				"deadline": {
					"description": "Deadline for the approval item",
					"type": "array"
				},
				"commentCounts": {
					"description": "Comment counts",
					"type": "object"
				},
				"commentCounts.open": {
					"description": "Number of comments that are open",
					"type": "string"
				},
				"commentCounts.addressed": {
					"description": "Number of comments that are addressed",
					"type": "string"
				},
				"commentCounts.completed": {
					"description": "Number of comments that are completed",
					"type": "string"
				},
				"commentCounts.total": {
					"description": "Total number of comments",
					"type": "string"
				},
				"workflowItem": {
					"description": "Workflow item object",
					"type": "object"
				},
				"workflowItem.workflowItemId": {
					"description": "Workflow item Id",
					"type": "string"
				},
				"workflowItem.workflowRound": {
					"description": "Workflow round",
					"type": "string"
				},
				"workflowItem.type": {
					"description": "Workflow type",
					"type": "string"
				},
				"workflowItem.currentState": {
					"description": "Current state of the workflow",
					"type": "object"
				},
				"workflowItem.currentState.stateId": {
					"description": "Id of the current state",
					"type": "string"
				},
				"workflowItem.currentState.stateName": {
					"description": "Current state name",
					"type": "string"
				},
				"workflowItem.currentState.isEndState": {
					"description": "Is the current state the final state?",
					"type": "string"
				},
				"workflowItem.currentState.modifiedDate": {
					"description": "The date the workflow item is modified",
					"type": "string"
				},
				"workflowItem.availableTransitions": {
					"description": "Collection of available workflow states",
					"type": "array"
				},
				"workflowItem.availableTransitions.id": {
					"description": "Id of the available workflow state",
					"type": "string"
				},
				"workflowItem.availableTransitions.name": {
					"description": "Name of the available workflow state",
					"type": "string"
				},
				"workflowItem.availableTransitions.isPersistable": {
					"description": "Defines if the workflow item is persistable",
					"type": "string"
				},
				"blocked": {
					"description": "Defines if emails will be sent out. If blocked = true, then emails will not be sent.",
					"type": "string"
				}
			}
		},
		"ResponseCreateApprovals_200": {
			"type": "object",
			"required": [
				"approvalItemId",
				"objectType",
				"objectId",
				"name",
				"description",
				"workflowItemId",
				"workflowState",
				"workflowType",
				"workflowState",
				"workflowName",
				"deadline",
				"commentCounts",
				"workflowItem",
				"blocked"
			],
			"properties": {
				"approvalItemId": {
					"description": "Id of approval item",
					"type": "string"
				},
				"objectType": {
					"description": "Object type for the approval item",
					"type": "string"
				},
				"objectId": {
					"description": "Unique Id of the object associated with the approval item",
					"type": "string"
				},
				"name": {
					"description": "Name of approval item",
					"type": "string"
				},
				"description": {
					"description": "Description of the approval item",
					"type": "string"
				},
				"workflowItemId": {
					"description": "Id of the workflow item",
					"type": "string"
				},
				"workflowState": {
					"description": "Workflow state of the approval item",
					"type": "string"
				},
				"workflowType": {
					"description": "Type of workflow",
					"type": "string"
				},
				"workflowName": {
					"description": "Name of the workflow",
					"type": "string"
				},
				"deadline": {
					"description": "Deadline for the approval item",
					"type": "array"
				},
				"commentCounts": {
					"description": "Comment counts",
					"type": "object"
				},
				"commentCounts.open": {
					"description": "Number of comments that are open",
					"type": "string"
				},
				"commentCounts.addressed": {
					"description": "Number of comments that are addressed",
					"type": "string"
				},
				"commentCounts.completed": {
					"description": "Number of comments that are completed",
					"type": "string"
				},
				"commentCounts.total": {
					"description": "Total number of comments",
					"type": "string"
				},
				"workflowItem": {
					"description": "Workflow item object",
					"type": "object"
				},
				"workflowItem.workflowItemId": {
					"description": "Workflow item Id",
					"type": "string"
				},
				"workflowItem.workflowRound": {
					"description": "Workflow Round",
					"type": "string"
				},
				"workflowItem.type": {
					"description": "Workflow type",
					"type": "string"
				},
				"workflowItem.currentState": {
					"description": "Current state of the workflow",
					"type": "object"
				},
				"workflowItem.currentState.stateId": {
					"description": "Id of the current state",
					"type": "string"
				},
				"workflowItem.currentState.stateName": {
					"description": "Current state name",
					"type": "string"
				},
				"workflowItem.currentState.isEndState": {
					"description": "Is the current state the final state?",
					"type": "string"
				},
				"workflowItem.currentState.modifiedDate": {
					"description": "The date the workflow item is modified",
					"type": "string"
				},
				"workflowItem.availableTransitions": {
					"description": "Collection of available workflow states",
					"type": "array"
				},
				"workflowItem.availableTransitions.id": {
					"description": "Id of the available workflow state",
					"type": "string"
				},
				"workflowItem.availableTransitions.name": {
					"description": "Name of the available workflow state",
					"type": "string"
				},
				"workflowItem.availableTransitions.isPersistable": {
					"description": "Defines if the workflow item is persistable",
					"type": "string"
				},
				"blocked": {
					"description": "Defines if emails will be sent out. If blocked = true, then emails will not be sent.",
					"type": "string"
				}
			}
		},
		"ResponseGetApprovalSettings_200": {
			"type": "object",
			"required": [
				"key",
				"value"
			],
			"properties": {
				"key": {
					"description": "Key for the EnableEmailApprovals setting",
					"type": "string"
				},
				"value": {
					"description": "True/false value for the EnableEmailApprovals setting",
					"type": "string"
				}
			}
		},
		"ResponseGetApprovalsAll_200": {
			"type": "object",
			"required": [
				"count",
				"page",
				"pageSize",
				"commentCounts",
				"items"
			],
			"properties": {
				"count": {
					"description": "Number of records retrieved",
					"type": "string"
				},
				"page": {
					"description": "Current page number",
					"type": "string"
				},
				"pageSize": {
					"description": "Number of records on each page",
					"type": "string"
				},
				"commentCounts": {
					"description": "Comment counts",
					"type": "object"
				},
				"commentCounts.open": {
					"description": "Number of comments that are open",
					"type": "string"
				},
				"commentCounts.addressed": {
					"description": "Number of comments that are addressed",
					"type": "string"
				},
				"commentCounts.completed": {
					"description": "Number of comments that are completed",
					"type": "string"
				},
				"commentCounts.total": {
					"description": "Total number of comments",
					"type": "string"
				},
				"items": {
					"description": "List of approval items",
					"type": "array"
				},
				"items.approvalItemId": {
					"description": "Id for approval item",
					"type": "string"
				},
				"items.objectType": {
					"description": "Object type for approval item",
					"type": "string"
				},
				"items.objectId": {
					"description": "Unique Id of the object associated with the approval item",
					"type": "string"
				},
				"items.name": {
					"description": "Name of the approval item",
					"type": "string"
				},
				"items.description": {
					"description": "Description of the approval item",
					"type": "string"
				},
				"items.workflowItemId": {
					"description": "Id of the workflow item",
					"type": "string"
				},
				"items.workflowState": {
					"description": "Workflow state of the approval item",
					"type": "string"
				},
				"items.workflowType": {
					"description": "Type of the workflow",
					"type": "string"
				},
				"items.workflowName": {
					"description": "Name of the workflow",
					"type": "string"
				},
				"items.deadline": {
					"description": "Deadline for the approval item",
					"type": "array"
				},
				"items.commentCounts": {
					"description": "Comment counts",
					"type": "object"
				},
				"items.commentCounts.open": {
					"description": "Number of comments that are open",
					"type": "string"
				},
				"items.commentCounts.addressed": {
					"description": "Number of comments that are addressed",
					"type": "string"
				},
				"items.commentCounts.completed": {
					"description": "Number of comments that are completed",
					"type": "string"
				},
				"items.commentCounts.total": {
					"description": "Total number of comments",
					"type": "string"
				},
				"items.workflowItem": {
					"description": "Workflow item object",
					"type": "object"
				},
				"items.workflowItem.workflowItemId": {
					"description": "Workflow item id",
					"type": "string"
				},
				"items.workflowItem.workflowRound": {
					"description": "Workflow round",
					"type": "string"
				},
				"items.workflowItem.type": {
					"description": "Workflow type",
					"type": "string"
				},
				"items.workflowItem.currentState": {
					"description": "Current state of the workflow",
					"type": "object"
				},
				"items.workflowItem.currentState.stateId": {
					"description": "Id of the current state",
					"type": "string"
				},
				"items.workflowItem.currentState.stateName": {
					"description": "Current state name",
					"type": "string"
				},
				"items.workflowItem.currentState.isEndState": {
					"description": "Is the current state the final state?",
					"type": "string"
				},
				"items.workflowItem.currentState.modifiedDate": {
					"description": "Date the workflow item is modified",
					"type": "string"
				},
				"items.workflowItem.availableTransitions": {
					"description": "Collection of available workflow states",
					"type": "array"
				},
				"items.workflowItem.availableTransitions.id": {
					"description": "Id of the available workflow state",
					"type": "string"
				},
				"items.workflowItem.availableTransitions.name": {
					"description": "Name of the available workflow state",
					"type": "string"
				},
				"items.workflowItem.availableTransitions.isPersistable": {
					"description": "Defines if the workflow item is persistable",
					"type": "string"
				},
				"items.blocked": {
					"description": "Defines if emails will be sent out. If blocked = true, then emails will not be sent.",
					"type": "string"
				}
			}
		},
		"ResponsePatchApprovals_200": {
			"type": "object",
			"required": [
				"approvalItemId",
				"objectType",
				"objectId",
				"name",
				"description",
				"workflowItemId",
				"workflowState",
				"workflowType",
				"workflowState",
				"workflowName",
				"deadline",
				"commentCounts",
				"workflowItem",
				"blocked"
			],
			"properties": {
				"approvalItemId": {
					"description": "Id of approval item",
					"type": "string"
				},
				"objectType": {
					"description": "Object type for the approval item",
					"type": "string"
				},
				"objectId": {
					"description": "Unique Id of the object associated with the approval item",
					"type": "string"
				},
				"name": {
					"description": "Name of approval item",
					"type": "string"
				},
				"description": {
					"description": "Description of the approval item",
					"type": "string"
				},
				"workflowItemId": {
					"description": "Id of the workflow item",
					"type": "string"
				},
				"workflowState": {
					"description": "Workflow state of the approval item",
					"type": "string"
				},
				"workflowType": {
					"description": "Type of workflow",
					"type": "string"
				},
				"workflowName": {
					"description": "Name of the workflow",
					"type": "string"
				},
				"deadline": {
					"description": "Deadline for the approval item",
					"type": "array"
				},
				"commentCounts": {
					"description": "Comment counts",
					"type": "object"
				},
				"commentCounts.open": {
					"description": "Number of comments that are open",
					"type": "string"
				},
				"commentCounts.addressed": {
					"description": "Number of comments that are addressed",
					"type": "string"
				},
				"commentCounts.completed": {
					"description": "Number of comments that are completed",
					"type": "string"
				},
				"commentCounts.total": {
					"description": "Total number of comments",
					"type": "string"
				},
				"workflowItem": {
					"description": "Workflow item object",
					"type": "object"
				},
				"workflowItem.workflowItemId": {
					"description": "Workflow item Id",
					"type": "string"
				},
				"workflowItem.workflowRound": {
					"description": "Workflow round",
					"type": "string"
				},
				"workflowItem.type": {
					"description": "Workflow type",
					"type": "string"
				},
				"workflowItem.currentState": {
					"description": "Current state of the workflow",
					"type": "object"
				},
				"workflowItem.currentState.stateId": {
					"description": "Id of the current state",
					"type": "string"
				},
				"workflowItem.currentState.stateName": {
					"description": "Current state name",
					"type": "string"
				},
				"workflowItem.currentState.isEndState": {
					"description": "Is the current state the final state?",
					"type": "string"
				},
				"workflowItem.currentState.modifiedDate": {
					"description": "The date the workflow item is modified",
					"type": "string"
				},
				"workflowItem.availableTransitions": {
					"description": "Collection of available workflow states",
					"type": "array"
				},
				"workflowItem.availableTransitions.id": {
					"description": "Id of the available workflow state",
					"type": "string"
				},
				"workflowItem.availableTransitions.name": {
					"description": "Name of the available workflow state",
					"type": "string"
				},
				"workflowItem.availableTransitions.isPersistable": {
					"description": "Defines if the workflow item is persistable",
					"type": "string"
				},
				"blocked": {
					"description": "Defines if emails will be sent out. If blocked = true, then emails will not be sent.",
					"type": "string"
				}
			}
		},
		"RequestPatchApprovals": {
			"type": "object",
			"required": [
				"name",
				"description",
				"hasDeadline",
				"Deadline"
			],
			"properties": {
				"name": {
					"description": "Name of the approval item",
					"type": "string"
				},
				"description": {
					"description": "Description for approval item",
					"type": "string"
				},
				"hasDeadline": {
					"description": "Indicates if the approval item has a deadline",
					"type": "string"
				},
				"Deadline": {
					"description": "Deadline for approval item. If hasDeadline = true, the API expects deadline to include a time offset, for example, ‘2016-05-01T14:18:12.430’. If hasDeadline = false, the API expects the deadline to be set to NULL.",
					"type": "string"
				}
			}
		},
		"RequestCreateApprovals": {
			"type": "object",
			"required": [
				"objectType",
				"objectId",
				"name",
				"description",
				"workflowItemId",
				"Deadline"
			],
			"properties": {
				"objectType": {
					"description": "Object type for approval item",
					"type": "string"
				},
				"objectId": {
					"description": "Unique Id for the object associated with the approval item",
					"type": "string"
				},
				"name": {
					"description": "Name of the approval item",
					"type": "string"
				},
				"description": {
					"description": "Description of the approval item",
					"type": "string"
				},
				"workflowItemId": {
					"description": "Workflow item Id",
					"type": "string"
				},
				"Deadline": {
					"description": "Deadline for approval item",
					"type": "string"
				}
			}
		},
		"ResponseGetApprovalsAll_OperatorNotSupported_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "The operator 'neq' is not supported.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10000)",
					"type": "string"
				}
			}
		},
		"ResponseGetApprovalsAll_FilterInvalid_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "The GET request filter parameter is invalid and thus the request cannot be processed",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10000)",
					"type": "string"
				}
			}
		},
		"ResponseGetApprovalsAll_OrderByInvalid_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "The GET request parameter - $OrderBy is invalid and thus the request cannot be processed.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10000)",
					"type": "string"
				}
			}
		},
		"ResponseCreateApprovals_InvalidWorkflowTeam_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "Invalid Workflow Team.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10005)",
					"type": "string"
				}
			}
		},
		"ResponseCreateApprovals_NameRequired_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "Approval Item Name is required.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10002)",
					"type": "string"
				}
			}
		},
		"ResponseCreateApprovals_NoApprover_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "No Approver has been assigned to this default review team.  Please go to Approvals Administration and add an Approver to the default review team.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10000)",
					"type": "string"
				}
			}
		},
		"ResponseCreateApprovals_NoWorkflowTeam_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "No workflow team has been specified, and no default Two-Step Approvals workflow team has been created. Please create a Two-Step Approvals workflow team, or specify an existing workflow team. Then, try again.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10000)",
					"type": "string"
				}
			}
		},
		"ResponseCreateApprovals_ObjectIdRequired_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "ObjectId is required.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10002)",
					"type": "string"
				}
			}
		},
		"ResponseCreateApprovals_ObjectTypeRequired_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "Approval Object Type is required.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10002)",
					"type": "string"
				}
			}
		},
		"ResponseCreateApprovals_409": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "There is already an active approval for CMSAsset with id {id}.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (30004)",
					"type": "string"
				}
			}
		},
		"ResponsePatchApprovals_400_IdRequired": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "id is a required field.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10002)",
					"type": "string"
				}
			}
		},
		"ResponsePatchApprovals_400_HasDeadlineRequired": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "HasDeadline is required.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10002)",
					"type": "string"
				}
			}
		},
		"ResponsePatchApprovals_400_DeadlineRequired": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "Deadline is required.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10002)",
					"type": "string"
				}
			}
		},
		"ResponsePatchApprovalSettings_200": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"key": {
					"description": "Key for the EnableEmailApprovals setting",
					"type": "string"
				},
				"value": {
					"description": "True/false value for the EnableEmailApprovals setting",
					"type": "string"
				}
			}
		},
		"ResponsePatchApprovalSettings_KeyRequired_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "Key is a required field.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10002)",
					"type": "string"
				}
			}
		},
		"ResponsePatchApprovalSettings_ValueBoolean_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "Value should be boolean.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10002)",
					"type": "string"
				}
			}
		},
		"ResponsePatchApprovalSettings_ValueRequired_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "Value is a required field.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10002)",
					"type": "string"
				}
			}
		},
		"ResponseGetApprovalRoles_200": {
			"type": "object",
			"required": [
				"workflowRoleInstanceId",
				"workflowRoleDefinitionId",
				"roleId",
				"key",
				"name",
				"users"
			],
			"properties": {
				"workflowRoleInstanceId": {
					"description": "ID of workflowRoleInstance record",
					"type": "string"
				},
				"workflowRoleDefinitionId": {
					"description": "ID of WorkflowRoleDefinition record",
					"type": "string"
				},
				"RoleId": {
					"description": "Unique ID of the role",
					"type": "string"
				},
				"key": {
					"description": "Unique key for the role",
					"type": "string"
				},
				"users": {
					"description": "List of users for a specific role",
					"type": "array"
				},
				"users.workflowRoleInstanceUserId": {
					"description": "ID of the workflowRoleInstanceUser record",
					"type": "string"
				},
				"users.workflowItemId": {
					"description": "ID of the workflow item",
					"type": "string"
				},
				"users.workflowRoleInstanceId": {
					"description": "ID of the workflowRoleInstance record",
					"type": "string"
				},
				"users.userId": {
					"description": "ID of the user",
					"type": "string"
				},
				"users.userName": {
					"description": "Name of the user",
					"type": "string"
				},
				"users.memberId": {
					"description": "Member ID (MID)",
					"type": "string"
				},
				"users.enterpriseId": {
					"description": "Enterprise ID (EID)",
					"type": "string"
				},
				"users.isActive": {
					"description": "Indicates if user is active",
					"type": "string"
				}
			}
		},
		"ResponseDeleteWorkflowTeamuser_204": {
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "Value is a required field.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (10002)",
					"type": "string"
				}
			}
		},
		"RequestPostNestedTags": {
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"description": "Name of the tag, up to 120 characters. The only special characters allowed are period (.) and apostrophe (').",
					"type": "string"
				},
				"description": {
					"description": "Description of the tag, up to 256 characters. The only special characters allowed are period (.), apostrophe ('), comma (,), and forward slash (/).",
					"type": "string"
				},
				"parentId": {
					"description": "TagId that you want to be the parent of this tag. If you don’t provide a parentId, or if you specify zero as the parentId, the tag is created as a root tag with no parent.",
					"type": "string"
				},
				"tags": {
					"description": "A list of tags to create as nested tags. To include no nested tags, omit this field. You can add and modify nested tags using the <a href=\"updateNestedTags.htm\">Update Nested Tags</a> or <a href=\"patchNestedTags.htm\">Patch Nested Tags</a> requests.",
					"type": "string"
				}
			}
		},
		"RequestPutNestedTags": {
			"required": [
								"id",
								"name"
			],
			"properties": {
				"id": {
					"description": "TagId of the tag to update.",
					"type": "number"
				},
				"name": {
					"description": "Name of the tag, up to 120 characters. The only special characters allowed are period (.) and apostrophe (').",
					"type": "string"
				},
				"description": {
					"description": "Description of the tag, up to 256 characters. The only special characters allowed are period (.), apostrophe ('), comma (,), and forward slash (/). If you don’t provide a description, any existing description is erased.",
					"type": "string"
				},
				"parentId": {
					"description": "TagId that you want to be the parent of this tag. If you don’t provide a parentId, the parentId (if non-zero) is replaced by zero, meaning no parent tag.",
					"type": "number"
				},
				"tags": {
					"description": "A list of tags to create as nested tags. If you don’t provide a list of tags, any existing tags are removed.",
					"type": "object"
				}
			}
		},
		"RequestPatchNestedTags": {
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"description": "TagId of the tag to update.",
					"type": "number"
				},
				"name": {
					"description": "Name of the tag, up to 120 characters. The only special characters allowed are period (.) and apostrophe (').",
					"type": "string"
				},
				"description": {
					"description": "Description of the tag, up to 256 characters. The only special characters allowed are period (.), apostrophe ('), comma (,), and forward slash (/). If you don’t provide a description, the existing description is not changed.",
					"type": "string"
				},
				"parentId": {
					"description": "TagId that you want to be the parent of this tag. If you don’t provide a parentId, the parentId is not changed.",
					"type": "number"
				},
				"tags": {
					"description": "A list of tags to create as nested tags. If you don’t provide a list of tags, the existing nested tags are not changed.",
					"type": "object"
				}
			}
		},
		"ResponseGetNestedTags": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"id": {
					"description": "TagId of the tag.",
					"type": "integer"
				},
				"name": {
					"description": "Name of the tag.",
					"type": "string"
				},
				"description": {
					"description": "Description of the tag.",
					"type": "string"
				},
				"parentId": {
					"description": "TagId of the parent tag. This field is null or zero if no parent tag exists.",
					"type": "string"
				},
				"tags": {
					"description": "A list of the tag’s nested tags. Add and modify nested tags using the <a href=\"updateNestedTags.htm\">Update Nested Tags</a> or <a href=\"patchNestedTags.htm\">Patch Nested Tags</a> requests.",
					"type": "object"
				}
			}
		},
		"ResponsePostNestedTags": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"id": {
					"description": "TagId of the tag.",
					"type": "integer"
				},
				"name": {
					"description": "Name of the tag.",
					"type": "string"
				},
				"description": {
					"description": "Description of the tag.",
					"type": "string"
				},
				"parentId": {
					"description": "TagId of the parent tag. This field is null or zero if no parent tag exists.",
					"type": "string"
				},
				"tags": {
					"description": "A list of the tag’s nested tags. Add and modify nested tags using the <a href=\"updateNestedTags.htm\">Update Nested Tags</a> or <a href=\"patchNestedTags.htm\">Patch Nested Tags</a> requests.",
					"type": "object"
				}
			}
		},
		"ResponsePutNestedTags": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"id": {
					"description": "TagId of the tag.",
					"type": "integer"
				},
				"name": {
					"description": "Name of the tag.",
					"type": "string"
				},
				"description": {
					"description": "Description of the tag.",
					"type": "string"
				},
				"parentId": {
					"description": "TagId of the parent tag. This field is null or zero if no parent tag exists.",
					"type": "string"
				},
				"tags": {
					"description": "A list of the tag’s nested tags.",
					"type": "object"
				}
			}
		},
		"ResponsePatchNestedTags": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"id": {
					"description": "TagId of the tag.",
					"type": "integer"
				},
				"name": {
					"description": "Name of the tag.",
					"type": "string"
				},
				"description": {
					"description": "Description of the tag.",
					"type": "string"
				},
				"parentId": {
					"description": "TagId of the parent tag. This field is null or zero if no parent tag exists.",
					"type": "string"
				},
				"tags": {
					"description": "A list of the tag’s nested tags.",
					"type": "object"
				}
			}
		},
		"RequestPostTags": {
			"required": [
				"ObjectIds",
				"TagNames"
			],
			"properties": {
				"ObjectIds": {
					"description": "The ObjectIds are the unique IDs for the objects. Each ObjectId is associated with each tag specified in the payload. For Journey Builder, the ObjectIds are the are the OriginalDefinitionId of the journeys.",
					"type": "string"
				},
				"TagNames": {
					"description": "Name of the tag to delete. If a tag name is specified that does not exist, the tag will be created. Tag names for journeys are limited to 128 characters.",
					"type": "string"
				}
			}
		},
		"RequestDeleteTags": {
			"required": [
				"ObjectIds",
				"TagNames"
			],
			"properties": {
				"ObjectIds": {
					"description": "The ObjectIds are the unique IDs for the objects. Each tag is deleted from the ObjectId specified in the payload. For Journey Builder, the ObjectIds are the are the OriginalDefinitionId of the journeys.",
					"type": "string"
				},
				"TagNames": {
					"description": "Name of the tag to delete. For each tag/object pair, the association is deleted only if the association exists. If a tag name is specified that does not exist, it is ignored.",
					"type": "string"
				}
			}
		},
		"RequestDataExtensionRows": {
			"required": [
				"items"
			],
			"properties": {
				"items": {
					"description": "An array of objects, where each object represents a row of data in the target data extension. Each object is expected to contain name-value pairs matching the column name and value of the target.",
					"type": "array"
				}
			}
		},
		"ResponseAsyncDataExtensionRows_202": {
			"required": [
				"requestId"
			],
			"properties": {
				"requestId": {
					"description": "The unique identifier of a successfully queued request. Use this ID in subsequent operations to retrieve the status or the results of the operation.",
					"type": "guid"
				}
			}
		},
		"ResponseAsyncStatus_200": {
			"required": [
				"status",
				"requestId"
			],
			"properties": {
				"status": {
					"description": "Information about the status of the asynchronous request.",
					"type": "object"
				},
				"status.callDateTime": {
					"description": "The date and time the asychronous request was received.",
					"type": "datetime"
				},
				"status.completionDateTime": {
					"description": "The date and time the asychronous request completed processing.",
					"type": "datetime"
				},
				"status.pickupDateTime": {
					"description": "The date and time the asychronous request was picked up for processing.",
					"type": "datetime"
				},
				"status.hasErrors": {
					"description": "Indicates whether the results from processing the request contain any errors.",
					"type": "boolean"
				},
				"status.requestStatus": {
					"description": "Indicates the status of the asychronous request itself (Pending, Completed, Error).",
					"type": "string"
				},
				"status.resultStatus": {
					"description": "Indicates the overall status of the result from processing the request.",
					"type": "string"
				},
				"status.requestId": {
					"description": "The unique identifier of the request for which this status has been retrieved.",
					"type": "guid"
				},
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "guid"
				}
			}
		},
		"ResponseAsyncResults_200": {
			"required": ["page",
				"pageSize",
				"count",
				"requestId"
			],
			"properties": {
				"page": {
					"description": "The requested page number of results.",
					"type": "integer"
				},
				"pageSize": {
					"description": "The requested page size to retrieve. The defaults is 50.",
					"type": "integer"
				},
				"count": {
					"description": "The total count of the results.",
					"type": "integer"
				},
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "guid"
				},
				"items": {
					"description": "The list of results from processing each item in the request.",
					"type": "array"
				},
				"items.errorCode": {
					"description": "The specific error code.",
					"type": "string"
				},
				"items.message": {
					"description": "A description of the error when status is not OK.",
					"type": "string"
				},
				"items.status": {
					"description": "The status if processing the item.",
					"type": "string"
				}
			}
		},
		"ResponseDVBulk_201": {
			"type": "object",
			"required": [
				"requestID"
			],
			"properties": {
				"requestID": {
					"description": "The ID of the bulk insert request that is queued.",
					"type": "GUID"
				}
			}
		},
		"ResponseDVGet_200": {
			"type": "object",
			"required": [
				"enterpriseID",
				"domain",
				"status",
				"domainType",
				"isSendable",
				"emailSendTime"
			],
			"properties": {
				"enterpriseID": {
					"description": "The parent account MID.",
					"type": "long"
				},
				"domain": {
					"description": "The root domain of the email address.",
					"type": "string"
				},
				"status": {
					"description": "The domain verification status of the email address.",
					"type": "string"
				},
				"domainType": {
					"description": "The domain type of the email address.",
					"type": "string"
				},
				"isSendable": {
					"description": "Determines whether or not the email address is sendable.",
					"type": "boolean"
				},
				"emailSendTime": {
					"description": "The date and time stamp of verification email.",
					"type": "datetime"
				}
			}
		},
		"ResponseDVGet_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid field name provided for orderBy. Sorting is supported on domain, status, issendable, domaintype, modifieddate.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for exception",
					"type": "string"
				},
				"description": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVGet_403": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid field name provided for orderBy. Sorting is supported on domain, status, issendable, domaintype, modifieddate.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for exception",
					"type": "string"
				},
				"description": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVGet_500": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid field name provided for orderBy. Sorting is supported on domain, status, issendable, domaintype, modifieddate.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for exception",
					"type": "string"
				},
				"description": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVCreate_201": {
			"type": "object",
			"required": [
				"domain"
			],
			"properties": {
				"domain": {
					"description": "The root domain of the email address.",
					"type": "string"
				}
			}
		},
		"ResponseDVCreate_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid field name provided for orderBy. Sorting is supported on domain, status, issendable, domaintype, modifieddate.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for exception",
					"type": "string"
				},
				"description": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVCreate_403": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid field name provided for orderBy. Sorting is supported on domain, status, issendable, domaintype, modifieddate.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for exception",
					"type": "string"
				},
				"description": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVCreate_500": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid field name provided for orderBy. Sorting is supported on domain, status, issendable, domaintype, modifieddate.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for exception",
					"type": "string"
				},
				"description": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVUpdate_200": {
			"type": "object",
			"required": [
				"domain",
				"isSendable"
			],
			"properties": {
				"domain": {
					"description": "The user and root domain of the email address.",
					"type": "string"
				},
				"isSendable": {
					"description": "Flags email address as sendable or not.",
					"type": "boolean"
				}
			}
		},
		"ResponseDVUpdate_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid field name provided for orderBy. Sorting is supported on domain, status, issendable, domaintype, modifieddate.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for exception",
					"type": "string"
				},
				"description": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVUpdate_403": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid field name provided for orderBy. Sorting is supported on domain, status, issendable, domaintype, modifieddate.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for exception",
					"type": "string"
				},
				"description": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVUpdate_500": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid field name provided for orderBy. Sorting is supported on domain, status, issendable, domaintype, modifieddate.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for exception",
					"type": "string"
				},
				"description": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVDelete_200": {
			"type": "object",
			"required": [
				"message"
			],
			"properties": {
				"message":{
					"description": "Success message showing the number of email addresses deleted: x records successfully updated!",
					"type": "string"
				}
			}
		},
		"ResponseDVDelete_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid email address",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception",
					"type": "string"
				},
				"documentation": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVDelete_403": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Forbidden, Insufficient Privileges",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception",
					"type": "string"
				},
				"documentation": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVDelete_500": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid request",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception",
					"type": "string"
				},
				"documentation": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVRegister_200": {
			"type": "object",
			"required": [
				"domain",
				"key"
			],
			"properties": {
				"domain": {
					"description": "The root domain of the email address.",
					"type": "string"
				},
				"token": {
					"description": "The token added to the DNS.",
					"key": "string"
				}
			}
		},
		"ResponseDVRegister_403": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid domain",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for exception",
					"type": "string"
				},
				"description": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVVerify_200": {
			"type": "object",
			"required": [
				"domain",
				"key"
			],
			"properties": {
				"domain": {
					"description": "The root domain of the email address.",
					"type": "string"
				},
				"key": {
					"description": "The domain’s stored token key.",
					"type": "boolean"
				}
			}
		},
		"ResponseDVVerify_400": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid domain. Can’t verify the domain.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for exception",
					"type": "string"
				},
				"description": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVVerify_403": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid domain. Can’t verify the domain.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for exception",
					"type": "string"
				},
				"description": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVVerify_500": {
			"type": "object",
			"required": [
				"message",
				"errorcode",
				"documentation"
			],
			"properties": {
				"message": {
					"description": "Invalid domain. Can’t verify the domain.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for exception",
					"type": "string"
				},
				"description": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseDVPush_200": {
			"type": "object",
			"required": [
				"domain",
				"message"
			],
			"properties": {
				"domain": {
					"description": "The domain that is pushed to child business units.",
					"type": "string"
				},
				"message": {
					"description": "Indicates whether the domain is added to all child business units.",
					"type": "string"
				}
			}
		},
		"ResponseRestrictContact_200": {
			"required": [
				"operationInitiated",
				"operationID",
				"requestServiceMessageID",
				"responseDateTime",
				"hasErrors",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"operationInitiated": {
					"description": "System-initiated restrict operation.",
					"type": "boolean"
				},
				"operationID": {
					"description": "Auto-generated restrict operation ID. Keep track of this ID because it allows you to check the status of a restriction and decide how to proceed if there is a failure.",
					"type": "integer"
				},
				"requestServiceMessageID": {
					"description": "Service message ID for the request.",
					"type": "guid"
				},
				"responseDateTime": {
					"description": "The datetime restrict response is created in the system in GMT time.",
					"type": "integer"
				},
				"hasErrors": {
					"description": "The requested operation is initiated with an error or not.",
					"type": "boolean"
				},
				"resultMessages": {
					"description": "Array of messages about the restrict operation.",
					"type": "array"
				},
				"serviceMessageID": {
					"description": "Service message ID for the response.",
					"type": "guid"
				}
			}
		},
		"ResponseRestrictContact_400": {
			"required": [
				"operationInitiated",
				"operationID",
				"requestServiceMessageID",
				"responseDateTime",
				"hasErrors",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"operationInitiated": {
					"description": "System-initiated restrict operation.",
					"type": "boolean"
				},
				"operationID": {
					"description": "Auto-generated restrict operation ID. Keep track of this ID because it allows you to check the status of a restriction and decide how to proceed if there is a failure.",
					"type": "integer"
				},
				"requestServiceMessageID": {
					"description": "Service message ID for the request.",
					"type": "guid"
				},
				"responseDateTime": {
					"description": "The datetime restrict response is created in the system in GMT time.",
					"type": "integer"
				},
				"hasErrors": {
					"description": "The requested operation is initiated with error or not. For a 400 response this is true.",
					"type": "boolean"
				},
				"resultMessages": {
					"description": "Array of messages about the restrict operation, with details about the bad request, like resulttype and resultcode.",
					"type": "array"
				},
				"serviceMessageID": {
					"description": "Service message ID for the response.",
					"type": "guid"
				}
			}
		},
		"ResponseRetryOperation_200": {
			"required": [
				"operationID",
				"operationRestarted",
				"requestServiceMessageID",
				"responseDateTime",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"operationID": {
					"description": "Operation ID for the retried request.",
					"type": "integer"
				},
				"operationRestarted": {
					"description": "Indicates whether the request restarted.",
					"type": "boolean"
				},
				"requestServiceMessageID": {
					"description": "Service message ID for the request.",
					"type": "guid"
				},
				"responseDateTime": {
					"description": "The date and time of the retry response is in GMT time.",
					"type": "integer"
				},
				"resultMessages": {
					"description": "Messages about the request, like resulttype and resultcode. If the request results in errors, those details are listed here.",
					"type": "array"
				},
				"serviceMessageID": {
					"description": "Service message ID for the response.",
					"type": "guid"
				}
			}
		},
		"ResponseContactsDeleteRequestsDetails_400": {
			"required": [
				"startDateUtc",
				"endDateUtc",
				"pageSize",
				"pageNumber",
				"statusasofdateutc",
				"requestServiceMessageID",
				"responseDateTime",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"startDateUtc": {
					"description": "Start date and time in UTC of the date range.",
					"type": "datetime"
				},
				"endDateUtc": {
					"description": "End date and time in UTC of the date range.",
					"type": "datetime"
				},
				"pageSize": {
					"type": "integer",
					"description": "Page size of results retrieved."
				},
				"pageNumber": {
					"type": "integer",
					"description": "Page number of results retrieved."
				},
				"statusasofdateutc":{
					"description": "Date and time in UTC when the status of the contact delete request was retrieved.",
					"type": "datetime"
				},
				"requestServiceMessageID": {
					"description": "Service message ID for the request.",
					"type": "guid"
				},
				"responseDateTime": {
					"description": "Date and time in UTC when the response was created in the system.",
					"type": "datetime"
				},
				"resultMessages": {
					"description": "Array of messages about the request. Includes details, such as resulttype and resultcode, about a bad request.",
					"type": "array"
				},
				"serviceMessageID": {
					"description": "Service message ID for the response.",
					"type": "guid"
				}
			}
		},
		"ResponseContactsDeleteRequestsDetails_200":{
			"required": [
				"startDateUtc",
				"endDateUtc",
				"pageSize",
				"pageNumber",
				"operations",
				"operations:operationid",
				"operations:receiveddateutc",
				"operations:status",
				"operations:totalcontactcount",
				"operations:completedcontactcount",
				"operations:laststatusdateutc",
				"operations:deletemethod",
				"statusasofdateutc",
				"requestServiceMessageID",
				"responseDateTime",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"startDateUtc": {
					"description": "Start date and time in UTC of the date range.",
					"type": "datetime"
				},
				"endDateUtc": {
					"description": "End date and time in UTC of the date range.",
					"type": "datetime"
				},
				"pageSize": {
					"type": "integer",
					"description": "Page size of results retrieved."
				},
				"pageNumber": {
					"type": "integer",
					"description": "Page number of results retrieved."
				},
				"operations": {
					"type": "array",
					"description": "Contact delete request information."
				},
				"operations:operationid": {
					"type": "int",
					"description": "Contact delete request ID."
				},
				"operations:receiveddateutc": {
					"type": "datetime",
					"description": "Date and time in UTC when the contact delete request was created in Marketing Cloud."
				},
				"operations:status": {
					"type": "string",
					"description": "Status of the contact delete request."
				},
				"operations:totalcontactcount": {
					"type": "int",
					"description": "Total number of contacts in the contact delete request."
				},
				"operations:completedcontactcount": {
					"type": "int",
					"description": "Number of contacts that were deleted in the delete request."
				},
				"operations:laststatusdateutc": {
					"type": "datetime",
					"description": "Date and time in UTC when the delete request’s status was most recently modified."
				},
				"operations:deletemethod": {
					"type": "string",
					"description": "Method used to delete the contacts."
				},
				"statusasofdateutc":{
					"description": "Date and time in UTC when the status was retrieved.",
					"type": "datetime"
				},
				"requestServiceMessageID": {
					"description": "Service message ID for the request.",
					"type": "guid"
				},
				"responseDateTime": {
					"description": "Date and time in UTC when the response was created in the system.",
					"type": "datetime"
				},
				"resultMessages": {
					"description": "Array of messages about the request. Includes details, such as resulttype and resultcode, about a bad request.",
					"type": "array"
				},
				"serviceMessageID": {
					"description": "Service message ID for the response.",
					"type": "guid"
				}
			}
		},
		"ResponseContactsDeleteRequestsSummary_400": {
			"required": [
				"startDateUtc",
				"endDateUtc",
				"interval",
				"statusasofdateutc",
				"requestServiceMessageID",
				"responseDateTime",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"startDateUtc": {
					"description": "Start date and time in UTC of the date range.",
					"type": "datetime"
				},
				"endDateUtc": {
					"description": "End date and time in UTC of the date range.",
					"type": "datetime"
				},
				"interval": {
					"description": "Interval of the time series. 0 indicates hourly intervals, and 1 indicates daily intervals.",
					"type": "integer"
				},
				"statusasofdateutc":{
					"description": "Date and time in UTC when the status was retrieved.",
					"type": "datetime"
				},
				"requestServiceMessageID": {
					"description": "Service message ID for the request.",
					"type": "guid"
				},
				"responseDateTime": {
					"description": "Date and time in UTC when the response was created in the system.",
					"type": "datetime"
				},
				"resultMessages": {
					"description": "Array of messages about the request. Includes details, such as resulttype and resultcode, about a bad request.",
					"type": "array"
				},
				"serviceMessageID": {
					"description": "Service message ID for the response.",
					"type": "guid"
				}
			}
		},
		"ResponseContactsDeleteRequestsSummary_200":{
			"required": [
				"startDateUtc",
				"endDateUtc",
				"statusasofdateutc",
				"interval",
				"itemcount",
				"totaltimeseries",
				"totaltimeseries:requestcount",
				"totaltimeseries.minvalue",
				"totaltimeseries.maxvalue",
				"totaltimeseries.items",
				"totaltimeseries.items.time",
				"totaltimeseries.items.value",
				"statustimeseries",
				"statustimeseries:status",
				"statustimeseries.requestcount",
				"statustimeseries.minvalue",
				"statustimeseries.maxvalue",
				"statustimeseries.items",
				"statustimeseries.items.time",
				"statustimeseries.items.value"
			],
			"properties": {
				"startDateUtc": {
					"description": "Start date and time in UTC of the date range.",
					"type": "datetime"
				},
				"endDateUtc": {
					"description": "End date and time in UTC of the date range.",
					"type": "datetime"
				},
				"statusasofdateutc": {
					"description": "Date and time in UTC when the status was retrieved.",
					"type": "datetime"
				},
				"interval": {
					"description": "Interval of the time series. 0 indicates hourly intervals, and 1 indicates daily intervals.",
					"type": "integer"
				},
				"itemcount": {
					"description": "Number of items in the time series.",
					"type": "integer"
				},
				"totaltimeseries": {
					"description": "Time series with information about total contact delete requests.",
					"type": "array"
				},
				"totaltimeseries.requestcount": {
					"description": "Number of contact delete requests submitted for the date range.",
					"type": "integer"
				},
				"totaltimeseries.minvalue": {
					"description": "The lowest number of contact delete requests made during the time series.",
					"type": "integer"
				},
				"totaltimeseries.maxvalue": {
					"description": "The most contact delete requests made during the time series.",
					"type": "integer"
				},
				"totaltimeseries.items": {
					"description": "Array of items with the number of contact delete requests made during the interval.",
					"type": "array"
				},
				"totaltimeseries.items.time": {
					"description": "Interval’s beginning date and time in UTC.",
					"type": "datetime"
				},
				"totaltimeseries.items.value": {
					"description": "Number of contact delete requests made during the interval.",
					"type": "integer"
				},
				"statustimeseries": {
					"description": "Time series with information about contact delete requests based on status.",
					"type": "array"
				},
				"statustimeseries.status": {
					"description": "Status of the time series item.",
					"type": "string"
				},
				"statustimeseries.requestcount": {
					"description": "Number of contact delete requests made for the date range.",
					"type": "integer"
				},
				"statustimeseries.minvalue": {
					"description": "The lowest number of contact delete requests made during the time series.",
					"type": "integer"
				},
				"statustimeseries.maxvalue": {
					"description": "The most contact delete requests made during the time series.",
					"type": "integer"
				},
				"statustimeseries.items": {
					"description": "Array of items with the number of contact delete requests made during the interval.",
					"type": "array"
				},
				"statustimeseries.items.time": {
					"description": "Interval's beginning date and time.",
					"type": "datetime"
				},
				"statustimeseries.items.value": {
					"description": "Number of contact delete requests made during the interval.",
					"type": "integer"
				}
			}
		},
		"ResponseGetSendDefinition_200": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"name": {
					"description": "Name of the definition.",
					"type": "string"
				},
				"definitionKey": {
					"description": "Unique, user-generated key to access the definition object.",
					"type": "string"
				},
				"definitionId":{
					"description": "Unique Marketing Cloud object identifier.",
					"type": "string"
				},
				"description": {
					"description": "User-provided description of the send definition.",
					"type": "string"
				},
				"classification": {
					"description": "Marketing Cloud external key of a sending classification defined in Email Studio Administration. Only transactional classifications are permitted. Default is default transactional.",
					"type": "string"
				},
				"status": {
					"description": "Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.",
					"type": "string"
				},
				"createdDate": {
					"description": "Date the definition was created.",
					"type": "string"
				},
				"modifiedDate": {
					"description": "Date and time the definition was most recently changed.",
					"type": "string"
				},
				"content.customerKey": {
					"description": "Unique identifier of the content asset.",
					"type": "string"
				},
				"subscriptions.dataExtension": {
					"description": "Marketing Cloud external key of the triggered send data extension. Each request inserts as a new row in the data extension.",
					"type": "string"
				},
				"subscriptions.list": {
					"description": "Marketing Cloud external key of the list or all subscribers. Contains the subscriber keys and profile attributes.",
					"type": "string"
				},
				"subscriptions.autoAddSubscriber": {
					"description": "Adds the recipient’s email address and contact key as a subscriber key to subscriptions.list. Default is true.",
					"type": "boolean"
				},
				"subscriptions.updateSubscriber": {
					"description": "For email only: Updates the recipient’s contact key as a subscriber key with the provided email address and profile attributes to subscriptions.list. Default is true.",
					"type": "boolean"
				},
				"options.trackLinks": {
					"description": "Wraps links for tracking and reporting. Default is true.",
					"type": "boolean"
				},
				"options.cc": {
					"description": "Include CC email addresses with every send. To CC dynamically at send time, create a profile attribute and use the %%attribute%% syntax.",
					"type": "array"
				},
				"options.bcc": {
						"description": "Include BCC email addresses with every send. To dynamically BCC at send time, create a profile attribute and use the %%attribute%% syntax.",
						"type": "array"
				},
				"journey": {
						"description": "Indicates whether the send definition is available in Journey Builder as a Transactional Send Journey.",
						"type": "boolean"
				},
				"journey.interactionKey": {
						"description": "Unique ID of the Transactional Send Journey.",
						"type": "string"
				}
			}
		},
		"ResponseCreateSendDefinition_201": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"name": {
					"description": "Name of the definition.",
					"type": "string"
				},
				"definitionKey": {
					"description": "Unique, user-generated key to access the definition object.",
					"type": "string"
				},
				"definitionId":{
					"description": "Unique Marketing Cloud object identifier.",
					"type": "string"
				},
				"description": {
					"description": "User-provided description of the send definition.",
					"type": "string"
				},
				"classification": {
					"description": "Marketing Cloud external key of a sending classification defined in Email Studio Administration. Only transactional classifications are permitted. Default is default transactional.",
					"type": "string"
				},
				"status": {
					"description": "Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.",
					"type": "string"
				},
				"createdDate": {
					"description": "Date the definition was created.",
					"type": "string"
				},
				"modifiedDate": {
					"description": "Date and time the definition was most recently changed.",
					"type": "string"
				},
				"content.customerKey": {
					"description": "Unique identifier of the content asset.",
					"type": "string"
				},
				"subscriptions.dataExtension": {
					"description": "Marketing Cloud external key of the triggered send data extension. Each request inserts as a new row in the data extension.",
					"type": "string"
				},
				"subscriptions.list": {
					"description": "Marketing Cloud external key of the list or all subscribers. Contains the subscriber keys and profile attributes.",
					"type": "string"
				},
				"subscriptions.autoAddSubscriber": {
					"description": "Adds the recipient’s email address and contact key as a subscriber key to subscriptions.list. Default is true.",
					"type": "boolean"
				},
				"subscriptions.updateSubscriber": {
					"description": "For email only: Updates the recipient’s contact key as a subscriber key with the provided email address and profile attributes to subscriptions.list. Default is true.",
					"type": "boolean"
				},
				"options.trackLinks": {
					"description": "Wraps links for tracking and reporting. Default is true.",
					"type": "boolean"
				}
			}
		},
		"ResponseUpdateMessageDefinition_200": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"name": {
					"description": "Name of the definition.",
					"type": "string"
				},
				"definitionKey": {
					"description": "Unique, user-generated key to access the definition object.",
					"type": "string"
				},
				"definitionId":{
					"description": "Unique Marketing Cloud object identifier.",
					"type": "string"
				},
				"description": {
					"description": "User-provided description of the send definition.",
					"type": "string"
				},
				"classification": {
					"description": "Marketing Cloud external key of a sending classification defined in Email Studio Administration. Only transactional classifications are permitted. Default is default transactional.",
					"type": "string"
				},
				"status": {
					"description": "Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.",
					"type": "string"
				},
				"createdDate": {
					"description": "Date the definition was created.",
					"type": "string"
				},
				"modifiedDate": {
					"description": "Date and time the definition was most recently changed.",
					"type": "string"
				},
				"content.customerKey": {
					"description": "Unique identifier of the content asset.",
					"type": "string"
				},
				"subscriptions.dataExtension": {
					"description": "Marketing Cloud external key of the triggered send data extension. Each request inserts as a new row in the data extension.",
					"type": "string"
				},
				"subscriptions.list": {
					"description": "Marketing Cloud external key of the list or all subscribers. Contains the subscriber keys and profile attributes.",
					"type": "string"
				},
				"subscriptions.autoAddSubscriber": {
					"description": "Adds the recipient’s email address and contact key as a subscriber key to subscriptions.list. Default is true.",
					"type": "boolean"
				},
				"subscriptions.updateSubscriber": {
					"description": "For email only: Updates the recipient’s contact key as a subscriber key with the provided email address and profile attributes to subscriptions.list. Default is true.",
					"type": "boolean"
				},
				"options.trackLinks": {
					"description": "Wraps links for tracking and reporting. Default is true.",
					"type": "boolean"
				}
			}
		},
		"ResponseDeleteMessageDefinition_200": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"message": {
					"description": "Success",
					"type": "string"
				},
				"deletedDefinitionKey": {
					"description": "New value of the definition key for referencing the deleted definition.",
					"type": "string"
				}
			}
		},
		"ResponseGetDefinitions_200": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"name": {
					"description": "Name of the definition.",
					"type": "string"
				},
				"definitionKey": {
					"description": "Unique, user-generated key to access the definition object.",
					"type": "string"
				},
				"status": {
					"description": "Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.",
					"type": "string"
				},
				"createdDate": {
					"description": "Date the definition was created.",
					"type": "string"
				},
				"modifiedDate": {
					"description": "Date and time the definition was most recently changed.",
					"type": "string"
				}
			}
		},
		"ResponseGetQueueMetricsForDefinition_200": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"ageSeconds": {
					"description": "Age of the oldest unprocessed record in the queue.",
					"type": "integer"
				},
				"count": {
					"description": "Total number of records waiting to be processed in the queue.",
					"type": "integer"
				}
			}
		},
		"ResponseDeleteQueuedMessagesForDefinition_200": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"message": {
					"description": "Status of the request.",
					"type": "string"
				}
			}
		},
		"ResponseSendMessageMultipleRecipients_202": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception",
					"type": "string"
				},
				"messageKey": {
					"description": "Unique identifier to track message send status.",
					"type": "string"
				}
			}
		},
		"ResponseSendMessageSingleRecipient_202": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception",
					"type": "string"
				},
				"messageKey": {
					"description": "Unique identifier to track message send status.",
					"type": "string"
				}
			}
		},
		"ResponseGetSendStatusForRecipient_200": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"eventCategoryType": {
					"description": "TransactionalSendEvents event type. EmailSent indicates that the email was sent to the email provider. EmailNotSent indicates that the email was not sent and includes the reason. EmailQueued indicates that the email has not yet been processed for sending.",
					"type": "string"
				},
				"timestamp": {
					"description": "Time the event occured in Central Standard Time (no daylight savings)",
					"type": "string"
				},
				"compositeId": {
					"description": "Marketing Cloud-specific processing identifier that can be referenced for support.",
					"type": "string"
				},
				"messageKey": {
					"description": "Unique identifier to track message send status.",
					"type": "string"
				},
				"contactKey": {
					"description": "Unique identifier for a subscriber in Marketing Cloud.",
					"type": "string"
				},
				"to": {
					"description": "Channel address of the recipient. For email, it’s the recipient's email address.",
					"type": "string"
				}
			}
		},
		"ResponseGetMessagesNotSent_200": {
			"required": [],
			"properties": {
				"lastEventID": {
					"description": "Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest.",
					"type": "integer"
				},
				"statusCode": {
					"description": "Integer value of the reason the send did not complete.  Review <a href=\"https://help.salesforce.com/articleView?id=mc_es_email_send_error_codes.htm&type=5\">Email Send Error Codes</a> for more information.",
					"type": "integer"
				},
				"statusMessage": {
					"description": "The reason the send did not complete. Review <a href=\"https://help.salesforce.com/articleView?id=mc_es_email_send_error_codes.htm&type=5\">Email Send Error Codes</a> for more information.",
					"type": "string"
				},
				"eventCategoryType": {
					"description": "TransactionalSendEvent event type. EmailSent indicates that the email was sent to the email provider. EmailNotSent indicates that the email was not sent and includes the reason. EmailQueued indicates that the email has not yet been processed for sending.",
					"type": "string"
				},
				"timestamp": {
					"description": "Time the event occured in Central Standard Time (no daylight savings)",
					"type": "string"
				},
				"definitionKey": {
					"description": "Unique identifier of the definition.",
					"type": "string"
				},
				"eventID": {
					"description": "Numeric identifier of the event.",
					"type": "integer"
				},
				"messageKey": {
					"description": "Unique identifier to track message send status.",
					"type": "string"
				},
				"contactKey": {
					"description": "Unique identifier for a subscriber in Marketing Cloud.",
					"type": "string"
				},
				"to": {
					"description": "Channel address of the recipient. For email, it’s the recipient's email address. For SMS, it’s the recipient's mobile number.",
					"type": "string"
				}
			}
		},
		"ResponseGetSendDefinitionSMS_200": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"name": {
					"description": "Name of the definition.",
					"type": "string"
				},
				"definitionKey": {
					"description": "Unique, user-generated key to access the definition object.",
					"type": "string"
				},
				"definitionId": {
					"description": "Unique Marketing Cloud object identifier.",
					"type": "string"
				},
				"description": {
					"description": "User-provided description of the send definition.",
					"type": "string"
				},
				"status": {
					"description": "Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.",
					"type": "string"
				},
				"createdDate": {
					"description": "Date the definition was created.",
					"type": "string"
				},
				"modifiedDate": {
					"description": "Date and time the definition was most recently changed.",
					"type": "string"
				},
				"content.message": {
					"description": "The message content that you want sent with each message. Use substitution strings and AMPscript to personalize the message.",
					"type": "string"
				},
				"subscriptions.shortCode": {
					"description": "The short or long code for the mobile transmissions for each message on this definition.",
					"type": "string"
				},
				"subscriptions.countryCode": {
					"description": "The country code associated with the shortCode for the mobile transmissions for each message on this definition. Don't use for long codes, unless your account configuration requires it.",
					"type": "string"
				},
				"subscriptions.keyword": {
					"description": "The keyword used to track messages",
					"type": "string"
				},
				"subscriptions.autoAddSubscriber": {
					"description": "Allows you to add a recipient as subscriber against the shortCode using contactKey. When false, the message is rejected if contactKey doesn’t exist as a subscriber. Default is true.",
					"type": "boolean"
				},
				"subscriptions.updateSubscriber": {
					"description": "Updates the recipient subscriber data including mobile number. Default is true.",
					"type": "boolean"
				}
			}
		},
		"ResponseCreateSendDefinitionSMS_201": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"name": {
					"description": "Name of the definition.",
					"type": "string"
				},
				"definitionKey": {
					"description": "Unique, user-generated key to access the definition object.",
					"type": "string"
				},
				"definitionId": {
					"description": "Unique Marketing Cloud object identifier.",
					"type": "string"
				},
				"description": {
					"description": "User-provided description of the send definition.",
					"type": "string"
				},
				"status": {
					"description": "Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.",
					"type": "string"
				},
				"createdDate": {
					"description": "Date the definition was created.",
					"type": "string"
				},
				"modifiedDate": {
					"description": "Date and time the definition was most recently changed.",
					"type": "string"
				},
				"content.message": {
					"description": "The message content that you want sent with each message. Use substitution strings and AMPscript to personalize the message.",
					"type": "string"
				},
				"subscriptions.shortCode": {
					"description": "The short or long code for the mobile transmissions for each message on this definition.",
					"type": "string"
				},
				"subscriptions.countryCode": {
					"description": "The country code associated with the shortCode for the mobile transmissions for each message on this definition. Don't use for long codes, unless your account configuration requires it.",
					"type": "string"
				},
				"subscriptions.keyword": {
					"description": "The keyword used to track messages",
					"type": "string"
				},
				"subscriptions.autoAddSubscriber": {
					"description": "Allows you to add a recipient as subscriber against the shortCode using contactKey. When false, the message is rejected if contactKey doesn’t exist as a subscriber. Default is true.",
					"type": "boolean"
				},
				"subscriptions.updateSubscriber": {
					"description": "Updates the recipient subscriber data including mobile number. Default is true.",
					"type": "boolean"
				}
			}
		},
		"ResponseUpdateMessageDefinitionSMS_200": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"name": {
					"description": "Name of the definition.",
					"type": "string"
				},
				"definitionKey": {
					"description": "Unique, user-generated key to access the definition object.",
					"type": "string"
				},
				"definitionId": {
					"description": "Unique Marketing Cloud object identifier.",
					"type": "string"
				},
				"description": {
					"description": "User-provided description of the send definition.",
					"type": "string"
				},
				"status": {
					"description": "Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.",
					"type": "string"
				},
				"createdDate": {
					"description": "Date the definition was created.",
					"type": "string"
				},
				"modifiedDate": {
					"description": "Date and time the definition was most recently changed.",
					"type": "string"
				},
				"content.message": {
					"description": "The message content that you want sent with each message. Use substitution strings and AMPscript to personalize the message.",
					"type": "string"
				},
				"subscriptions.shortCode": {
					"description": "The short or long code for the mobile transmissions for each message on this definition.",
					"type": "string"
				},
				"subscriptions.countryCode": {
					"description": "The country code associated with the shortCode for the mobile transmissions for each message on this definition. Don't use for long codes, unless your account configuration requires it.",
					"type": "string"
				},
				"subscriptions.keyword": {
					"description": "The keyword used to track messages",
					"type": "string"
				},
				"subscriptions.autoAddSubscriber": {
					"description": "Allows you to add a recipient as subscriber against the shortCode using contactKey. When false, the message is rejected if contactKey doesn’t exist as a subscriber. Default is true.",
					"type": "boolean"
				},
				"subscriptions.updateSubscriber": {
					"description": "Updates the recipient subscriber data including mobile number. Default is true.",
					"type": "boolean"
				}
			}
		},
		"ResponseDeleteMessageDefinitionSMS_200": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"message": {
					"description": "Success",
					"type": "string"
				},
				"deletedDefinitionKey": {
					"description": "New value of the definition key for referencing the deleted definition.",
					"type": "string"
				}
			}
		},
		"ResponseGetDefinitionsSMS_200": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"name": {
					"description": "Name of the definition.",
					"type": "string"
				},
				"definitionKey": {
					"description": "Unique, user-generated key to access the definition object.",
					"type": "string"
				},
				"status": {
					"description": "Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.",
					"type": "string"
				},
				"createdDate": {
					"description": "Date the definition was created.",
					"type": "string"
				},
				"modifiedDate": {
					"description": "Date and time the definition was most recently changed.",
					"type": "string"
				}
			}
		},
		"ResponseSendMessageMultipleRecipientsSMS_202": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception",
					"type": "string"
				},
				"messageKey": {
					"description": "Unique identifier to track message send status.",
					"type": "string"
				}
			}
		},
		"ResponseSendMessageSingleRecipientSMS_202": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception",
					"type": "string"
				},
				"messageKey": {
					"description": "Unique identifier to track message send status.",
					"type": "string"
				}
			}
		},
		"ResponseGetSendStatusForRecipientSMS_200": {
			"required": [],
			"properties": {
				"requestId": {
					"description": "The unique identifier of this request.",
					"type": "string"
				},
				"eventCategoryType": {
					"description": "TransactionalSendEvents event type. SMSSent indicates that the SMS was sent to the SMS provider. SMSNotSent indicates that the SMS was not sent and includes the reason. SMSQueued indicates that the SMS has not yet been processed for sending.",
					"type": "string"
				},
				"timestamp": {
					"description": "Time the event occured in Central Standard Time (no daylight savings)",
					"type": "string"
				},
				"compositeId": {
					"description": "Marketing Cloud-specific processing identifier that can be referenced for support.",
					"type": "string"
				},
				"messageKey": {
					"description": "Unique identifier to track message send status.",
					"type": "string"
				},
				"contactKey": {
					"description": "Unique identifier for a subscriber in Marketing Cloud.",
					"type": "string"
				},
				"to": {
					"description": "Channel address of the recipient. For SMS, it’s the recipient's mobile number.",
					"type": "string"
				}
			}
		},
		"ResponseGetMessagesNotSentSMS_200": {
			"required": [],
			"properties": {
				"lastEventID": {
					"description": "Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest.",
					"type": "integer"
				},
				"statusCode": {
					"description": "Integer value of the reason the send did not complete. Review <a href=\"https://help.salesforce.com/articleView?id=mc_es_email_send_error_codes.htm&type=5\">Send Error Codes</a> for more information.",
					"type": "integer"
				},
				"statusMessage": {
					"description": "The reason the send did not complete. Review <a href=\"https://help.salesforce.com/articleView?id=mc_es_email_send_error_codes.htm&type=5\">Send Error Codes</a> for more information.",
					"type": "string"
				},
				"eventCategoryType": {
					"description": "TransactionalSendEvent event type. SMSSent indicates that the message was sent for delivery. SMSNotSent indicates that the message was not sent and includes the reason. SMSQueued indicates that the SMS has not yet been processed for sending.",
					"type": "string"
				},
				"timestamp": {
					"description": "Time the event occured in Central Standard Time (no daylight savings)",
					"type": "string"
				},
				"definitionKey": {
					"description": "Unique identifier of the definition.",
					"type": "string"
				},
				"eventID": {
					"description": "Numeric identifier of the event.",
					"type": "integer"
				},
				"messageKey": {
					"description": "Unique identifier to track message send status.",
					"type": "string"
				},
				"contactKey": {
					"description": "Unique identifier for a subscriber in Marketing Cloud.",
					"type": "string"
				},
				"to": {
					"description": "Channel address of the recipient. For SMS, it’s the recipient's mobile address.",
					"type": "string"
				}
			}
		},
		"RequestCreateSendDefinitionSMS": {
			"type": "object",
			"required": [
				"definitionKey",
				"name",
				"content.message",
				"subscriptions.keyword",
				"subscriptions.shortCode"
			],
			"properties": {
				"definitionKey": {
					"description": "Unique, user-generated key to access the definition object.",
					"type": "string"
				},
				"name": {
					"description": "Name of the definition. Must be unique.",
					"type": "string"
				},
				"content.message": {
					"description": "The message content that you want sent with each message. Use substitution strings and AMPscript to personalize the message.",
					"type": "string"
				},
				"status": {
					"description": "Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.",
					"type": "string"
				},
				"description": {
					"description": "User-provided description of the send definition.",
					"type": "string"
				},
				"subscriptions.shortCode": {
					"description": "The short or long code for the mobile transmissions for each message on this definition.",
					"type": "string"
				},
				"subscriptions.countryCode": {
					"description": "The country code associated with the shortCode for the mobile transmissions for each message on this definition. Don't use for long codes, unless your account configuration requires it.",
					"type": "string"
				},
				"subscriptions.keyword": {
					"description": "The keyword used to track messages",
					"type": "string"
				},
				"subscriptions.autoAddSubscriber": {
					"description": "Allows you to add a recipient as subscriber against the shortCode using contactKey. When false, the message is rejected if contactKey doesn’t exist as a subscriber. Default is true.",
					"type": "boolean"
				}
			}
		},
		"RequestUpdateSendDefinitionSMS": {
			"type": "object",
			"required": [
				"name",
				"content.message",
				"subscriptions.shortCode"
			],
			"properties": {
				"name": {
					"description": "Name of the definition. Must be unique.",
					"type": "string"
				},
				"content.message": {
					"description": "The message content that you want sent with each message. Use substitution strings and AMPscript to personalize the message.",
					"type": "string"
				},
				"status": {
					"description": "Operational state of the definition: active, inactive, or deleted. A message sent to an active definition is processed and delivered. A message sent to an inactive definition isn’t processed or delivered. Instead, the message is queued for later processing for up to three days.",
					"type": "string"
				},
				"description": {
					"description": "User-provided description of the send definition.",
					"type": "string"
				},
				"subscriptions.shortCode": {
					"description": "The short or long code for the mobile transmissions for each message on this definition.",
					"type": "string"
				},
				"subscriptions.countryCode": {
					"description": "The country code associated with the shortCode for the mobile transmissions for each message on this definition. Don't use for long codes, unless your account configuration requires it.",
					"type": "string"
				},
				"subscriptions.keyword": {
					"description": "The keyword used to track messages",
					"type": "string"
				},
				"subscriptions.autoAddSubscriber": {
					"description": "Permits adding a recipient as subscriber against the shortCode using contactKey. When false, the message is rejected if contactKey does not exist as a subscriber. Default is true.",
					"type": "boolean"
				}
			}
		},
		"RequestSendMessageMultipleRecipientsSMS": {
			"type": "object",
			"required": [
				"definitionKey",
				"recipients",
				"recipients.to"
			],
			"properties": {
				"definitionKey": {
					"description": "Unique identifier of the definition.",
					"type": "string"
				},
				"recipients": {
					"description": "Array of recipient objects that contain parameters and metadata for the recipients, such as send tracking and personalization attributes. Use this parameter to send to multiple recipients in one request. Use either the recipient or recipients parameter, but not both.",
					"type": "array"
				},
				"recipients.contactKey": {
					"description": "Unique identifier for a subscriber in Marketing Cloud. Each request must include a contactKey. You can use an existing subscriber key or create one at send time by using the recipient’s email address.",
					"type": "string"
				},
				"recipients.to": {
					"description": "Channel address of the recipient.",
					"type": "string"
				},
				"recipients.messageKey": {
					"description": "Unique identifier used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Can be up to 100 characters, and there are no restricted characters. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.",
					"type": "string"
				},
				"recipients.attributes": {
					"description": "Information used to personalize the message for the recipient. Written as key:value pairs. The attributes match profile attributes, content attributes, or triggered send data extension attributes.",
					"type": "object"
				},
				"subscriptions.resubscribe": {
					"description": "Forces the message send request to subscribe the mobile number back into a short code if a user may have requested STOP. Often used to ensure that critical transactional messages are delivered irrespective of a mobile number subscriber status.",
					"type": "boolean"
				},
				"content.message": {
					"description": "Override for message content in the definition that you want sent with each message. Use substitution strings to personalize the content.",
					"type": "string"
				},
				"attributes": {
					"description": "Information used to personalize the message for the request. Written as key:value pairs. The attributes match profile attributes, content attributes, or triggered send data extension attributes.",
					"type": "object"
				}
			}
		},
		"RequestSendMessageSingleRecipientSMS": {
			"type": "object",
			"required": [
				"definitionKey",
				"recipient",
				"recipient.to"
			],
			"properties": {
				"definitionKey": {
					"description": "Unique identifier of the definition.",
					"type": "string"
				},
				"recipient": {
					"description": "Object that contains parameters and metadata for the recipient, such as send tracking and personalization attributes. Use this parameter to send to one recipient. Use either the recipient or recipients parameter, but not both.",
					"type": "object"
				},
				"recipient.contactKey": {
					"description": "Unique identifier for a subscriber in Marketing Cloud. Each request must include a contactKey. You can use an existing subscriber key or create one at send time by using the recipient’s email address.",
					"type": "string"
				},
				"recipient.to": {
					"description": "Channel address of the recipient.",
					"type": "string"
				},
				"recipient.attributes": {
					"description": "Information used to personalize the message for the recipient. Written as key:value pairs. The attributes match profile attributes, content attributes, or triggered send data extension attributes.",
					"type": "object"
				},
				"content.message": {
					"description": "Override for message content in the definition that you want sent with each message. Use substitution strings to personalize the content.",
					"type": "string"
				}
			}
		},
		"ResponseContactPreferences_500": {
			"type": "object",
			"required": [],
			"properties": {
				"Message": {
					"description": "Internal server error",
					"type": "string"
				},
				"ErrorCode": {
					"description": "Error code for the exception (10000)",
					"type": "number"
				}
			}
		},
		"ResponseContactPreferences_404": {
			"type": "object",
			"required": [
				"message",
				"errorcode"
			],
			"properties": {
				"message": {
					"description": "No workflow teams found for workflow object type: [workflowObjectType]",
					"type": "string"
				},
				"errorcode": {
					"description": "Error code for the exception (30003)",
					"type": "string"
				}
			}
		},
		"ResponseDiscoveryInfo_400":{
			"type": "object",
			"required": [],
			"properties": {
				"message": {
					"description": "Invalid request",
					"type": "string"
				}
			}
		},
		"ResponseDiscoveryInfo_200":{
			"type": "object",
			"required": [],
			"properties": {
				"subject": {
					"description": "Marketing Cloud username that you requested base URIs for.",
					"type": "string"
				},
				"links": {
					"description": "List of tenant-specific REST and authentication base URIs for the username.",
					"type": "object"
				}
			}
		},
		"ResponseUserInfo_401":{
			"type": "object",
			"required": [],
			"properties": {
				"error": {
					"description": "Access token or authentication TSE provided is invalid.",
					"type": "string"
				},
				"error_description": {
					"description": "Invalid access token or not authorized to use this authentication base URI. Use your authentication base URI found in Marketing Cloud Installed Packages. Don’t use exacttargetapis.com.",
					"type": "string"
				},
				"error_uri": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseContactPreferences_200": {
			"required": [
				"items",
				"items.contactID",
				"requestServiceMessageID",
				"responseDateTime",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {

				"items": {
					"description": "Array of contact IDs and other properties to add.",
					"type": "array"
				},
				"items.contactID": {
					"description": "Unique ID for the contact.",
					"type": "long"
				},
				"items.hasOptedOutTracking": {
					"description": "Indicates whether a contact opted out of tracking information.",
					"type": "boolean"
				},
				"rowsInserted": {
					"description": "Number of preferences inserted.",
					"type": "integer"
				},
				"rowsUpdated": {
					"description": "Number of preferences updated.",
					"type": "integer"
				},
				"rowsDeleted": {
					"description": "Number of preferences deleted.",
					"type": "integer"
				},
				"requestServiceMessageID": {
					"description": "Service message ID for the request.",
					"type": "guid"
				},
				"responseDateTime": {
					"description": "Date and time of the retry response in UTC.",
					"type": "integer"
				},
				"resultMessages": {
					"description": "Array of messages about the request. Includes details, such as resulttype and resultcode, about a bad request.",
					"type": "array"
				},
				"serviceMessageID": {
					"description": "Service message ID for the response.",
					"type": "guid"
				}
			}
		},
		"ResponseContactPreferencesById_200": {
			"required": [
				"value",
				"value.contactID",
				"requestServiceMessageID",
				"responseDateTime",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {

				"value": {
					"description": "Contains the contact ID and other properties to add.",
					"type": "object"
				},
				"value.contactID": {
					"description": "Unique ID for the contact.",
					"type": "long"
				},
				"value.hasOptedOutTracking": {
					"description": "Indicates whether a contact opted out of tracking information.",
					"type": "boolean"
				},
				"rowsInserted": {
					"description": "Number of preferences inserted.",
					"type": "integer"
				},
				"rowsUpdated": {
					"description": "Number of preferences updated.",
					"type": "integer"
				},
				"rowsDeleted": {
					"description": "Number of preferences deleted.",
					"type": "integer"
				},
				"requestServiceMessageID": {
					"description": "Service message ID for the request.",
					"type": "guid"
				},
				"responseDateTime": {
					"description": "Date and time of the retry response in UTC.",
					"type": "integer"
				},
				"resultMessages": {
					"description": "Array of messages about the request. Includes details, such as resulttype and resultcode, about a bad request.",
					"type": "array"
				},
				"serviceMessageID": {
					"description": "Service message ID for the response.",
					"type": "guid"
				}
			}
		},
		"ResponseSearchContactPreferencesByReferenceType_200": {
			"required": [
				"items",
				"items.contactID",
				"requestServiceMessageID",
				"responseDateTime",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"items": {
					"description": "Array of contact IDs and other properties to add.",
					"type": "array"
				},
				"items.contactID": {
					"description": "Unique ID for the contact.",
					"type": "long"
				},
				"items.hasOptedOutTracking": {
					"description": "Indicates whether a contact opted out of tracking information.",
					"type": "boolean"
				},
				"rowsAffected": {
					"description": "Number of rows returned.",
					"type": "integer"
				},
				"requestServiceMessageID": {
					"description": "Service message ID for the request.",
					"type": "guid"
				},
				"responseDateTime": {
					"description": "Date and time of the retry response in UTC.",
					"type": "integer"
				},
				"resultMessages": {
					"description": "Array of messages about the request. Includes details, such as resulttype and resultcode, about a bad request.",
					"type": "array"
				},
				"serviceMessageID": {
					"description": "Service message ID for the response.",
					"type": "guid"
				}
			}
		},
		"ResponseRetrieveContactPreferencesById_200": {
			"required": [
				"value",
				"value.contactID",
				"requestServiceMessageID",
				"responseDateTime",
				"resultMessages",
				"serviceMessageID"
			],
			"properties": {
				"value": {
					"description": "Contains the contact ID and other properties to add.",
					"type": "object"
				},
				"value.contactID": {
					"description": "Unique ID for the contact.",
					"type": "long"
				},
				"value.hasOptedOutTracking": {
					"description": "Indicates whether a contact opted out of tracking information.",
					"type": "boolean"
				},
				"rowsAffected": {
					"description": "Number of rows returned.",
					"type": "integer"
				},
				"requestServiceMessageID": {
					"description": "Service message ID for the request.",
					"type": "guid"
				},
				"responseDateTime": {
					"description": "Date and time of the retry response in UTC.",
					"type": "integer"
				},
				"resultMessages": {
					"description": "Array of messages about the request. Includes details, such as resulttype and resultcode, about a bad request.",
					"type": "array"
				},
				"serviceMessageID": {
					"description": "Service message ID for the response.",
					"type": "guid"
				}
			}
		},
		"ResponseUserInfo_400":{
			"type": "object",
			"required": [],
			"properties": {
				"error": {
					"description": "Invalid request. Missing access token.",
					"type": "string"
				},
				"error_description": {
					"description": "Make sure that the authorization header isn’t empty or null.",
					"type": "string"
				},
				"error_uri": {
					"description": "https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/error-handling.htm",
					"type": "string"
				}
			}
		},
		"ResponseUserInfo_200":{
			"type": "object",
			"required": [],
			"properties": {
				"exp": {
					"description": "UNIX timestamp when the access token expires.",
					"type": "integer"
				},
				"iss": {
					"description": "Issuer URI",
					"type": "string"
				},
				"user": {
					"description": "User information",
					"type": "object"
				},
				"user.sub": {
					"description": "Employee ID of the user. If view=oidc is specified in the request, this value is https://mc.auth.marketingcloudapis.com/uid/&lt;employee_id&gt;",
					"type": "string"
				},
				"user.name": {
					"description": "User’s Marketing Cloud username.",
					"type": "string"
				},
				"user.preferred_username": {
					"description": "User’s Marketing Cloud user ID.",
					"type": "string"
				},
				"user.email": {
					"description": "Email address associated with the user’s Marketing Cloud account.",
					"type": "string"
				},
				"user.locale": {
					"description": "Account user’s language and country codes.",
					"type": "string"
				},
				"user.zoneinfo": {
					"description": "Principal city in the user’s time zone. Example: Europe/London.",
					"type": "string"
				},
				"user.timezone": {
					"description": "User's time zone information.",
					"type": "object"
				},
				"user.timezone.longName": {
					"description": "Friendly name of the user’s time zone.",
					"type": "string"
				},
				"user.timezone.shortName": {
					"description": "Code for the user’s time zone, in UTC.",
					"type": "string"
				},
				"user.timezone.offset": {
					"description": "Coordinated Universal Time (UTC) offset.",
					"type": "double"
				},
				"user.timezone.dst": {
					"description": "Indicates whether daylight time is applied to the user’s time zone setting.",
					"type": "boolean"
				},
				"organization": {
					"description": "Organization information.",
					"type": "object"
				},
				"organization.member_id": {
					"description": "Marketing Cloud account member ID.",
					"type": "integer"
				},
				"organization.enterprise_id": {
					"description": "Marketing Cloud top-level account enterprise ID.",
					"type": "integer"
				},
				"organization.enterprise_name": {
					"description": "Name of the top-level Marketing Cloud enterprise account.",
					"type": "string"
				},
				"organization.account_type": {
					"description": "Type of account. Possible values are core, reseller, tiered, and enterprise.",
					"type": "string"
				},
				"organization.stack_key": {
					"description": "Marketing Cloud server instance that the account is on.",
					"type": "string"
				},
				"organization.region": {
					"description": "The account’s data center region. Possible values are NA1 and EU1.",
					"type": "string"
				},
				"organization.locale": {
					"description": "Language and country code for the top-level account.",
					"type": "string"
				},
				"organization.zoneinfo": {
					"description": "Principal city in the top-level account’s time zone. Example: Europe/London.",
					"type": "string"
				},
				"organization.timezone": {
					"description": "Top-level account’s time zone information.",
					"type": "object"
				},
				"organization.timezone.longName": {
					"description": "Friendly name of the time zone for the top-level account.",
					"type": "string"
				},
				"organization.timezone.shortName": {
					"description": "Code for the top-level account’s time zone code, in UTC.",
					"type": "string"
				},
				"organization.timezone.offset": {
					"description": "Coordinated Universal Time (UTC) offset.",
					"type": "double"
				},
				"organization.timezone.dst": {
					"description": "Indicates whether daylight time is applied to the top-level account’s time zone setting.",
					"type": "boolean"
				},
				"rest": {
					"description": "Base URIs",
					"type": "object"
				},
				"rest.rest_instance_url": {
					"description": "REST base URI",
					"type": "string"
				},
				"rest.soap_instance_url": {
					"description": "SOAP base URI",
					"type": "string"
				},
				"application": {
					"description": "Application information",
					"type": "object"
				},
				"application.id": {
					"description": "Application’s package ID.",
					"type": "string"
				},
				"application.name": {
					"description": "Application’s package name.",
					"type": "string"
				},
				"application.redirectUrl": {
					"description": "URIs set for the application in the package.",
					"type": "array"
				},
				"application.appScopes": {
					"description": "Package scopes supported for the application.",
					"type": "array"
				},
				"permissions": {
					"description": "Permissions information",
					"type": "object"
				},
				"permissions.objectTypeName": {
					"description": "Name of the type of object permission. Example: Email.",
					"type": "string"
				},
				"permissions.operationName": {
					"description": "Name of the permission operation. Example: Update.",
					"type": "string"
				},
				"permissions.name": {
					"description": "Permission name",
					"type": "string"
				},
				"permissions.id": {
					"description": "Permission ID. Review <a href=\"https://developer.salesforce.com/docs/atlas.en-us.mc-apis.meta/mc-apis/rest-permissions-and-scopes.htm\">REST API Permission IDs and Scopes</a>.",
					"type": "integer"
				}
			}
		},
		"OttSendMessageRequestEntity": {
			"type": "object",
			"required": [
				"messageKey",
				"from",
				"from.senderType",
				"from.senderId",
				"to",
				"message",
				"message.contents",
				"message.contents.type",
				"validityPeriod"
			],
			"properties": {
				"messageKey": {
					"description": "User-defined message identifier.",
					"type": "string"
				},
				"messageGroupKey": {
					"description": "User-defined message identifier to group a number of send requests.",
					"type": "string"
				},
				"from": {
					"description": "Object containing the senderType and senderId.",
					"type": "object"
				},
				"from.senderType": {
					"description": "Indicates the name of the OTT network the resource is being registered with values: line, messenger.",
					"type": "string"
				},
				"from.senderId": {
					"description": "Indicates the identifier of the OTT resource sending the message: LINE Channel Id, Messenger Page Id.",
					"type": "string"
				},
				"to": {
					"description": "Message Recipient details. For Messenger: Either ottId or userReference is required. If both ottId and userReference are provided, userReference is used for the send request. For LINE: ottId is required. If both ottId and userReference are provided, userReference is used for send request.",
					"type": "object"
				},
				"to.ottId": {
					"description": "Recipient ID of the user. For LINE, if userReference is invalid, a retry is attempted with ottId as senderId.",
					"type": "string"
				},
				"to.userReference": {
					"description": "Alternate Recipient ID of the user. For Messenger: user_ref can be passed as userReference. For LINE, reply_token can be passed as userReference.",
					"type": "string"
				},
				"message": {
					"description": "Message contents of the send request.",
					"type": "object"
				},
				"message.subject": {
					"description": "Message name",
					"type": "string"
				},
				"message.contents": {
					"description": "Message content blocks of the send message request. For messenger, only 1 content block is allowed. For LINE, upto 5 content blocks are allowed.",
					"type": "array"
				},
				"message.contents.type": {
					"description": "Indicates the message content type of the send request with values: text, image, audio, video, native.",
					"type": "string"
				},
				"message.contents.text": {
					"description": "Message text to be sent out to the recipient. Required for 'text' type message content.",
					"type": "string"
				},
				"message.contents.url": {
					"description": "URL of the multimedia attachment to be sent out to the recipient. Required for 'image, audio, video' type message content.",
					"type": "string"
				},
				"message.contents.altUrl": {
					"description": "Alternate URL of the multimedia attachment to be sent out to the recipient. Required for LINE for 'image, video' type message content.",
					"type": "string"
				},
				"message.contents.duration": {
					"description": "Length of the audio multimedia attachment to be sent out to the recipient. Required for LINE for 'audio' type message content.",
					"type": "string"
				},
				"message.contents.nativePayload": {
					"description": "Ott-network-specific blob of JSON payload passed in message request.",
					"type": "object"
				},
				"message.contents.isReusable": {
					"description": "Indicates if a multimedia attachment can be reused for future messages. Only supported for Messenger.",
					"type": "boolean"
				},
				"message.contents.attachmentId": {
					"description": "Attachment Id of a reusable multimedia asset. Only supported for Messenger.",
					"type": "string"
				},
				"message.customKeys": {
					"description": "Custom keys to pass-through in the message payload.",
					"type": "array"
				},
				"message.customKeys.messagingType": {
					"description": "Indicates the messaging_type of a messenger send request with values: RESPONSE, UPDATE, MESSAGE_TAG. Required for Messenger send requests.",
					"type": "string"
				},
				"message.customKeys.tag": {
					"description": "Message Tag of a messenger send request. Required for Messenger send request if messagingType = Message_TAG.",
					"type": "string"
				},
				"message.customKeys.notificationType": {
					"description": "Indicates the push notification type for message send request with values: REGULAR, SILENT_PUSH, NO_PUSH. Required for Messenger. Optional for Messenger send requests.",
					"type": "string"
				},
				"validityPeriod": {
					"description": "Time period for which the request is valid. This field is not yet supported.",
					"type": "string"
				}
			}
		},
		"ResponseOttRetrieveSendMessage_200": {
			"type": "object",
			"required": [],
			"properties": {
				"requestBody": {
					"description": "Returns the request body.",
					"type": "object"
				},
				"status": {
					"description": "Status of the message send request.",
					"type": "array"
				},
				"status.event": {
					"description": "Indicates the type of event with values: Created, Queued, Sent, Error (if any).",
					"type": "string"
				},
				"status.eventDateTime": {
					"description": "Timestamp indicating when the event occured.",
					"type": "datetime"
				}
			}
		},
		"OttRegistrationRequestEntity": {
			"type": "object",
			"required": [
				"ottPlatformName",
				"ottPlatformAttributes"
			],
			"properties": {
				"ottPlatformName": {
					"description": "Indicate the name of the OTT network the resource is being registered with values: line, messenger.",
					"type": "string"
				},
				"ottPlatformAttributes": {
					"type": "object",
					"description": "Object containing OTT platform attributes."
				},
				"ottPlatformAttributes.applicationId" : {
					"description" : "Facebook Application Id. Required for registering Messenger resource.",
					"type" : "string"
				},
				"ottPlatformAttributes.applicationSecret" : {
					"description" : "Facebook Application Secret. Required for registering Messenger resource.",
					"type" : "string"
				},
				"ottPlatformAttributes.pageId" : {
					"description" : "Facebook Page Id. Required for registering Messenger resource.",
					"type" : "string"
				},
				"ottPlatformAttributes.pageName" : {
					"description" : "Facebook Page Name. Required for registering Messenger resource.",
					"type" : "string"
				},
				"ottPlatformAttributes.pageAccessToken" : {
					"description" : "Access Token required to authenticate send messages requests to OTT networks.",
					"type" : "string"
				},
				"ottPlatformAttributes.endpointUrl" : {
					"description" : "Send API url of the OTT network.",
					"type" : "string"
				},
				"ottPlatformAttributes.callbackVerifyToken" : {
					"description" : "Facebook Verify Token need to verify callback events.",
					"type" : "string"
				},
				"ottPlatformAttributes.isActive" : {
					"description" : "Indicate if the OTT resource is active with values: 0 (Inactive), 1 (Active).",
					"type" : "integer"
				},
				"ottPlatformAttributes.channelId" : {
					"description" : "LINE channel Id. Required for registering LINE resource.",
					"type" : "string"
				},
				"ottPlatformAttributes.channelName" : {
					"description" : "LINE channel name. Required for registering LINE resource",
					"type" : "string"
				},
				"ottPlatformAttributes.channelSecret" : {
					"description" : "LINE channel secret. Required for registering LINE resource.",
					"type" : "string"
				},
				"ottPlatformAttributes.customerConnectSecret" : {
					"description" : "LINE Customer Connect Secret needed for validating LINE inbound events when using Switcher API.",
					"type" : "string"
				},
				"ottPlatformAttributes.isTransactional" : {
					"description" : "Indicate if LINE channel is Transactional or Reseller with values: 0 (Reseller), 1 (Transactional).",
					"type" : "integer"
				},
				"ottPlatformAttributes.isTestChannel" : {
					"description" : "Indicate if LINE channel is a Test channel with values: 0 (Not a test channel), 1 (test channel).",
					"type" : "integer"
				}
			}
		},
		"ResponseOttRetrieveRegistration_200": {
			"type": "object",
			"required": [],
			"properties": {
				"ottPlatformName": {
					"description": "Indicates the name of the OTT network the resource is being registered with values: line, messenger.",
					"type": "string"
				},
				"ottPlatformAttributes": {
					"type": "object",
					"description": "Object containing OTT platform attributes."
				},
				"ottPlatformAttributes.applicationId" : {
					"description" : "Facebook Application Id.",
					"type" : "string"
				},
				"ottPlatformAttributes.pageId" : {
					"description" : "Facebook Page Id.",
					"type" : "string"
				},
				"ottPlatformAttributes.pageName" : {
					"description" : "Facebook Page Name.",
					"type" : "string"
				},
				"ottPlatformAttributes.endpointUrl" : {
					"description" : "Send API url of the OTT network.",
					"type" : "string"
				},
				"ottPlatformAttributes.isActive" : {
					"description" : "Indicates if the OTT resource is active with values: 0 (Inactive), 1 (Active).",
					"type" : "integer"
				},
				"ottPlatformAttributes.channelId" : {
					"description" : "LINE channel Id. Required for registering LINE resource.",
					"type" : "string"
				},
				"ottPlatformAttributes.channelName" : {
					"description" : "LINE channel name. Required for registering LINE resource.",
					"type" : "string"
				},
				"ottPlatformAttributes.isTransactional" : {
					"description" : "Indicates if LINE channel is Transactional or Reseller with values: 0 (Reseller), 1 (Transactional).",
					"type" : "integer"
				},
				"ottPlatformAttributes.isTestChannel" : {
					"description" : "Indicates if LINE channel is a Test channel with values: 0 (Not a test channel), 1 (test channel).",
					"type" : "integer"
				}
			}
		},
		"ResponseOttRetrieveRegistrationCollection_200": {
			"type": "object",
			"required": [
				"items.ottPlatformName",
				"items.ottPlatformAttributes"
			],
			"properties": {
				"count": {
					"description": "Total count of the number of resources registered for a specific OTT network.",
					"type": "string"
				},
				"page": {
					"description": "Page Number of the results returned.",
					"type": "string"
				},
				"pageSize": {
					"description": "Page size of the results returned.",
					"type": "string"
				},
				"links": {
					"description": "Pagination links.",
					"type": "object"
				},
				"links.self" : {
					"description": "Link to the current page of result set.",
					"type": "object"
				},
				"links.self.href": {
					"description": "URL to the current page of the result set.",
					"type": "string"
				},
				"links.previous" : {
					"description": "Link to the previous page of result set.",
					"type": "object"
				},
				"links.previous.href": {
					"description": "URL to the previous page of the result set.",
					"type": "string"
				},
				"links.next" : {
					"description": "Link to the next page of result set.",
					"type": "object"
				},
				"links.next.href": {
					"description": "URL to the next page of the result set.",
					"type": "string"
				},
				"items": {
					"description": "Indicates the name of the OTT network the resource is being registered with values: line, messenger.",
					"type": "array"
				},
				"items.ottPlatformName": {
					"description": "Indicate the name of the OTT network the resource is being registered with values: line, messenger.",
					"type": "string"
				},
				"items.ottPlatformAttributes": {
					"type": "object",
					"description": "Object containing OTT platform attributes."
				},
				"items.ottPlatformAttributes.applicationId": {
					"description" : "Facebook Application Id. Required for registering Messenger resource.",
					"type" : "string"
				},
				"items.ottPlatformAttributes.pageId": {
					"description" : "Facebook Page Id. Required for registering Messenger resource.",
					"type" : "string"
				},
				"items.ottPlatformAttributes.pageName": {
					"description" : "Facebook Page Name. Required for registering Messenger resource.",
					"type" : "string"
				},
				"items.ottPlatformAttributes.endpointUrl": {
					"description" : "Send API url of the OTT network.",
					"type" : "string"
				},
				"items.ottPlatformAttributes.isActive": {
					"description" : "Indicate if the OTT resource is active with values: 0 (Inactive), 1 (Active).",
					"type" : "integer"
				},
				"items.ottPlatformAttributes.channelId": {
					"description" : "LINE channel Id. Required for registering LINE resource.",
					"type" : "string"
				},
				"items.ottPlatformAttributes.channelName": {
					"description" : "LINE channel name. Required for registering LINE resource.",
					"type" : "string"
				},
				"items.ottPlatformAttributes.isTransactional": {
					"description" : "Indicate if LINE channel is Transactional or Reseller with values: 0 (Reseller), 1 (Transactional).",
					"type" : "integer"
				},
				"items.ottPlatformAttributes.isTestChannel": {
					"description" : "Indicate if LINE channel is a Test channel with values: 0 (Not a test channel), 1 (test channel).",
					"type" : "integer"
				}
			}
		},
		"ResponseOttSendMessage_201": {
			"type": "object",
			"required": [],
			"properties": {
				"ottRequestId": {
					"description": "The ID of the send message request which can also be used to retrieve the message send details.",
					"type": "guid"
				}
			}
		},
		"ResponseOttMessage_400": {
			"type": "object",
			"required": [],
			"properties": {
				"message": {
					"description": "Error message.",
					"type": "string"
				},
				"errorcode": {
					"description":"Error code.",
					"type": "number"
				},
				"documentation": {
					"description":"Documentation for the error code.",
					"type": "string"
				},
				"validationErrors": {
					"description": "Validation errors in the request payload.",
					"type": "array"
				}
			}
		},
		"ResponseOttMessage_40x": {
			"type": "object",
			"required": [],
			"properties": {
				"message": {
					"description": "Error message.",
					"type": "string"
				},
				"errorcode": {
					"description":"Error code.",
					"type": "number"
				},
				"documentation": {
					"description":"Documentation for the error code.",
					"type": "string"
				}
			}
		},
		"ResponseOttMessage_201": {
			"type": "object",
			"required": [],
			"properties": {}
		},
		"ResponseAuditEvents_200": {
			"type": "object",
			"required": [],
			"properties": {
				"id": {
					"type": "number",
					"description": "ID of the audit event."
				},
				"createdDate": {
					"type": "datetime",
					"description": "Creation date of the audit event."
				},
				"memberId": {
					"type": "number",
					"description": "Member ID associated with the audit event."
				},
				"enterpriseId": {
					"type": "number",
					"description": "Enterprise ID or parent to which the member belongs."
				},
				"employee": {
					"type": "object",
					"description": "User associated with the audit event."
				},
				"objectType": {
					"type": "object",
					"description": "Type of object used to describe the audit event."
				},
				"operation": {
					"type": "object",
					"description": "Action taken against the objectType."
				},
				"object": {
					"type": "object",
					"description": "Additional information about the audited object. Can contain an ID, the name of the object, or both."
				},
				"transactionId": {
					"type": "guid",
					"description": "Unique value to identify the transaction in which the audit event was captured."
				}
			}
		},
		"ResponseAuditEvents_400": {
			"type": "object",
			"required": [],
			"properties": {
				"Message": {
					"description": "Error message.",
					"type": "string"
				},
				"ErrorCode": {
					"description": "Error code for the exception.",
					"type": "number"
				},
				"Documentation": {
					"description": "Documentation for the error.",
					"type": "string"
				}
			}
		},
		"ResponseAuditEvents_401": {
			"type": "object",
			"required": [],
			"properties": {
				"Message": {
					"description": "Error message.",
					"type": "string"
				},
				"ErrorCode": {
					"description": "Error code for the exception.",
					"type": "number"
				},
				"Documentation": {
					"description": "Documentation for the error.",
					"type": "string"
				}
			}
		},
		"ResponseSecurityEvents_200": {
			"type": "object",
			"required": [],
			"properties": {
				"id": {
					"type": "number",
					"description": "ID of the security event."
				},
				"createdDate": {
					"type": "datetime",
					"description": "Creation date of the security event."
				},
				"memberId": {
					"type": "number",
					"description": "Member ID associated with the security event."
				},
				"enterpriseId": {
					"type": "number",
					"description": "Enterprise ID to which the member belongs."
				},
				"employee": {
					"type": "object",
					"description": "User associated with the security event."
				},
				"ipAddress": {
					"type": "string",
					"description": "IP address associated with the security event."
				},
				"sessionId": {
					"type": "string",
					"description": "Session ID associated with the security event. Available only with Advanced Audit Trail. Contact your Marketing Cloud account representative."
				},
				"userAgent": {
					"type": "string",
					"description": "User agent associated with the security event. Available only with Advanced Audit Trail. Contact your Marketing Cloud account representative."
				},
				"eventType": {
					"type": "object",
					"description": "Type of security event."
				},
				"loginStatus": {
					"type": "object",
					"description": "Status of the security event."
				},
				"eventSource": {
					"type": "object",
					"description": "Source of the security event."
				}
			}
		},
		"ResponseSecurityEvents_400": {
			"type": "object",
			"required": [],
			"properties": {
				"Message": {
					"description": "Error message.",
					"type": "string"
				},
				"ErrorCode": {
					"description": "Error code for the exception.",
					"type": "number"
				},
				"Documentation": {
					"description": "Documentation for the error.",
					"type": "string"
				}
			}
		},
		"ResponseSecurityEvents_401": {
			"type": "object",
			"required": [],
			"properties": {
				"Message": {
					"description": "Error message.",
					"type": "string"
				},
				"ErrorCode": {
					"description": "Error code for the exception.",
					"type": "number"
				},
				"Documentation": {
					"description": "Documentation for the error.",
					"type": "string"
				}
			}
		},
		"KeyImport": {
			"required": [
				"keyName",
				"keyType",
				"mid",
				"keySize"
			],
			"type": "object",
			"properties": {
				"keyName": {
				  "type": "string"
				},
				"keyId": {
				 "description": "Format: GUID." ,
				  "type": "string"
				},
				"keyVersion": {
					"description": "Format: int32.",
				  "type": "integer"
				},
				"keyType": {
				  "type": "string"
				},
				"mid": {
					"description": "Format: int64.",
				  "type": "integer"
				},
				"eid": {
					"description": "Format: int64.",
				  "type": "integer"
				},
				"keySize": {
				  "description": "Format: int32.",
				  "type": "integer"
				},
				"keyState": {
				  "type": "string"
				},
				"exportable": {
				  "type": "boolean"
				},
				"createdDate": {
				  "type": "string"
				},
				"employeeId": {
					"description": "Format: int32.",
				  "type": "integer"
				},
				"modifiedDate": {
				  "type": "string"
				},
				"modifiedBy": {
					"description": "Format: int32.",
				  "type": "integer"
				},
				"keyData.wrappedRsaBytes": {
				  "type": "string"
				},
				"keyData.digitalSignature": {
					"type": "string"
				},
				"keyData.initializationVector": {
					"description": "IV may be required when you wrap with an AES key.",
					"type": "string"
				},
				"keyData.wrappedAesBytes": {
					"type": "string"
				}
			}
		},
		"KeyProblemDetails": {
			"type": "object",
			"required": [],
			"properties": {
				"type": {
					"type": "string"
				},
				"title": {
					"type": "string"
				},
				"status": {
					"description": "Format: int32.",
					"type": "integer"
				},
				"detail": {
					"type": "string"
				},
				"instance": {
					"type": "string"
				},
				"additionalProperties": {
					"type": "object"
				}
			}
		},
		"KeyErrorResponse": {
			"type": "object",
			"required": [],
			"properties": {
				"statusCode": {
					"description": "Format: int32.",
					"type": "integer"
				},
				"requestId": {
					"type": "string"
				},
				"message": {
					"type": "string"
				},
				"messageCode": {
					"type": "string"
				}
			}
		},
		"KeyResponseString": {
			"type": "string",
			"required": [],
			"properties": {
			}
		},
		"KeyValuePair[String,Int32]": {
			"type": "object",
			"required": [],
			"properties": {
				"key": {
					"description": "key Data",
					"type": "string"
				},
				"value": {
					"description": "Format: int32.",
					"type": "integer"
				}
			}
		},
		"KeyMetadata": {
			"type": "object",
			"required": [],
			"properties": {
				"keyName": {
					"type": "string"
				},
				"keyId": {
					"description": "format: uuid",
					"type": "string"
				},
				"keyVersion": {
					"description": "Format: int32.",
					"type": "integer"
				},
				"keyType": {
					"type": "string"
				},
				"eid": {
					"description": "format: int64",
					"type": "integer"
				},
				"mid": {
					"description": "format: int64",
					"type": "integer"
				},
				"keySize": {
					"description": "Format: int32.",
					"type": "integer"
				},
				"keyState": {
					"type": "string"
				},
				"securityHash": {
					"description":"format: byte",
					"type": "string"
				},
				"keySignature": {
					"type": "string"
				},
				"keyStorageRepository": {
          				"type": "string"
				},
				"createdDate": {
					"description": "format: date-time",
					"type": "string"
				},
				"createdBy": {
					"description": "Format: int32.",
					"type": "integer"
				},
				"modifiedDate": {
					"description": "format: date-time",
					"type": "string"
				},
				"modifiedBy": {
					"description": "Format: int32.",
					"type": "integer"
				},
				"keyData": {
					"type": "string"
				},
				"publicKeyData": {
					"type": "string"
				},
				"initializationVector": {
					"type": "string"
				},
				"keyDataWrappingKey": {
					"type": "string"
				},
				"isKeyDataWrapped": {
					"type": "boolean"
				},
				"exportable": {
					"type": "boolean"
				},
				"imported": {
					"type": "boolean"
				},
				"keyProviderIdentifier": {
					"type": "string"
				},
				"useCase": {
					"type": "string"
				},
				"keyOwnerId": {
					"description": "Format: int32.",
					"type": "integer"
				}
			}
		},
		"ResponseRegenerateSignatureKey_200": {
			"type": "object",
			"required": [],
			"properties": {
				"callbackName": {
					"description": "Name of the callback.",
					"type": "string"
				},
				"callbackId": {
					"description": "Unique identifier of the callback.",
					"type": "string"
				},
				"url": {
					"description": "HTTPS URL of the customer callback that receives event notifications in the format `https://host`[/path].",
					"type": "string"
				},
				"signatureKey": {
					"description": "A symmetric key to authenticate messages coming from Marketing Cloud.",
					"type": "string"
				}
			}
		}
	},
	"_swagger": "2.0",
    "tags": [
    {
      "x-sfdc-group-id": "address",
      "x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/address/v1",
      "description": "Provides address functionality",
      "name": "Address"
    },
    {
      "x-sfdc-group-id": "approvals",
      "x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/hub/v1",
      "description": "Provides approvals functionality",
      "name": "Approvals"
    },
    {
      "x-sfdc-group-id": "asset",
      "x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/asset/v1",
      "description": "Provides asset functionality",
      "name": "Asset"
    },
	{
		"x-sfdc-group-id": "audit",
		"x-base-path": "https://YOUR_SUBDOMAIN.auth.marketingcloudapis.com/v1",
		"description": "Provides Audit Trail functionality",
		"name": "Audit"
	},
    {
      "x-sfdc-group-id": "auth",
      "x-base-path": "https://YOUR_SUBDOMAIN.auth.marketingcloudapis.com/v1",
      "description": "Interfaces with core systems to provide authentication functionality",
      "name": "Authentication"
    },
    {
      "x-sfdc-group-id": "campaigns",
      "x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/hub/v1",
      "description": "Provides campaign functionality",
      "name": "Campaigns"
    },
	{
		"x-sfdc-group-id": "chatMessaging",
		"x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/ott/v1",
		"description": "Provides Chat Messaging services",
		"name": "Chat Messaging"
	},
    {
      "x-sfdc-group-id": "contacts",
      "x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/contacts/v1 <p>These resources work only with data extensions that are linked in an attribute group in Contact Builder.</p>",
      "description": "Provides contacts functionality",
      "name": "Contacts"
    },
    {
      "x-sfdc-group-id": "data",
      "x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/data/v1",
      "description": "Provides data functionality",
      "name": "Data"
    },
    {
      "x-sfdc-group-id": "dataevents",
      "x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/hub/v1",
      "description": "Provides data events functionality",
      "name": "Data Events"
    },
    {
      "x-sfdc-group-id": "domainVerification",
      "x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/messaging/v1",
      "description": "Provides functionality related to Domain Verification",
      "name": "Domain Verification"
    },
    {
      "x-sfdc-group-id": "eventNotification",
      "x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/platform/v1",
      "description": "Receive notifications when certain events occur in Marketing Cloud.",
      "name": "Event Notification"
    },
    {
      "x-sfdc-group-id": "interaction",
      "x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/interaction/v1",
      "description": "Provides access to create journeys within Journey Builder programatically.",
      "name": "Interaction"
    },
	{
		"x-sfdc-group-id": "messaging",
		"x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/messaging/v1",
		"description": "Provides messaging functionality",
		"name": "Messaging"
	},
	{
		"x-sfdc-group-id": "objects",
		"x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/hub/v1",
		"description": "Provides tagging functionality",
		"name": "Objects"
	},
    {
      "x-sfdc-group-id": "platform",
      "x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/platform/v1",
      "description": "Provides platform-related services",
      "name": "Platform"
    },
	{
		"x-sfdc-group-id": "push",
		"x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/push/v1",
		"description": "Provides push functionality",
		"name": "Push"
	},
	{
		"x-sfdc-group-id": "sms",
		"x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/sms/v1",
		"description": "Provides SMS functionality",
		"name": "SMS"
	},
    {
      "x-sfdc-group-id": "transactionalMessaging",
      "x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/messaging/v1",
      "description": "Provides transactional messaging",
      "name": "Transactional Messaging"
    },
    {
      "x-sfdc-group-id": "workflowteams",
      "x-base-path": "https://YOUR_SUBDOMAIN.rest.marketingcloudapis.com/hub/v1",
      "description": "Provides workflow functionality.",
      "name": "Workflow Teams"
    }
  ]
}
